<?php
/**
 * InvoicingPlanApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\PurchaseOrder\ApiException;
use BeLenka\SAP\PurchaseOrder\Configuration;
use BeLenka\SAP\PurchaseOrder\HeaderSelector;
use BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * InvoicingPlanApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InvoicingPlanApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'purchaseOrderInvoicingPlanGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet' => [
            'application/json',
        ],
        'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet' => [
            'application/json',
        ],
        'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation purchaseOrderInvoicingPlanGet
     *
     * Get entities from PurchaseOrderInvoicingPlan
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanGetWithHttpInfo
     *
     * Get entities from PurchaseOrderInvoicingPlan
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanGetAsync
     *
     * Get entities from PurchaseOrderInvoicingPlan
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanGetAsyncWithHttpInfo
     *
     * Get entities from PurchaseOrderInvoicingPlan
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType';
        $request = $this->purchaseOrderInvoicingPlanGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet
     *
     * Get related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetWithHttpInfo
     *
     * Get related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetAsync
     *
     * Get related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetAsync($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
        $request = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan_item' is set
        if ($invoicing_plan_item === null || (is_array($invoicing_plan_item) && count($invoicing_plan_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan_item when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($invoicing_plan_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlanItem/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlanItem}/{InvoicingPlan}/_PurchaseOrderInvoicingPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan_item !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlanItem' . '}',
                ObjectSerializer::toPathValue($invoicing_plan_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet
     *
     * Get entity from PurchaseOrderInvoicingPlan by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetWithHttpInfo
     *
     * Get entity from PurchaseOrderInvoicingPlan by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetAsync
     *
     * Get entity from PurchaseOrderInvoicingPlan by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetAsync($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetAsyncWithHttpInfo
     *
     * Get entity from PurchaseOrderInvoicingPlan by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet
     *
     * Get entities from related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet($purchase_order, $purchase_order_item, $invoicing_plan, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetWithHttpInfo
     *
     * Get entities from related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetAsync
     *
     * Get entities from related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetAsync($purchase_order, $purchase_order_item, $invoicing_plan, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetAsyncWithHttpInfo
     *
     * Get entities from related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPOInvoicingPlanItemType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}/_POInvoicingPlanItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost
     *
     * Add new entity to related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostWithHttpInfo
     *
     * Add new entity to related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostAsync
     *
     * Add new entity to related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostAsync($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostAsyncWithHttpInfo
     *
     * Add new entity to related _POInvoicingPlanItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPostRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPOInvoicingPlanItemPost'
            );
        }


        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}/_POInvoicingPlanItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_po_invoicing_plan_item_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch
     *
     * Update entity in PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'][0])
    {
        $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, $contentType);
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchWithHttpInfo
     *
     * Update entity in PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchAsync
     *
     * Update entity in PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchAsync($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchAsyncWithHttpInfo
     *
     * Update entity in PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'][0])
    {
        $returnType = '';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatchRequest($purchase_order, $purchase_order_item, $invoicing_plan, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPatch'
            );
        }


        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet
     *
     * Get related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetWithHttpInfo
     *
     * Get related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetAsync
     *
     * Get related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetAsync($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling InvoicingPlanApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderItemGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}/_PurchaseOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet
     *
     * Get entities from related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet($purchase_order, $purchase_order_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'][0])
    {
        list($response) = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetWithHttpInfo
     *
     * Get entities from related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetWithHttpInfo($purchase_order, $purchase_order_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'][0])
    {
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetAsync
     *
     * Get entities from related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetAsync($purchase_order, $purchase_order_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'][0])
    {
        return $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo
     *
     * Get entities from related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderInvoicingPlanType';
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGetRequest($purchase_order, $purchase_order_item, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet, must be smaller than or equal to 5.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrderItem/{PurchaseOrder}/{PurchaseOrderItem}/_PurchaseOrderInvoicingPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost
     *
     * Add new entity to related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'][0])
    {
        list($response) = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostWithHttpInfo($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostWithHttpInfo($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'][0])
    {
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostRequest($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostAsync
     *
     * Add new entity to related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostAsync($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'][0])
    {
        return $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostAsyncWithHttpInfo($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostAsyncWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderInvoicingPlan
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostAsyncWithHttpInfo($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanType';
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostRequest($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPostRequest($purchase_order, $purchase_order_item, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling InvoicingPlanApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderInvoicingPlanPost'
            );
        }


        $resourcePath = '/PurchaseOrderItem/{PurchaseOrder}/{PurchaseOrderItem}/_PurchaseOrderInvoicingPlan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_invoicing_plan_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
