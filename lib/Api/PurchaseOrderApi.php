<?php
/**
 * PurchaseOrderApi
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BeLenka\SAP\PurchaseOrder\ApiException;
use BeLenka\SAP\PurchaseOrder\Configuration;
use BeLenka\SAP\PurchaseOrder\HeaderSelector;
use BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * PurchaseOrderApi Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PurchaseOrderApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet' => [
            'application/json',
        ],
        'purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet' => [
            'application/json',
        ],
        'purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet' => [
            'application/json',
        ],
        'purchaseOrderPost' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderDelete' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPatch' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPurchaseOrderItemGet' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPurchaseOrderItemPost' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPurchaseOrderNoteGet' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPurchaseOrderNotePost' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderPurchaseOrderPartnerGet' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet' => [
            'application/json',
        ],
        'purchaseOrderPurchaseOrderSupplierAddressGet' => [
            'application/json',
        ],
        'purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet' => [
            'application/json',
        ],
        'purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document (required)
     * @param  string $purchase_order_item Purchasing Document Item (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string $reservation_item Reservation Item (required)
     * @param  string $record_type Reservation Record Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select = null, $expand = null, string $contentType = self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'][0])
    {
        list($response) = $this->pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document (required)
     * @param  string $purchase_order_item Purchasing Document Item (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string $reservation_item Reservation Item (required)
     * @param  string $record_type Reservation Record Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select = null, $expand = null, string $contentType = self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'][0])
    {
        $request = $this->pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document (required)
     * @param  string $purchase_order_item Purchasing Document Item (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string $reservation_item Reservation Item (required)
     * @param  string $record_type Reservation Record Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetAsync($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select = null, $expand = null, string $contentType = self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'][0])
    {
        return $this->pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document (required)
     * @param  string $purchase_order_item Purchasing Document Item (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string $reservation_item Reservation Item (required)
     * @param  string $record_type Reservation Record Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select = null, $expand = null, string $contentType = self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
     *
     * @param  string $purchase_order Purchasing Document (required)
     * @param  string $purchase_order_item Purchasing Document Item (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string $reservation_item Reservation Item (required)
     * @param  string $record_type Reservation Record Type (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $reservation_item, $record_type, $select = null, $expand = null, string $contentType = self::contentTypes['pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'schedule_line' is set
        if ($schedule_line === null || (is_array($schedule_line) && count($schedule_line) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_line when calling pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
            );
        }
        if (strlen($schedule_line) > 4) {
            throw new \InvalidArgumentException('invalid length for "$schedule_line" when calling PurchaseOrderApi.pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'reservation_item' is set
        if ($reservation_item === null || (is_array($reservation_item) && count($reservation_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reservation_item when calling pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
            );
        }
        if (strlen($reservation_item) > 4) {
            throw new \InvalidArgumentException('invalid length for "$reservation_item" when calling PurchaseOrderApi.pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'record_type' is set
        if ($record_type === null || (is_array($record_type) && count($record_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $record_type when calling pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet'
            );
        }
        if (strlen($record_type) > 1) {
            throw new \InvalidArgumentException('invalid length for "$record_type" when calling PurchaseOrderApi.pOSubcontractingComponentPurchaseOrderPurchaseOrderItemScheduleLineReservationItemRecordTypePurchaseOrderGet, must be smaller than or equal to 1.');
        }
        
        
        

        $resourcePath = '/POSubcontractingComponent/{PurchaseOrder}/{PurchaseOrderItem}/{ScheduleLine}/{ReservationItem}/{RecordType}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($schedule_line !== null) {
            $resourcePath = str_replace(
                '{' . 'ScheduleLine' . '}',
                ObjectSerializer::toPathValue($schedule_line),
                $resourcePath
            );
        }
        // path params
        if ($reservation_item !== null) {
            $resourcePath = str_replace(
                '{' . 'ReservationItem' . '}',
                ObjectSerializer::toPathValue($reservation_item),
                $resourcePath
            );
        }
        // path params
        if ($record_type !== null) {
            $resourcePath = str_replace(
                '{' . 'RecordType' . '}',
                ObjectSerializer::toPathValue($record_type),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $delivery_address_id Manual address number in purchasing document item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet($purchase_order, $purchase_order_item, $delivery_address_id, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'][0])
    {
        list($response) = $this->purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $delivery_address_id, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $delivery_address_id Manual address number in purchasing document item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $delivery_address_id, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'][0])
    {
        $request = $this->purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $delivery_address_id, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $delivery_address_id Manual address number in purchasing document item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $delivery_address_id, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'][0])
    {
        return $this->purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $delivery_address_id, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $delivery_address_id Manual address number in purchasing document item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $delivery_address_id, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $delivery_address_id, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $delivery_address_id Manual address number in purchasing document item (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $delivery_address_id, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'delivery_address_id' is set
        if ($delivery_address_id === null || (is_array($delivery_address_id) && count($delivery_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delivery_address_id when calling purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet'
            );
        }
        if (strlen($delivery_address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$delivery_address_id" when calling PurchaseOrderApi.purOrderItemDeliveryAddressPurchaseOrderPurchaseOrderItemDeliveryAddressIDPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurOrderItemDeliveryAddress/{PurchaseOrder}/{PurchaseOrderItem}/{DeliveryAddressID}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($delivery_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DeliveryAddressID' . '}',
                ObjectSerializer::toPathValue($delivery_address_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $pricing_document Number of the Document Condition (required)
     * @param  string $pricing_document_item Condition item number (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'][0])
    {
        list($response) = $this->purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $pricing_document Number of the Document Condition (required)
     * @param  string $pricing_document_item Condition item number (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'][0])
    {
        $request = $this->purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $pricing_document Number of the Document Condition (required)
     * @param  string $pricing_document_item Condition item number (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'][0])
    {
        return $this->purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $pricing_document Number of the Document Condition (required)
     * @param  string $pricing_document_item Condition item number (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $pricing_document Number of the Document Condition (required)
     * @param  string $pricing_document_item Condition item number (required)
     * @param  string $pricing_procedure_step Step Number (required)
     * @param  string $pricing_procedure_counter Condition Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $pricing_document, $pricing_document_item, $pricing_procedure_step, $pricing_procedure_counter, $select = null, $expand = null, string $contentType = self::contentTypes['purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'pricing_document' is set
        if ($pricing_document === null || (is_array($pricing_document) && count($pricing_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_document when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($pricing_document) > 10) {
            throw new \InvalidArgumentException('invalid length for "$pricing_document" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'pricing_document_item' is set
        if ($pricing_document_item === null || (is_array($pricing_document_item) && count($pricing_document_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_document_item when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($pricing_document_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$pricing_document_item" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'pricing_procedure_step' is set
        if ($pricing_procedure_step === null || (is_array($pricing_procedure_step) && count($pricing_procedure_step) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_step when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($pricing_procedure_step) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_step" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 3.');
        }
        
        // verify the required parameter 'pricing_procedure_counter' is set
        if ($pricing_procedure_counter === null || (is_array($pricing_procedure_counter) && count($pricing_procedure_counter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pricing_procedure_counter when calling purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet'
            );
        }
        if (strlen($pricing_procedure_counter) > 3) {
            throw new \InvalidArgumentException('invalid length for "$pricing_procedure_counter" when calling PurchaseOrderApi.purOrderItemPricingElementPurchaseOrderPurchaseOrderItemPricingDocumentPricingDocumentItemPricingProcedureStepPricingProcedureCounterPurchaseOrderGet, must be smaller than or equal to 3.');
        }
        
        
        

        $resourcePath = '/PurOrderItemPricingElement/{PurchaseOrder}/{PurchaseOrderItem}/{PricingDocument}/{PricingDocumentItem}/{PricingProcedureStep}/{PricingProcedureCounter}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($pricing_document !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingDocument' . '}',
                ObjectSerializer::toPathValue($pricing_document),
                $resourcePath
            );
        }
        // path params
        if ($pricing_document_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingDocumentItem' . '}',
                ObjectSerializer::toPathValue($pricing_document_item),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_step !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureStep' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_step),
                $resourcePath
            );
        }
        // path params
        if ($pricing_procedure_counter !== null) {
            $resourcePath = str_replace(
                '{' . 'PricingProcedureCounter' . '}',
                ObjectSerializer::toPathValue($pricing_procedure_counter),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $account_assignment_number Sequential Number of Account Assignment (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet($purchase_order, $purchase_order_item, $account_assignment_number, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $account_assignment_number, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $account_assignment_number Sequential Number of Account Assignment (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $account_assignment_number, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $account_assignment_number, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $account_assignment_number Sequential Number of Account Assignment (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $account_assignment_number, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $account_assignment_number, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $account_assignment_number Sequential Number of Account Assignment (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $account_assignment_number, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $account_assignment_number, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $account_assignment_number Sequential Number of Account Assignment (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $account_assignment_number, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'account_assignment_number' is set
        if ($account_assignment_number === null || (is_array($account_assignment_number) && count($account_assignment_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_assignment_number when calling purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet'
            );
        }
        if (strlen($account_assignment_number) > 2) {
            throw new \InvalidArgumentException('invalid length for "$account_assignment_number" when calling PurchaseOrderApi.purchaseOrderAccountAssignmentPurchaseOrderPurchaseOrderItemAccountAssignmentNumberPurchaseOrderGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderAccountAssignment/{PurchaseOrder}/{PurchaseOrderItem}/{AccountAssignmentNumber}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($account_assignment_number !== null) {
            $resourcePath = str_replace(
                '{' . 'AccountAssignmentNumber' . '}',
                ObjectSerializer::toPathValue($account_assignment_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderGet
     *
     * Get entities from PurchaseOrder
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderGet($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderGetWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderGetWithHttpInfo
     *
     * Get entities from PurchaseOrder
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderGetWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderGetAsync
     *
     * Get entities from PurchaseOrder
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderGetAsync($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderGet'][0])
    {
        return $this->purchaseOrderGetAsyncWithHttpInfo($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderGetAsyncWithHttpInfo
     *
     * Get entities from PurchaseOrder
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderGetAsyncWithHttpInfo($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderType';
        $request = $this->purchaseOrderGetRequest($top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderGet'
     *
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderGetRequest($top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderGet'][0])
    {

        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling PurchaseOrderApi.purchaseOrderGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling PurchaseOrderApi.purchaseOrderGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan_item Item for billing plan/invoice plan/payment cards (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan_item' is set
        if ($invoicing_plan_item === null || (is_array($invoicing_plan_item) && count($invoicing_plan_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan_item when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($invoicing_plan_item) > 6) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan_item" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 6.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanItemPurchaseOrderPurchaseOrderItemInvoicingPlanItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlanItem/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlanItem}/{InvoicingPlan}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan_item !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlanItem' . '}',
                ObjectSerializer::toPathValue($invoicing_plan_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $invoicing_plan Billing/Invoicing Plan Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $invoicing_plan, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'invoicing_plan' is set
        if ($invoicing_plan === null || (is_array($invoicing_plan) && count($invoicing_plan) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoicing_plan when calling purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet'
            );
        }
        if (strlen($invoicing_plan) > 10) {
            throw new \InvalidArgumentException('invalid length for "$invoicing_plan" when calling PurchaseOrderApi.purchaseOrderInvoicingPlanPurchaseOrderPurchaseOrderItemInvoicingPlanPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderInvoicingPlan/{PurchaseOrder}/{PurchaseOrderItem}/{InvoicingPlan}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($invoicing_plan !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoicingPlan' . '}',
                ObjectSerializer::toPathValue($invoicing_plan),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet($purchase_order, $purchase_order_item, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $text_object_type, $language, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $text_object_type, $language, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetAsync($purchase_order, $purchase_order_item, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        return $this->purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $text_object_type, $language, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $text_object_type, $language, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'text_object_type' is set
        if ($text_object_type === null || (is_array($text_object_type) && count($text_object_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_object_type when calling purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($text_object_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$text_object_type" when calling PurchaseOrderApi.purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling PurchaseOrderApi.purchaseOrderItemNotePurchaseOrderPurchaseOrderItemTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderItemNote/{PurchaseOrder}/{PurchaseOrderItem}/{TextObjectType}/{Language}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($text_object_type !== null) {
            $resourcePath = str_replace(
                '{' . 'TextObjectType' . '}',
                ObjectSerializer::toPathValue($text_object_type),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet($purchase_order, $purchase_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetAsync($purchase_order, $purchase_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $purchase_order_item Item Number of Purchase Order (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGetRequest($purchase_order, $purchase_order_item, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderItemPurchaseOrderPurchaseOrderItemPurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderItem/{PurchaseOrder}/{PurchaseOrderItem}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet($purchase_order, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo($purchase_order, $text_object_type, $language, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetWithHttpInfo($purchase_order, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $text_object_type, $language, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetAsync($purchase_order, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        return $this->purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $text_object_type, $language, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $text_object_type, $language, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $text_object_type Text ID (required)
     * @param  string $language Language Key (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGetRequest($purchase_order, $text_object_type, $language, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'text_object_type' is set
        if ($text_object_type === null || (is_array($text_object_type) && count($text_object_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $text_object_type when calling purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($text_object_type) > 4) {
            throw new \InvalidArgumentException('invalid length for "$text_object_type" when calling PurchaseOrderApi.purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 4.');
        }
        
        // verify the required parameter 'language' is set
        if ($language === null || (is_array($language) && count($language) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $language when calling purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet'
            );
        }
        if (strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling PurchaseOrderApi.purchaseOrderNotePurchaseOrderTextObjectTypeLanguagePurchaseOrderGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderNote/{PurchaseOrder}/{TextObjectType}/{Language}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($text_object_type !== null) {
            $resourcePath = str_replace(
                '{' . 'TextObjectType' . '}',
                ObjectSerializer::toPathValue($text_object_type),
                $resourcePath
            );
        }
        // path params
        if ($language !== null) {
            $resourcePath = str_replace(
                '{' . 'Language' . '}',
                ObjectSerializer::toPathValue($language),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet($purchase_order, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'][0])
    {
        list($response) = $this->purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetWithHttpInfo($purchase_order, $partner_function, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetWithHttpInfo
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetWithHttpInfo($purchase_order, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'][0])
    {
        $request = $this->purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetRequest($purchase_order, $partner_function, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetAsync
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetAsync($purchase_order, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'][0])
    {
        return $this->purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetAsyncWithHttpInfo($purchase_order, $partner_function, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetAsyncWithHttpInfo($purchase_order, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetRequest($purchase_order, $partner_function, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $partner_function Partner Function (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGetRequest($purchase_order, $partner_function, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'partner_function' is set
        if ($partner_function === null || (is_array($partner_function) && count($partner_function) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $partner_function when calling purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet'
            );
        }
        if (strlen($partner_function) > 2) {
            throw new \InvalidArgumentException('invalid length for "$partner_function" when calling PurchaseOrderApi.purchaseOrderPartnerPurchaseOrderPartnerFunctionPurchaseOrderTPGet, must be smaller than or equal to 2.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderPartner/{PurchaseOrder}/{PartnerFunction}/_PurchaseOrderTP';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($partner_function !== null) {
            $resourcePath = str_replace(
                '{' . 'PartnerFunction' . '}',
                ObjectSerializer::toPathValue($partner_function),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPost
     *
     * Add new entity to PurchaseOrder
     *
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPost($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, string $contentType = self::contentTypes['purchaseOrderPost'][0])
    {
        list($response) = $this->purchaseOrderPostWithHttpInfo($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPostWithHttpInfo
     *
     * Add new entity to PurchaseOrder
     *
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPostWithHttpInfo($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, string $contentType = self::contentTypes['purchaseOrderPost'][0])
    {
        $request = $this->purchaseOrderPostRequest($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPostAsync
     *
     * Add new entity to PurchaseOrder
     *
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPostAsync($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, string $contentType = self::contentTypes['purchaseOrderPost'][0])
    {
        return $this->purchaseOrderPostAsyncWithHttpInfo($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPostAsyncWithHttpInfo
     *
     * Add new entity to PurchaseOrder
     *
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPostAsyncWithHttpInfo($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, string $contentType = self::contentTypes['purchaseOrderPost'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderPostRequest($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPost'
     *
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPostRequest($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create, string $contentType = self::contentTypes['purchaseOrderPost'][0])
    {

        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create when calling purchaseOrderPost'
            );
        }


        $resourcePath = '/PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderDelete
     *
     * Delete entity from PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function purchaseOrderPurchaseOrderDelete($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderDelete'][0])
    {
        $this->purchaseOrderPurchaseOrderDeleteWithHttpInfo($purchase_order, $contentType);
    }

    /**
     * Operation purchaseOrderPurchaseOrderDeleteWithHttpInfo
     *
     * Delete entity from PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderDelete'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderDeleteWithHttpInfo($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderDelete'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderDeleteRequest($purchase_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderDeleteAsync
     *
     * Delete entity from PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderDeleteAsync($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderDelete'][0])
    {
        return $this->purchaseOrderPurchaseOrderDeleteAsyncWithHttpInfo($purchase_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderDeleteAsyncWithHttpInfo
     *
     * Delete entity from PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderDeleteAsyncWithHttpInfo($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderDelete'][0])
    {
        $returnType = '';
        $request = $this->purchaseOrderPurchaseOrderDeleteRequest($purchase_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderDelete'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderDeleteRequest($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderDelete'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderDelete'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderDelete, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderGet
     *
     * Get entity from PurchaseOrder by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderGet($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderGetWithHttpInfo($purchase_order, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderGetWithHttpInfo
     *
     * Get entity from PurchaseOrder by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderGetWithHttpInfo($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderGetRequest($purchase_order, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderGetAsync
     *
     * Get entity from PurchaseOrder by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderGetAsync($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderGetAsyncWithHttpInfo
     *
     * Get entity from PurchaseOrder by key
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderGetAsyncWithHttpInfo($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderPurchaseOrderGetRequest($purchase_order, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderGetRequest($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPatch
     *
     * Update entity in PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function purchaseOrderPurchaseOrderPatch($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPatch'][0])
    {
        $this->purchaseOrderPurchaseOrderPatchWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, $contentType);
    }

    /**
     * Operation purchaseOrderPurchaseOrderPatchWithHttpInfo
     *
     * Update entity in PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPatch'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPatchWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPatch'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPatchRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPatchAsync
     *
     * Update entity in PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPatchAsync($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPatch'][0])
    {
        return $this->purchaseOrderPurchaseOrderPatchAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPatchAsyncWithHttpInfo
     *
     * Update entity in PurchaseOrder
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPatchAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPatch'][0])
    {
        $returnType = '';
        $request = $this->purchaseOrderPurchaseOrderPatchRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPatch'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeUpdate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update New property values (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPatchRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPatch'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPatch'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPatch, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update when calling purchaseOrderPurchaseOrderPatch'
            );
        }


        $resourcePath = '/PurchaseOrder/{PurchaseOrder}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_type_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemGet
     *
     * Get entities from related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemGet($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderPurchaseOrderItemGetWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemGetWithHttpInfo
     *
     * Get entities from related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemGetWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderItemGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemGetAsync
     *
     * Get entities from related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemGetAsync($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderPurchaseOrderItemGetAsyncWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemGetAsyncWithHttpInfo
     *
     * Get entities from related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemGetAsyncWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderItemType';
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderItemGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPurchaseOrderItemGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemGetRequest($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPurchaseOrderItemGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderItemGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderItemGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderItemGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_PurchaseOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemPost
     *
     * Add new entity to related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemPost($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderPurchaseOrderItemPostWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemPostWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemPostWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderItemPostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemPostAsync
     *
     * Add new entity to related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemPostAsync($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'][0])
    {
        return $this->purchaseOrderPurchaseOrderPurchaseOrderItemPostAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderItemPostAsyncWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderItem
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemPostAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType';
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderItemPostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPurchaseOrderItemPost'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderItemPostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderItemPost'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPurchaseOrderItemPost'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderItemPost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create when calling purchaseOrderPurchaseOrderPurchaseOrderItemPost'
            );
        }


        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_PurchaseOrderItem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_item_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNoteGet
     *
     * Get entities from related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNoteGet($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderPurchaseOrderNoteGetWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNoteGetWithHttpInfo
     *
     * Get entities from related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNoteGetWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderNoteGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNoteGetAsync
     *
     * Get entities from related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNoteGetAsync($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderPurchaseOrderNoteGetAsyncWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNoteGetAsyncWithHttpInfo
     *
     * Get entities from related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNoteGetAsyncWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderNoteType';
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderNoteGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPurchaseOrderNoteGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNoteGetRequest($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNoteGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPurchaseOrderNoteGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderNoteGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderNoteGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderNoteGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_PurchaseOrderNote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNotePost
     *
     * Add new entity to related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNotePost($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderPurchaseOrderNotePostWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNotePostWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNotePostWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderNotePostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNotePostAsync
     *
     * Add new entity to related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNotePostAsync($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'][0])
    {
        return $this->purchaseOrderPurchaseOrderPurchaseOrderNotePostAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderNotePostAsyncWithHttpInfo
     *
     * Add new entity to related _PurchaseOrderNote
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNotePostAsyncWithHttpInfo($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteType';
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderNotePostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPurchaseOrderNotePost'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create New entity (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderNotePostRequest($purchase_order, $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderNotePost'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPurchaseOrderNotePost'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderNotePost, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create' is set
        if ($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create === null || (is_array($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create) && count($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create when calling purchaseOrderPurchaseOrderPurchaseOrderNotePost'
            );
        }


        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_PurchaseOrderNote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create));
            } else {
                $httpBody = $com_sap_gateway_srvd_a2x_api_purchaseorder2_v0001_purchase_order_note_type_create;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderPartnerGet
     *
     * Get entities from related _PurchaseOrderPartner
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderPartnerGet($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderPurchaseOrderPartnerGetWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderPartnerGetWithHttpInfo
     *
     * Get entities from related _PurchaseOrderPartner
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderPartnerGetWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderPartnerGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderPartnerGetAsync
     *
     * Get entities from related _PurchaseOrderPartner
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderPartnerGetAsync($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderPurchaseOrderPartnerGetAsyncWithHttpInfo($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderPurchaseOrderPartnerGetAsyncWithHttpInfo
     *
     * Get entities from related _PurchaseOrderPartner
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderPartnerGetAsyncWithHttpInfo($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\CollectionOfPurchaseOrderPartnerType';
        $request = $this->purchaseOrderPurchaseOrderPurchaseOrderPartnerGetRequest($purchase_order, $top, $skip, $filter, $count, $orderby, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  int $top Show only the first n items, see [Paging - Top](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptiontop) (optional)
     * @param  int $skip Skip the first n items, see [Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionskip) (optional)
     * @param  string $filter Filter items by property values, see [Filtering](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionfilter) (optional)
     * @param  bool $count Include count of items, see [Count](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptioncount) (optional)
     * @param  string[] $orderby Order items by property values, see [Sorting](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionorderby) (optional)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderPurchaseOrderPartnerGetRequest($purchase_order, $top = null, $skip = null, $filter = null, $count = null, $orderby = null, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderPurchaseOrderPartnerGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderPartnerGet, must be smaller than or equal to 10.');
        }
        
        if ($top !== null && $top < 0) {
            throw new \InvalidArgumentException('invalid value for "$top" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderPartnerGet, must be bigger than or equal to 0.');
        }
        
        if ($skip !== null && $skip < 0) {
            throw new \InvalidArgumentException('invalid value for "$skip" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderPurchaseOrderPartnerGet, must be bigger than or equal to 0.');
        }
        


        
        
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_PurchaseOrderPartner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $top,
            '$top', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            '$skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $filter,
            '$filter', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            '$count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $orderby,
            '$orderby', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet
     *
     * Invoke function GetOutputBinaryData
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetWithHttpInfo($purchase_order, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetWithHttpInfo
     *
     * Invoke function GetOutputBinaryData
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetWithHttpInfo($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetRequest($purchase_order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetAsync
     *
     * Invoke function GetOutputBinaryData
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetAsync($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetAsyncWithHttpInfo($purchase_order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetAsyncWithHttpInfo
     *
     * Invoke function GetOutputBinaryData
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetAsyncWithHttpInfo($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataR';
        $request = $this->purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetRequest($purchase_order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGetRequest($purchase_order, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderSAPSelfGetOutputBinaryDataGet, must be smaller than or equal to 10.');
        }
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/SAP__self.GetOutputBinaryData()';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPurchaseOrderSupplierAddressGet
     *
     * Get related _SupplierAddress
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderPurchaseOrderSupplierAddressGet($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'][0])
    {
        list($response) = $this->purchaseOrderPurchaseOrderSupplierAddressGetWithHttpInfo($purchase_order, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderPurchaseOrderSupplierAddressGetWithHttpInfo
     *
     * Get related _SupplierAddress
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPurchaseOrderSupplierAddressGetWithHttpInfo($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'][0])
    {
        $request = $this->purchaseOrderPurchaseOrderSupplierAddressGetRequest($purchase_order, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPurchaseOrderSupplierAddressGetAsync
     *
     * Get related _SupplierAddress
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderSupplierAddressGetAsync($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'][0])
    {
        return $this->purchaseOrderPurchaseOrderSupplierAddressGetAsyncWithHttpInfo($purchase_order, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPurchaseOrderSupplierAddressGetAsyncWithHttpInfo
     *
     * Get related _SupplierAddress
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPurchaseOrderSupplierAddressGetAsyncWithHttpInfo($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressType';
        $request = $this->purchaseOrderPurchaseOrderSupplierAddressGetRequest($purchase_order, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPurchaseOrderSupplierAddressGet'
     *
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderPurchaseOrderSupplierAddressGetRequest($purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderPurchaseOrderSupplierAddressGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderPurchaseOrderSupplierAddressGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderPurchaseOrderSupplierAddressGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrder/{PurchaseOrder}/_SupplierAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet($purchase_order, $purchase_order_item, $schedule_line, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'][0])
    {
        list($response) = $this->purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'][0])
    {
        $request = $this->purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetAsync
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetAsync($purchase_order, $purchase_order_item, $schedule_line, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'][0])
    {
        return $this->purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrder
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetAsyncWithHttpInfo($purchase_order, $purchase_order_item, $schedule_line, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'
     *
     * @param  string $purchase_order Purchasing Document Number (required)
     * @param  string $purchase_order_item Item Number of Purchasing Document (required)
     * @param  string $schedule_line Delivery Schedule Line Counter (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGetRequest($purchase_order, $purchase_order_item, $schedule_line, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'][0])
    {

        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order_item' is set
        if ($purchase_order_item === null || (is_array($purchase_order_item) && count($purchase_order_item) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_item when calling purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'
            );
        }
        if (strlen($purchase_order_item) > 5) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order_item" when calling PurchaseOrderApi.purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet, must be smaller than or equal to 5.');
        }
        
        // verify the required parameter 'schedule_line' is set
        if ($schedule_line === null || (is_array($schedule_line) && count($schedule_line) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $schedule_line when calling purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet'
            );
        }
        if (strlen($schedule_line) > 4) {
            throw new \InvalidArgumentException('invalid length for "$schedule_line" when calling PurchaseOrderApi.purchaseOrderScheduleLinePurchaseOrderPurchaseOrderItemScheduleLinePurchaseOrderGet, must be smaller than or equal to 4.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderScheduleLine/{PurchaseOrder}/{PurchaseOrderItem}/{ScheduleLine}/_PurchaseOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_item !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderItem' . '}',
                ObjectSerializer::toPathValue($purchase_order_item),
                $resourcePath
            );
        }
        // path params
        if ($schedule_line !== null) {
            $resourcePath = str_replace(
                '{' . 'ScheduleLine' . '}',
                ObjectSerializer::toPathValue($schedule_line),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $supplier_address_id Address Number (required)
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error
     */
    public function purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet($supplier_address_id, $purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'][0])
    {
        list($response) = $this->purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetWithHttpInfo($supplier_address_id, $purchase_order, $select, $expand, $contentType);
        return $response;
    }

    /**
     * Operation purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetWithHttpInfo
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $supplier_address_id Address Number (required)
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \BeLenka\SAP\PurchaseOrder\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|\BeLenka\SAP\PurchaseOrder\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetWithHttpInfo($supplier_address_id, $purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'][0])
    {
        $request = $this->purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetRequest($supplier_address_id, $purchase_order, $select, $expand, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                
            }

            $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetAsync
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $supplier_address_id Address Number (required)
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetAsync($supplier_address_id, $purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'][0])
    {
        return $this->purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetAsyncWithHttpInfo($supplier_address_id, $purchase_order, $select, $expand, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetAsyncWithHttpInfo
     *
     * Get related _PurchaseOrderTP
     *
     * @param  string $supplier_address_id Address Number (required)
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetAsyncWithHttpInfo($supplier_address_id, $purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'][0])
    {
        $returnType = '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType';
        $request = $this->purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetRequest($supplier_address_id, $purchase_order, $select, $expand, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'
     *
     * @param  string $supplier_address_id Address Number (required)
     * @param  string $purchase_order Purchase Order Number (required)
     * @param  string[] $select Select properties to be returned, see [Select](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionselect) (optional)
     * @param  string[] $expand Expand related entities, see [Expand](http://docs.oasis-open.org/odata/odata/v4.01/odata-v4.01-part1-protocol.html#sec_SystemQueryOptionexpand) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGetRequest($supplier_address_id, $purchase_order, $select = null, $expand = null, string $contentType = self::contentTypes['purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'][0])
    {

        // verify the required parameter 'supplier_address_id' is set
        if ($supplier_address_id === null || (is_array($supplier_address_id) && count($supplier_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $supplier_address_id when calling purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'
            );
        }
        if (strlen($supplier_address_id) > 10) {
            throw new \InvalidArgumentException('invalid length for "$supplier_address_id" when calling PurchaseOrderApi.purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet, must be smaller than or equal to 10.');
        }
        
        // verify the required parameter 'purchase_order' is set
        if ($purchase_order === null || (is_array($purchase_order) && count($purchase_order) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order when calling purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet'
            );
        }
        if (strlen($purchase_order) > 10) {
            throw new \InvalidArgumentException('invalid length for "$purchase_order" when calling PurchaseOrderApi.purchaseOrderSupplierAddressSupplierAddressIDPurchaseOrderPurchaseOrderTPGet, must be smaller than or equal to 10.');
        }
        
        
        

        $resourcePath = '/PurchaseOrderSupplierAddress/{SupplierAddressID}/{PurchaseOrder}/_PurchaseOrderTP';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $select,
            '$select', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $expand,
            '$expand', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($supplier_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SupplierAddressID' . '}',
                ObjectSerializer::toPathValue($supplier_address_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrder' . '}',
                ObjectSerializer::toPathValue($purchase_order),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
