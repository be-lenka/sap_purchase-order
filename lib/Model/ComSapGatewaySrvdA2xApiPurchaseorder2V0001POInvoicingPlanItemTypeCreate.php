<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.POInvoicingPlanItem_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'invoicing_plan_item' => 'string',
        'invoicing_plan' => 'string',
        'invoicing_plan_settlement_from_dte' => '\DateTime',
        'invoicing_plan_settlement_to_dte' => '\DateTime',
        'invoicing_plan_invoicing_date' => '\DateTime',
        'invoicing_plan_amount' => '\BeLenka\SAP\PurchaseOrder\Model\BillingValue',
        'transaction_currency' => 'string',
        'purchasing_organization' => 'string',
        'purchasing_group' => 'string',
        'purchase_order_type' => 'string',
        'plant' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]',
        '_purchase_order' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate',
        '_purchase_order_invoicing_plan' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_item' => null,
        'invoicing_plan_item' => null,
        'invoicing_plan' => null,
        'invoicing_plan_settlement_from_dte' => 'date',
        'invoicing_plan_settlement_to_dte' => 'date',
        'invoicing_plan_invoicing_date' => 'date',
        'invoicing_plan_amount' => null,
        'transaction_currency' => null,
        'purchasing_organization' => null,
        'purchasing_group' => null,
        'purchase_order_type' => null,
        'plant' => null,
        'sap__messages' => null,
        '_purchase_order' => null,
        '_purchase_order_invoicing_plan' => null,
        '_purchase_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_item' => false,
		'invoicing_plan_item' => false,
		'invoicing_plan' => false,
		'invoicing_plan_settlement_from_dte' => true,
		'invoicing_plan_settlement_to_dte' => true,
		'invoicing_plan_invoicing_date' => true,
		'invoicing_plan_amount' => false,
		'transaction_currency' => false,
		'purchasing_organization' => false,
		'purchasing_group' => false,
		'purchase_order_type' => false,
		'plant' => false,
		'sap__messages' => false,
		'_purchase_order' => false,
		'_purchase_order_invoicing_plan' => false,
		'_purchase_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'invoicing_plan_item' => 'InvoicingPlanItem',
        'invoicing_plan' => 'InvoicingPlan',
        'invoicing_plan_settlement_from_dte' => 'InvoicingPlanSettlementFromDte',
        'invoicing_plan_settlement_to_dte' => 'InvoicingPlanSettlementToDte',
        'invoicing_plan_invoicing_date' => 'InvoicingPlanInvoicingDate',
        'invoicing_plan_amount' => 'InvoicingPlanAmount',
        'transaction_currency' => 'TransactionCurrency',
        'purchasing_organization' => 'PurchasingOrganization',
        'purchasing_group' => 'PurchasingGroup',
        'purchase_order_type' => 'PurchaseOrderType',
        'plant' => 'Plant',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order' => '_PurchaseOrder',
        '_purchase_order_invoicing_plan' => '_PurchaseOrderInvoicingPlan',
        '_purchase_order_item' => '_PurchaseOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'invoicing_plan_item' => 'setInvoicingPlanItem',
        'invoicing_plan' => 'setInvoicingPlan',
        'invoicing_plan_settlement_from_dte' => 'setInvoicingPlanSettlementFromDte',
        'invoicing_plan_settlement_to_dte' => 'setInvoicingPlanSettlementToDte',
        'invoicing_plan_invoicing_date' => 'setInvoicingPlanInvoicingDate',
        'invoicing_plan_amount' => 'setInvoicingPlanAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'purchasing_organization' => 'setPurchasingOrganization',
        'purchasing_group' => 'setPurchasingGroup',
        'purchase_order_type' => 'setPurchaseOrderType',
        'plant' => 'setPlant',
        'sap__messages' => 'setSapMessages',
        '_purchase_order' => '_setPurchaseOrder',
        '_purchase_order_invoicing_plan' => '_setPurchaseOrderInvoicingPlan',
        '_purchase_order_item' => '_setPurchaseOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'invoicing_plan_item' => 'getInvoicingPlanItem',
        'invoicing_plan' => 'getInvoicingPlan',
        'invoicing_plan_settlement_from_dte' => 'getInvoicingPlanSettlementFromDte',
        'invoicing_plan_settlement_to_dte' => 'getInvoicingPlanSettlementToDte',
        'invoicing_plan_invoicing_date' => 'getInvoicingPlanInvoicingDate',
        'invoicing_plan_amount' => 'getInvoicingPlanAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'purchasing_organization' => 'getPurchasingOrganization',
        'purchasing_group' => 'getPurchasingGroup',
        'purchase_order_type' => 'getPurchaseOrderType',
        'plant' => 'getPlant',
        'sap__messages' => 'getSapMessages',
        '_purchase_order' => '_getPurchaseOrder',
        '_purchase_order_invoicing_plan' => '_getPurchaseOrderInvoicingPlan',
        '_purchase_order_item' => '_getPurchaseOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('invoicing_plan_item', $data ?? [], null);
        $this->setIfExists('invoicing_plan', $data ?? [], null);
        $this->setIfExists('invoicing_plan_settlement_from_dte', $data ?? [], null);
        $this->setIfExists('invoicing_plan_settlement_to_dte', $data ?? [], null);
        $this->setIfExists('invoicing_plan_invoicing_date', $data ?? [], null);
        $this->setIfExists('invoicing_plan_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('purchasing_organization', $data ?? [], null);
        $this->setIfExists('purchasing_group', $data ?? [], null);
        $this->setIfExists('purchase_order_type', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order', $data ?? [], null);
        $this->setIfExists('_purchase_order_invoicing_plan', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['purchase_order_item'] === null) {
            $invalidProperties[] = "'purchase_order_item' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['invoicing_plan_item'] === null) {
            $invalidProperties[] = "'invoicing_plan_item' can't be null";
        }
        if ((mb_strlen($this->container['invoicing_plan_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'invoicing_plan_item', the character length must be smaller than or equal to 6.";
        }

        if ($this->container['invoicing_plan'] === null) {
            $invalidProperties[] = "'invoicing_plan' can't be null";
        }
        if ((mb_strlen($this->container['invoicing_plan']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoicing_plan', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchasing_organization']) && (mb_strlen($this->container['purchasing_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'purchasing_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchasing_group']) && (mb_strlen($this->container['purchasing_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchasing_group', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchase_order_type']) && (mb_strlen($this->container['purchase_order_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'purchase_order_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string $purchase_order Purchase Order Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string $purchase_order_item Item Number of Purchase Order
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item cannot be null');
        }
        if ((mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets invoicing_plan_item
     *
     * @return string
     */
    public function getInvoicingPlanItem()
    {
        return $this->container['invoicing_plan_item'];
    }

    /**
     * Sets invoicing_plan_item
     *
     * @param string $invoicing_plan_item Item for billing plan/invoice plan/payment cards
     *
     * @return self
     */
    public function setInvoicingPlanItem($invoicing_plan_item)
    {
        if (is_null($invoicing_plan_item)) {
            throw new \InvalidArgumentException('non-nullable invoicing_plan_item cannot be null');
        }
        if ((mb_strlen($invoicing_plan_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $invoicing_plan_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['invoicing_plan_item'] = $invoicing_plan_item;

        return $this;
    }

    /**
     * Gets invoicing_plan
     *
     * @return string
     */
    public function getInvoicingPlan()
    {
        return $this->container['invoicing_plan'];
    }

    /**
     * Sets invoicing_plan
     *
     * @param string $invoicing_plan Billing/Invoicing Plan Number
     *
     * @return self
     */
    public function setInvoicingPlan($invoicing_plan)
    {
        if (is_null($invoicing_plan)) {
            throw new \InvalidArgumentException('non-nullable invoicing_plan cannot be null');
        }
        if ((mb_strlen($invoicing_plan) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoicing_plan when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['invoicing_plan'] = $invoicing_plan;

        return $this;
    }

    /**
     * Gets invoicing_plan_settlement_from_dte
     *
     * @return \DateTime|null
     */
    public function getInvoicingPlanSettlementFromDte()
    {
        return $this->container['invoicing_plan_settlement_from_dte'];
    }

    /**
     * Sets invoicing_plan_settlement_from_dte
     *
     * @param \DateTime|null $invoicing_plan_settlement_from_dte Settlement Start Date of Billing/Invoicing Date
     *
     * @return self
     */
    public function setInvoicingPlanSettlementFromDte($invoicing_plan_settlement_from_dte)
    {
        if (is_null($invoicing_plan_settlement_from_dte)) {
            array_push($this->openAPINullablesSetToNull, 'invoicing_plan_settlement_from_dte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoicing_plan_settlement_from_dte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoicing_plan_settlement_from_dte'] = $invoicing_plan_settlement_from_dte;

        return $this;
    }

    /**
     * Gets invoicing_plan_settlement_to_dte
     *
     * @return \DateTime|null
     */
    public function getInvoicingPlanSettlementToDte()
    {
        return $this->container['invoicing_plan_settlement_to_dte'];
    }

    /**
     * Sets invoicing_plan_settlement_to_dte
     *
     * @param \DateTime|null $invoicing_plan_settlement_to_dte Settlement End Date of Billing/Invoicing Date
     *
     * @return self
     */
    public function setInvoicingPlanSettlementToDte($invoicing_plan_settlement_to_dte)
    {
        if (is_null($invoicing_plan_settlement_to_dte)) {
            array_push($this->openAPINullablesSetToNull, 'invoicing_plan_settlement_to_dte');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoicing_plan_settlement_to_dte', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoicing_plan_settlement_to_dte'] = $invoicing_plan_settlement_to_dte;

        return $this;
    }

    /**
     * Gets invoicing_plan_invoicing_date
     *
     * @return \DateTime|null
     */
    public function getInvoicingPlanInvoicingDate()
    {
        return $this->container['invoicing_plan_invoicing_date'];
    }

    /**
     * Sets invoicing_plan_invoicing_date
     *
     * @param \DateTime|null $invoicing_plan_invoicing_date invoicing_plan_invoicing_date
     *
     * @return self
     */
    public function setInvoicingPlanInvoicingDate($invoicing_plan_invoicing_date)
    {
        if (is_null($invoicing_plan_invoicing_date)) {
            array_push($this->openAPINullablesSetToNull, 'invoicing_plan_invoicing_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoicing_plan_invoicing_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoicing_plan_invoicing_date'] = $invoicing_plan_invoicing_date;

        return $this;
    }

    /**
     * Gets invoicing_plan_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\BillingValue|null
     */
    public function getInvoicingPlanAmount()
    {
        return $this->container['invoicing_plan_amount'];
    }

    /**
     * Sets invoicing_plan_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\BillingValue|null $invoicing_plan_amount invoicing_plan_amount
     *
     * @return self
     */
    public function setInvoicingPlanAmount($invoicing_plan_amount)
    {
        if (is_null($invoicing_plan_amount)) {
            throw new \InvalidArgumentException('non-nullable invoicing_plan_amount cannot be null');
        }
        $this->container['invoicing_plan_amount'] = $invoicing_plan_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency Currency Key
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            throw new \InvalidArgumentException('non-nullable transaction_currency cannot be null');
        }
        if ((mb_strlen($transaction_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets purchasing_organization
     *
     * @return string|null
     */
    public function getPurchasingOrganization()
    {
        return $this->container['purchasing_organization'];
    }

    /**
     * Sets purchasing_organization
     *
     * @param string|null $purchasing_organization Purchasing Organization
     *
     * @return self
     */
    public function setPurchasingOrganization($purchasing_organization)
    {
        if (is_null($purchasing_organization)) {
            throw new \InvalidArgumentException('non-nullable purchasing_organization cannot be null');
        }
        if ((mb_strlen($purchasing_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_organization when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['purchasing_organization'] = $purchasing_organization;

        return $this;
    }

    /**
     * Gets purchasing_group
     *
     * @return string|null
     */
    public function getPurchasingGroup()
    {
        return $this->container['purchasing_group'];
    }

    /**
     * Sets purchasing_group
     *
     * @param string|null $purchasing_group purchasing_group
     *
     * @return self
     */
    public function setPurchasingGroup($purchasing_group)
    {
        if (is_null($purchasing_group)) {
            throw new \InvalidArgumentException('non-nullable purchasing_group cannot be null');
        }
        if ((mb_strlen($purchasing_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_group when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['purchasing_group'] = $purchasing_group;

        return $this;
    }

    /**
     * Gets purchase_order_type
     *
     * @return string|null
     */
    public function getPurchaseOrderType()
    {
        return $this->container['purchase_order_type'];
    }

    /**
     * Sets purchase_order_type
     *
     * @param string|null $purchase_order_type Purchasing Document Type
     *
     * @return self
     */
    public function setPurchaseOrderType($purchase_order_type)
    {
        if (is_null($purchase_order_type)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_type cannot be null');
        }
        if ((mb_strlen($purchase_order_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['purchase_order_type'] = $purchase_order_type;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            throw new \InvalidArgumentException('non-nullable plant cannot be null');
        }
        if ((mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POInvoicingPlanItemTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null
     */
    public function _getPurchaseOrder()
    {
    return $this->container['_purchase_order'];
    }

    /**
     * Sets _purchase_order
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null $_purchase_order _purchase_order
     *
     * @return self
     */
    public function _setPurchaseOrder($_purchase_order)
    {
        if (is_null($_purchase_order)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order cannot be null');
        }
        $this->container['_purchase_order'] = $_purchase_order;

        return $this;
    }

    /**
     * Gets _purchase_order_invoicing_plan
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate|null
     */
    public function _getPurchaseOrderInvoicingPlan()
    {
    return $this->container['_purchase_order_invoicing_plan'];
    }

    /**
     * Sets _purchase_order_invoicing_plan
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderInvoicingPlanTypeCreate|null $_purchase_order_invoicing_plan _purchase_order_invoicing_plan
     *
     * @return self
     */
    public function _setPurchaseOrderInvoicingPlan($_purchase_order_invoicing_plan)
    {
        if (is_null($_purchase_order_invoicing_plan)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_invoicing_plan cannot be null');
        }
        $this->container['_purchase_order_invoicing_plan'] = $_purchase_order_invoicing_plan;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null
     */
    public function _getPurchaseOrderItem()
    {
    return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function _setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


