<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurchaseOrderItemNote_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'text_object_type' => 'string',
        'language' => 'string',
        'plain_long_text' => 'string',
        'purchase_order_item_unique_id' => 'string',
        '_purchase_order' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_item' => null,
        'text_object_type' => null,
        'language' => null,
        'plain_long_text' => null,
        'purchase_order_item_unique_id' => null,
        '_purchase_order' => null,
        '_purchase_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_item' => false,
		'text_object_type' => false,
		'language' => false,
		'plain_long_text' => false,
		'purchase_order_item_unique_id' => false,
		'_purchase_order' => false,
		'_purchase_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'text_object_type' => 'TextObjectType',
        'language' => 'Language',
        'plain_long_text' => 'PlainLongText',
        'purchase_order_item_unique_id' => 'PurchaseOrderItemUniqueID',
        '_purchase_order' => '_PurchaseOrder',
        '_purchase_order_item' => '_PurchaseOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'text_object_type' => 'setTextObjectType',
        'language' => 'setLanguage',
        'plain_long_text' => 'setPlainLongText',
        'purchase_order_item_unique_id' => 'setPurchaseOrderItemUniqueId',
        '_purchase_order' => '_setPurchaseOrder',
        '_purchase_order_item' => '_setPurchaseOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'text_object_type' => 'getTextObjectType',
        'language' => 'getLanguage',
        'plain_long_text' => 'getPlainLongText',
        'purchase_order_item_unique_id' => 'getPurchaseOrderItemUniqueId',
        '_purchase_order' => '_getPurchaseOrder',
        '_purchase_order_item' => '_getPurchaseOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('text_object_type', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('plain_long_text', $data ?? [], null);
        $this->setIfExists('purchase_order_item_unique_id', $data ?? [], null);
        $this->setIfExists('_purchase_order', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['purchase_order_item'] === null) {
            $invalidProperties[] = "'purchase_order_item' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['text_object_type'] === null) {
            $invalidProperties[] = "'text_object_type' can't be null";
        }
        if ((mb_strlen($this->container['text_object_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'text_object_type', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['language'] === null) {
            $invalidProperties[] = "'language' can't be null";
        }
        if ((mb_strlen($this->container['language']) > 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['purchase_order_item_unique_id']) && (mb_strlen($this->container['purchase_order_item_unique_id']) > 15)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item_unique_id', the character length must be smaller than or equal to 15.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string $purchase_order Purchase Order Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string $purchase_order_item Item Number of Purchase Order
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item cannot be null');
        }
        if ((mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets text_object_type
     *
     * @return string
     */
    public function getTextObjectType()
    {
        return $this->container['text_object_type'];
    }

    /**
     * Sets text_object_type
     *
     * @param string $text_object_type text_object_type
     *
     * @return self
     */
    public function setTextObjectType($text_object_type)
    {
        if (is_null($text_object_type)) {
            throw new \InvalidArgumentException('non-nullable text_object_type cannot be null');
        }
        if ((mb_strlen($text_object_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $text_object_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['text_object_type'] = $text_object_type;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        if ((mb_strlen($language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets plain_long_text
     *
     * @return string|null
     */
    public function getPlainLongText()
    {
        return $this->container['plain_long_text'];
    }

    /**
     * Sets plain_long_text
     *
     * @param string|null $plain_long_text plain_long_text
     *
     * @return self
     */
    public function setPlainLongText($plain_long_text)
    {
        if (is_null($plain_long_text)) {
            throw new \InvalidArgumentException('non-nullable plain_long_text cannot be null');
        }
        $this->container['plain_long_text'] = $plain_long_text;

        return $this;
    }

    /**
     * Gets purchase_order_item_unique_id
     *
     * @return string|null
     */
    public function getPurchaseOrderItemUniqueId()
    {
        return $this->container['purchase_order_item_unique_id'];
    }

    /**
     * Sets purchase_order_item_unique_id
     *
     * @param string|null $purchase_order_item_unique_id Concatenation of EBELN and EBELP
     *
     * @return self
     */
    public function setPurchaseOrderItemUniqueId($purchase_order_item_unique_id)
    {
        if (is_null($purchase_order_item_unique_id)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item_unique_id cannot be null');
        }
        if ((mb_strlen($purchase_order_item_unique_id) > 15)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item_unique_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemNoteTypeCreate., must be smaller than or equal to 15.');
        }

        $this->container['purchase_order_item_unique_id'] = $purchase_order_item_unique_id;

        return $this;
    }

    /**
     * Gets _purchase_order
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null
     */
    public function _getPurchaseOrder()
    {
    return $this->container['_purchase_order'];
    }

    /**
     * Sets _purchase_order
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null $_purchase_order _purchase_order
     *
     * @return self
     */
    public function _setPurchaseOrder($_purchase_order)
    {
        if (is_null($_purchase_order)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order cannot be null');
        }
        $this->container['_purchase_order'] = $_purchase_order;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null
     */
    public function _getPurchaseOrderItem()
    {
    return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function _setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


