<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurOrderItemPricingElement_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'pricing_document' => 'string',
        'pricing_document_item' => 'string',
        'pricing_procedure_step' => 'string',
        'pricing_procedure_counter' => 'string',
        'condition_type' => 'string',
        'condition_base_amount' => '\BeLenka\SAP\PurchaseOrder\Model\CndnBsAmt',
        'condition_rate_amount' => '\BeLenka\SAP\PurchaseOrder\Model\ConditionAmount',
        'condition_rate_ratio' => '\BeLenka\SAP\PurchaseOrder\Model\Ratio',
        'condition_rate_ratio_unit' => 'string',
        'condition_currency' => 'string',
        'condition_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\PricingUnit',
        'condition_quantity_unit' => 'string',
        'condition_to_base_qty_nmrtr' => '\BeLenka\SAP\PurchaseOrder\Model\Numerator1',
        'condition_to_base_qty_dnmntr' => '\BeLenka\SAP\PurchaseOrder\Model\Denominator1',
        'account_key_for_gl_account' => 'string',
        'gl_account' => 'string',
        'tax_code' => 'string',
        'acct_key_for_accruals_gl_account' => 'string',
        'accruals_gl_account' => 'string',
        'withholding_tax_code' => 'string',
        'freight_supplier' => 'string',
        'cndn_rounding_off_diff_amount' => '\BeLenka\SAP\PurchaseOrder\Model\CondRoundingDiff',
        'transaction_currency' => 'string',
        'prcg_procedure_counter_for_header' => 'string',
        'structure_condition' => 'string',
        'period_factor_for_cndn_basis_value' => '\BeLenka\SAP\PurchaseOrder\Model\ConditionFactor1',
        'condition_alternative_currency' => 'string',
        'condition_amount_in_local_crcy' => '\BeLenka\SAP\PurchaseOrder\Model\ConditionValue',
        'billing_price_source' => 'string',
        'tax_jurisdiction_level' => 'string',
        'condition_byte_sequence' => 'string',
        'condition_basis_limit_exceeded' => 'string',
        'condition_amount_limit_exceeded' => 'string',
        'cumulated_condition_basis_value' => '\BeLenka\SAP\PurchaseOrder\Model\ConditionBasis',
        'customer_rebate_recipient' => 'string',
        'variant_condition' => 'string',
        'condition_acct_assgmt_relevance' => 'string',
        'condition_matrix_maint_relevance' => 'string',
        'configbl_parameters_and_formulas' => 'string',
        'condition_adjusted_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\AdjustedQty',
        'condition_type_name' => 'string',
        'tax_code_name' => 'string',
        'condition_is_deletable' => 'bool',
        'pricing_procedure' => 'string',
        'superordinate_document' => 'string',
        'superordinate_document_item' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]',
        '_purchase_order' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_item' => null,
        'pricing_document' => null,
        'pricing_document_item' => null,
        'pricing_procedure_step' => null,
        'pricing_procedure_counter' => null,
        'condition_type' => null,
        'condition_base_amount' => null,
        'condition_rate_amount' => null,
        'condition_rate_ratio' => null,
        'condition_rate_ratio_unit' => null,
        'condition_currency' => null,
        'condition_quantity' => null,
        'condition_quantity_unit' => null,
        'condition_to_base_qty_nmrtr' => null,
        'condition_to_base_qty_dnmntr' => null,
        'account_key_for_gl_account' => null,
        'gl_account' => null,
        'tax_code' => null,
        'acct_key_for_accruals_gl_account' => null,
        'accruals_gl_account' => null,
        'withholding_tax_code' => null,
        'freight_supplier' => null,
        'cndn_rounding_off_diff_amount' => null,
        'transaction_currency' => null,
        'prcg_procedure_counter_for_header' => null,
        'structure_condition' => null,
        'period_factor_for_cndn_basis_value' => null,
        'condition_alternative_currency' => null,
        'condition_amount_in_local_crcy' => null,
        'billing_price_source' => null,
        'tax_jurisdiction_level' => null,
        'condition_byte_sequence' => 'base64url',
        'condition_basis_limit_exceeded' => null,
        'condition_amount_limit_exceeded' => null,
        'cumulated_condition_basis_value' => null,
        'customer_rebate_recipient' => null,
        'variant_condition' => null,
        'condition_acct_assgmt_relevance' => null,
        'condition_matrix_maint_relevance' => null,
        'configbl_parameters_and_formulas' => 'uuid',
        'condition_adjusted_quantity' => null,
        'condition_type_name' => null,
        'tax_code_name' => null,
        'condition_is_deletable' => null,
        'pricing_procedure' => null,
        'superordinate_document' => null,
        'superordinate_document_item' => null,
        'sap__messages' => null,
        '_purchase_order' => null,
        '_purchase_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_item' => false,
		'pricing_document' => false,
		'pricing_document_item' => false,
		'pricing_procedure_step' => false,
		'pricing_procedure_counter' => false,
		'condition_type' => false,
		'condition_base_amount' => false,
		'condition_rate_amount' => false,
		'condition_rate_ratio' => false,
		'condition_rate_ratio_unit' => false,
		'condition_currency' => false,
		'condition_quantity' => false,
		'condition_quantity_unit' => false,
		'condition_to_base_qty_nmrtr' => false,
		'condition_to_base_qty_dnmntr' => false,
		'account_key_for_gl_account' => false,
		'gl_account' => false,
		'tax_code' => false,
		'acct_key_for_accruals_gl_account' => false,
		'accruals_gl_account' => false,
		'withholding_tax_code' => false,
		'freight_supplier' => false,
		'cndn_rounding_off_diff_amount' => false,
		'transaction_currency' => false,
		'prcg_procedure_counter_for_header' => false,
		'structure_condition' => false,
		'period_factor_for_cndn_basis_value' => false,
		'condition_alternative_currency' => false,
		'condition_amount_in_local_crcy' => false,
		'billing_price_source' => false,
		'tax_jurisdiction_level' => false,
		'condition_byte_sequence' => false,
		'condition_basis_limit_exceeded' => false,
		'condition_amount_limit_exceeded' => false,
		'cumulated_condition_basis_value' => false,
		'customer_rebate_recipient' => false,
		'variant_condition' => false,
		'condition_acct_assgmt_relevance' => false,
		'condition_matrix_maint_relevance' => false,
		'configbl_parameters_and_formulas' => true,
		'condition_adjusted_quantity' => false,
		'condition_type_name' => false,
		'tax_code_name' => false,
		'condition_is_deletable' => false,
		'pricing_procedure' => false,
		'superordinate_document' => false,
		'superordinate_document_item' => false,
		'sap__messages' => false,
		'_purchase_order' => false,
		'_purchase_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'pricing_document' => 'PricingDocument',
        'pricing_document_item' => 'PricingDocumentItem',
        'pricing_procedure_step' => 'PricingProcedureStep',
        'pricing_procedure_counter' => 'PricingProcedureCounter',
        'condition_type' => 'ConditionType',
        'condition_base_amount' => 'ConditionBaseAmount',
        'condition_rate_amount' => 'ConditionRateAmount',
        'condition_rate_ratio' => 'ConditionRateRatio',
        'condition_rate_ratio_unit' => 'ConditionRateRatioUnit',
        'condition_currency' => 'ConditionCurrency',
        'condition_quantity' => 'ConditionQuantity',
        'condition_quantity_unit' => 'ConditionQuantityUnit',
        'condition_to_base_qty_nmrtr' => 'ConditionToBaseQtyNmrtr',
        'condition_to_base_qty_dnmntr' => 'ConditionToBaseQtyDnmntr',
        'account_key_for_gl_account' => 'AccountKeyForGLAccount',
        'gl_account' => 'GLAccount',
        'tax_code' => 'TaxCode',
        'acct_key_for_accruals_gl_account' => 'AcctKeyForAccrualsGLAccount',
        'accruals_gl_account' => 'AccrualsGLAccount',
        'withholding_tax_code' => 'WithholdingTaxCode',
        'freight_supplier' => 'FreightSupplier',
        'cndn_rounding_off_diff_amount' => 'CndnRoundingOffDiffAmount',
        'transaction_currency' => 'TransactionCurrency',
        'prcg_procedure_counter_for_header' => 'PrcgProcedureCounterForHeader',
        'structure_condition' => 'StructureCondition',
        'period_factor_for_cndn_basis_value' => 'PeriodFactorForCndnBasisValue',
        'condition_alternative_currency' => 'ConditionAlternativeCurrency',
        'condition_amount_in_local_crcy' => 'ConditionAmountInLocalCrcy',
        'billing_price_source' => 'BillingPriceSource',
        'tax_jurisdiction_level' => 'TaxJurisdictionLevel',
        'condition_byte_sequence' => 'ConditionByteSequence',
        'condition_basis_limit_exceeded' => 'ConditionBasisLimitExceeded',
        'condition_amount_limit_exceeded' => 'ConditionAmountLimitExceeded',
        'cumulated_condition_basis_value' => 'CumulatedConditionBasisValue',
        'customer_rebate_recipient' => 'CustomerRebateRecipient',
        'variant_condition' => 'VariantCondition',
        'condition_acct_assgmt_relevance' => 'ConditionAcctAssgmtRelevance',
        'condition_matrix_maint_relevance' => 'ConditionMatrixMaintRelevance',
        'configbl_parameters_and_formulas' => 'ConfigblParametersAndFormulas',
        'condition_adjusted_quantity' => 'ConditionAdjustedQuantity',
        'condition_type_name' => 'ConditionTypeName',
        'tax_code_name' => 'TaxCodeName',
        'condition_is_deletable' => 'ConditionIsDeletable',
        'pricing_procedure' => 'PricingProcedure',
        'superordinate_document' => 'SuperordinateDocument',
        'superordinate_document_item' => 'SuperordinateDocumentItem',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order' => '_PurchaseOrder',
        '_purchase_order_item' => '_PurchaseOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'pricing_document' => 'setPricingDocument',
        'pricing_document_item' => 'setPricingDocumentItem',
        'pricing_procedure_step' => 'setPricingProcedureStep',
        'pricing_procedure_counter' => 'setPricingProcedureCounter',
        'condition_type' => 'setConditionType',
        'condition_base_amount' => 'setConditionBaseAmount',
        'condition_rate_amount' => 'setConditionRateAmount',
        'condition_rate_ratio' => 'setConditionRateRatio',
        'condition_rate_ratio_unit' => 'setConditionRateRatioUnit',
        'condition_currency' => 'setConditionCurrency',
        'condition_quantity' => 'setConditionQuantity',
        'condition_quantity_unit' => 'setConditionQuantityUnit',
        'condition_to_base_qty_nmrtr' => 'setConditionToBaseQtyNmrtr',
        'condition_to_base_qty_dnmntr' => 'setConditionToBaseQtyDnmntr',
        'account_key_for_gl_account' => 'setAccountKeyForGlAccount',
        'gl_account' => 'setGlAccount',
        'tax_code' => 'setTaxCode',
        'acct_key_for_accruals_gl_account' => 'setAcctKeyForAccrualsGlAccount',
        'accruals_gl_account' => 'setAccrualsGlAccount',
        'withholding_tax_code' => 'setWithholdingTaxCode',
        'freight_supplier' => 'setFreightSupplier',
        'cndn_rounding_off_diff_amount' => 'setCndnRoundingOffDiffAmount',
        'transaction_currency' => 'setTransactionCurrency',
        'prcg_procedure_counter_for_header' => 'setPrcgProcedureCounterForHeader',
        'structure_condition' => 'setStructureCondition',
        'period_factor_for_cndn_basis_value' => 'setPeriodFactorForCndnBasisValue',
        'condition_alternative_currency' => 'setConditionAlternativeCurrency',
        'condition_amount_in_local_crcy' => 'setConditionAmountInLocalCrcy',
        'billing_price_source' => 'setBillingPriceSource',
        'tax_jurisdiction_level' => 'setTaxJurisdictionLevel',
        'condition_byte_sequence' => 'setConditionByteSequence',
        'condition_basis_limit_exceeded' => 'setConditionBasisLimitExceeded',
        'condition_amount_limit_exceeded' => 'setConditionAmountLimitExceeded',
        'cumulated_condition_basis_value' => 'setCumulatedConditionBasisValue',
        'customer_rebate_recipient' => 'setCustomerRebateRecipient',
        'variant_condition' => 'setVariantCondition',
        'condition_acct_assgmt_relevance' => 'setConditionAcctAssgmtRelevance',
        'condition_matrix_maint_relevance' => 'setConditionMatrixMaintRelevance',
        'configbl_parameters_and_formulas' => 'setConfigblParametersAndFormulas',
        'condition_adjusted_quantity' => 'setConditionAdjustedQuantity',
        'condition_type_name' => 'setConditionTypeName',
        'tax_code_name' => 'setTaxCodeName',
        'condition_is_deletable' => 'setConditionIsDeletable',
        'pricing_procedure' => 'setPricingProcedure',
        'superordinate_document' => 'setSuperordinateDocument',
        'superordinate_document_item' => 'setSuperordinateDocumentItem',
        'sap__messages' => 'setSapMessages',
        '_purchase_order' => '_setPurchaseOrder',
        '_purchase_order_item' => '_setPurchaseOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'pricing_document' => 'getPricingDocument',
        'pricing_document_item' => 'getPricingDocumentItem',
        'pricing_procedure_step' => 'getPricingProcedureStep',
        'pricing_procedure_counter' => 'getPricingProcedureCounter',
        'condition_type' => 'getConditionType',
        'condition_base_amount' => 'getConditionBaseAmount',
        'condition_rate_amount' => 'getConditionRateAmount',
        'condition_rate_ratio' => 'getConditionRateRatio',
        'condition_rate_ratio_unit' => 'getConditionRateRatioUnit',
        'condition_currency' => 'getConditionCurrency',
        'condition_quantity' => 'getConditionQuantity',
        'condition_quantity_unit' => 'getConditionQuantityUnit',
        'condition_to_base_qty_nmrtr' => 'getConditionToBaseQtyNmrtr',
        'condition_to_base_qty_dnmntr' => 'getConditionToBaseQtyDnmntr',
        'account_key_for_gl_account' => 'getAccountKeyForGlAccount',
        'gl_account' => 'getGlAccount',
        'tax_code' => 'getTaxCode',
        'acct_key_for_accruals_gl_account' => 'getAcctKeyForAccrualsGlAccount',
        'accruals_gl_account' => 'getAccrualsGlAccount',
        'withholding_tax_code' => 'getWithholdingTaxCode',
        'freight_supplier' => 'getFreightSupplier',
        'cndn_rounding_off_diff_amount' => 'getCndnRoundingOffDiffAmount',
        'transaction_currency' => 'getTransactionCurrency',
        'prcg_procedure_counter_for_header' => 'getPrcgProcedureCounterForHeader',
        'structure_condition' => 'getStructureCondition',
        'period_factor_for_cndn_basis_value' => 'getPeriodFactorForCndnBasisValue',
        'condition_alternative_currency' => 'getConditionAlternativeCurrency',
        'condition_amount_in_local_crcy' => 'getConditionAmountInLocalCrcy',
        'billing_price_source' => 'getBillingPriceSource',
        'tax_jurisdiction_level' => 'getTaxJurisdictionLevel',
        'condition_byte_sequence' => 'getConditionByteSequence',
        'condition_basis_limit_exceeded' => 'getConditionBasisLimitExceeded',
        'condition_amount_limit_exceeded' => 'getConditionAmountLimitExceeded',
        'cumulated_condition_basis_value' => 'getCumulatedConditionBasisValue',
        'customer_rebate_recipient' => 'getCustomerRebateRecipient',
        'variant_condition' => 'getVariantCondition',
        'condition_acct_assgmt_relevance' => 'getConditionAcctAssgmtRelevance',
        'condition_matrix_maint_relevance' => 'getConditionMatrixMaintRelevance',
        'configbl_parameters_and_formulas' => 'getConfigblParametersAndFormulas',
        'condition_adjusted_quantity' => 'getConditionAdjustedQuantity',
        'condition_type_name' => 'getConditionTypeName',
        'tax_code_name' => 'getTaxCodeName',
        'condition_is_deletable' => 'getConditionIsDeletable',
        'pricing_procedure' => 'getPricingProcedure',
        'superordinate_document' => 'getSuperordinateDocument',
        'superordinate_document_item' => 'getSuperordinateDocumentItem',
        'sap__messages' => 'getSapMessages',
        '_purchase_order' => '_getPurchaseOrder',
        '_purchase_order_item' => '_getPurchaseOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('pricing_document', $data ?? [], null);
        $this->setIfExists('pricing_document_item', $data ?? [], null);
        $this->setIfExists('pricing_procedure_step', $data ?? [], null);
        $this->setIfExists('pricing_procedure_counter', $data ?? [], null);
        $this->setIfExists('condition_type', $data ?? [], null);
        $this->setIfExists('condition_base_amount', $data ?? [], null);
        $this->setIfExists('condition_rate_amount', $data ?? [], null);
        $this->setIfExists('condition_rate_ratio', $data ?? [], null);
        $this->setIfExists('condition_rate_ratio_unit', $data ?? [], null);
        $this->setIfExists('condition_currency', $data ?? [], null);
        $this->setIfExists('condition_quantity', $data ?? [], null);
        $this->setIfExists('condition_quantity_unit', $data ?? [], null);
        $this->setIfExists('condition_to_base_qty_nmrtr', $data ?? [], null);
        $this->setIfExists('condition_to_base_qty_dnmntr', $data ?? [], null);
        $this->setIfExists('account_key_for_gl_account', $data ?? [], null);
        $this->setIfExists('gl_account', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('acct_key_for_accruals_gl_account', $data ?? [], null);
        $this->setIfExists('accruals_gl_account', $data ?? [], null);
        $this->setIfExists('withholding_tax_code', $data ?? [], null);
        $this->setIfExists('freight_supplier', $data ?? [], null);
        $this->setIfExists('cndn_rounding_off_diff_amount', $data ?? [], null);
        $this->setIfExists('transaction_currency', $data ?? [], null);
        $this->setIfExists('prcg_procedure_counter_for_header', $data ?? [], null);
        $this->setIfExists('structure_condition', $data ?? [], null);
        $this->setIfExists('period_factor_for_cndn_basis_value', $data ?? [], null);
        $this->setIfExists('condition_alternative_currency', $data ?? [], null);
        $this->setIfExists('condition_amount_in_local_crcy', $data ?? [], null);
        $this->setIfExists('billing_price_source', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction_level', $data ?? [], null);
        $this->setIfExists('condition_byte_sequence', $data ?? [], null);
        $this->setIfExists('condition_basis_limit_exceeded', $data ?? [], null);
        $this->setIfExists('condition_amount_limit_exceeded', $data ?? [], null);
        $this->setIfExists('cumulated_condition_basis_value', $data ?? [], null);
        $this->setIfExists('customer_rebate_recipient', $data ?? [], null);
        $this->setIfExists('variant_condition', $data ?? [], null);
        $this->setIfExists('condition_acct_assgmt_relevance', $data ?? [], null);
        $this->setIfExists('condition_matrix_maint_relevance', $data ?? [], null);
        $this->setIfExists('configbl_parameters_and_formulas', $data ?? [], null);
        $this->setIfExists('condition_adjusted_quantity', $data ?? [], null);
        $this->setIfExists('condition_type_name', $data ?? [], null);
        $this->setIfExists('tax_code_name', $data ?? [], null);
        $this->setIfExists('condition_is_deletable', $data ?? [], null);
        $this->setIfExists('pricing_procedure', $data ?? [], null);
        $this->setIfExists('superordinate_document', $data ?? [], null);
        $this->setIfExists('superordinate_document_item', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['purchase_order_item'] === null) {
            $invalidProperties[] = "'purchase_order_item' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if ($this->container['pricing_document'] === null) {
            $invalidProperties[] = "'pricing_document' can't be null";
        }
        if ((mb_strlen($this->container['pricing_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'pricing_document', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['pricing_document_item'] === null) {
            $invalidProperties[] = "'pricing_document_item' can't be null";
        }
        if ((mb_strlen($this->container['pricing_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'pricing_document_item', the character length must be smaller than or equal to 6.";
        }

        if ($this->container['pricing_procedure_step'] === null) {
            $invalidProperties[] = "'pricing_procedure_step' can't be null";
        }
        if ((mb_strlen($this->container['pricing_procedure_step']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure_step', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['pricing_procedure_counter'] === null) {
            $invalidProperties[] = "'pricing_procedure_counter' can't be null";
        }
        if ((mb_strlen($this->container['pricing_procedure_counter']) > 3)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure_counter', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_type']) && (mb_strlen($this->container['condition_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'condition_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['condition_rate_ratio_unit']) && (mb_strlen($this->container['condition_rate_ratio_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_rate_ratio_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_currency']) && (mb_strlen($this->container['condition_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_quantity_unit']) && (mb_strlen($this->container['condition_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['account_key_for_gl_account']) && (mb_strlen($this->container['account_key_for_gl_account']) > 3)) {
            $invalidProperties[] = "invalid value for 'account_key_for_gl_account', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['gl_account']) && (mb_strlen($this->container['gl_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'gl_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['acct_key_for_accruals_gl_account']) && (mb_strlen($this->container['acct_key_for_accruals_gl_account']) > 3)) {
            $invalidProperties[] = "invalid value for 'acct_key_for_accruals_gl_account', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['accruals_gl_account']) && (mb_strlen($this->container['accruals_gl_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'accruals_gl_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['withholding_tax_code']) && (mb_strlen($this->container['withholding_tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'withholding_tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['freight_supplier']) && (mb_strlen($this->container['freight_supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'freight_supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['transaction_currency']) && (mb_strlen($this->container['transaction_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'transaction_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['prcg_procedure_counter_for_header']) && (mb_strlen($this->container['prcg_procedure_counter_for_header']) > 3)) {
            $invalidProperties[] = "invalid value for 'prcg_procedure_counter_for_header', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['structure_condition']) && (mb_strlen($this->container['structure_condition']) > 1)) {
            $invalidProperties[] = "invalid value for 'structure_condition', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_alternative_currency']) && (mb_strlen($this->container['condition_alternative_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_alternative_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['billing_price_source']) && (mb_strlen($this->container['billing_price_source']) > 1)) {
            $invalidProperties[] = "invalid value for 'billing_price_source', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['tax_jurisdiction_level']) && (mb_strlen($this->container['tax_jurisdiction_level']) > 1)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction_level', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_byte_sequence']) && (mb_strlen($this->container['condition_byte_sequence']) > 3)) {
            $invalidProperties[] = "invalid value for 'condition_byte_sequence', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['condition_basis_limit_exceeded']) && (mb_strlen($this->container['condition_basis_limit_exceeded']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_basis_limit_exceeded', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_amount_limit_exceeded']) && (mb_strlen($this->container['condition_amount_limit_exceeded']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_amount_limit_exceeded', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['customer_rebate_recipient']) && (mb_strlen($this->container['customer_rebate_recipient']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer_rebate_recipient', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['variant_condition']) && (mb_strlen($this->container['variant_condition']) > 26)) {
            $invalidProperties[] = "invalid value for 'variant_condition', the character length must be smaller than or equal to 26.";
        }

        if (!is_null($this->container['condition_acct_assgmt_relevance']) && (mb_strlen($this->container['condition_acct_assgmt_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_acct_assgmt_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_matrix_maint_relevance']) && (mb_strlen($this->container['condition_matrix_maint_relevance']) > 1)) {
            $invalidProperties[] = "invalid value for 'condition_matrix_maint_relevance', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['condition_type_name']) && (mb_strlen($this->container['condition_type_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'condition_type_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['tax_code_name']) && (mb_strlen($this->container['tax_code_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'tax_code_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pricing_procedure']) && (mb_strlen($this->container['pricing_procedure']) > 6)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['superordinate_document']) && (mb_strlen($this->container['superordinate_document']) > 32)) {
            $invalidProperties[] = "invalid value for 'superordinate_document', the character length must be smaller than or equal to 32.";
        }

        if (!is_null($this->container['superordinate_document_item']) && (mb_strlen($this->container['superordinate_document_item']) > 70)) {
            $invalidProperties[] = "invalid value for 'superordinate_document_item', the character length must be smaller than or equal to 70.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string $purchase_order Purchasing Document Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string $purchase_order_item Item Number of Purchasing Document
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item cannot be null');
        }
        if ((mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets pricing_document
     *
     * @return string
     */
    public function getPricingDocument()
    {
        return $this->container['pricing_document'];
    }

    /**
     * Sets pricing_document
     *
     * @param string $pricing_document Number of the Document Condition
     *
     * @return self
     */
    public function setPricingDocument($pricing_document)
    {
        if (is_null($pricing_document)) {
            throw new \InvalidArgumentException('non-nullable pricing_document cannot be null');
        }
        if ((mb_strlen($pricing_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $pricing_document when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['pricing_document'] = $pricing_document;

        return $this;
    }

    /**
     * Gets pricing_document_item
     *
     * @return string
     */
    public function getPricingDocumentItem()
    {
        return $this->container['pricing_document_item'];
    }

    /**
     * Sets pricing_document_item
     *
     * @param string $pricing_document_item Condition item number
     *
     * @return self
     */
    public function setPricingDocumentItem($pricing_document_item)
    {
        if (is_null($pricing_document_item)) {
            throw new \InvalidArgumentException('non-nullable pricing_document_item cannot be null');
        }
        if ((mb_strlen($pricing_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $pricing_document_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['pricing_document_item'] = $pricing_document_item;

        return $this;
    }

    /**
     * Gets pricing_procedure_step
     *
     * @return string
     */
    public function getPricingProcedureStep()
    {
        return $this->container['pricing_procedure_step'];
    }

    /**
     * Sets pricing_procedure_step
     *
     * @param string $pricing_procedure_step pricing_procedure_step
     *
     * @return self
     */
    public function setPricingProcedureStep($pricing_procedure_step)
    {
        if (is_null($pricing_procedure_step)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure_step cannot be null');
        }
        if ((mb_strlen($pricing_procedure_step) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure_step when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['pricing_procedure_step'] = $pricing_procedure_step;

        return $this;
    }

    /**
     * Gets pricing_procedure_counter
     *
     * @return string
     */
    public function getPricingProcedureCounter()
    {
        return $this->container['pricing_procedure_counter'];
    }

    /**
     * Sets pricing_procedure_counter
     *
     * @param string $pricing_procedure_counter Condition Counter
     *
     * @return self
     */
    public function setPricingProcedureCounter($pricing_procedure_counter)
    {
        if (is_null($pricing_procedure_counter)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure_counter cannot be null');
        }
        if ((mb_strlen($pricing_procedure_counter) > 3)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure_counter when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['pricing_procedure_counter'] = $pricing_procedure_counter;

        return $this;
    }

    /**
     * Gets condition_type
     *
     * @return string|null
     */
    public function getConditionType()
    {
        return $this->container['condition_type'];
    }

    /**
     * Sets condition_type
     *
     * @param string|null $condition_type condition_type
     *
     * @return self
     */
    public function setConditionType($condition_type)
    {
        if (is_null($condition_type)) {
            throw new \InvalidArgumentException('non-nullable condition_type cannot be null');
        }
        if ((mb_strlen($condition_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $condition_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['condition_type'] = $condition_type;

        return $this;
    }

    /**
     * Gets condition_base_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\CndnBsAmt|null
     */
    public function getConditionBaseAmount()
    {
        return $this->container['condition_base_amount'];
    }

    /**
     * Sets condition_base_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\CndnBsAmt|null $condition_base_amount condition_base_amount
     *
     * @return self
     */
    public function setConditionBaseAmount($condition_base_amount)
    {
        if (is_null($condition_base_amount)) {
            throw new \InvalidArgumentException('non-nullable condition_base_amount cannot be null');
        }
        $this->container['condition_base_amount'] = $condition_base_amount;

        return $this;
    }

    /**
     * Gets condition_rate_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ConditionAmount|null
     */
    public function getConditionRateAmount()
    {
        return $this->container['condition_rate_amount'];
    }

    /**
     * Sets condition_rate_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ConditionAmount|null $condition_rate_amount condition_rate_amount
     *
     * @return self
     */
    public function setConditionRateAmount($condition_rate_amount)
    {
        if (is_null($condition_rate_amount)) {
            throw new \InvalidArgumentException('non-nullable condition_rate_amount cannot be null');
        }
        $this->container['condition_rate_amount'] = $condition_rate_amount;

        return $this;
    }

    /**
     * Gets condition_rate_ratio
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Ratio|null
     */
    public function getConditionRateRatio()
    {
        return $this->container['condition_rate_ratio'];
    }

    /**
     * Sets condition_rate_ratio
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Ratio|null $condition_rate_ratio condition_rate_ratio
     *
     * @return self
     */
    public function setConditionRateRatio($condition_rate_ratio)
    {
        if (is_null($condition_rate_ratio)) {
            throw new \InvalidArgumentException('non-nullable condition_rate_ratio cannot be null');
        }
        $this->container['condition_rate_ratio'] = $condition_rate_ratio;

        return $this;
    }

    /**
     * Gets condition_rate_ratio_unit
     *
     * @return string|null
     */
    public function getConditionRateRatioUnit()
    {
        return $this->container['condition_rate_ratio_unit'];
    }

    /**
     * Sets condition_rate_ratio_unit
     *
     * @param string|null $condition_rate_ratio_unit Unit of Measurement
     *
     * @return self
     */
    public function setConditionRateRatioUnit($condition_rate_ratio_unit)
    {
        if (is_null($condition_rate_ratio_unit)) {
            throw new \InvalidArgumentException('non-nullable condition_rate_ratio_unit cannot be null');
        }
        if ((mb_strlen($condition_rate_ratio_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_rate_ratio_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['condition_rate_ratio_unit'] = $condition_rate_ratio_unit;

        return $this;
    }

    /**
     * Gets condition_currency
     *
     * @return string|null
     */
    public function getConditionCurrency()
    {
        return $this->container['condition_currency'];
    }

    /**
     * Sets condition_currency
     *
     * @param string|null $condition_currency Currency Key
     *
     * @return self
     */
    public function setConditionCurrency($condition_currency)
    {
        if (is_null($condition_currency)) {
            throw new \InvalidArgumentException('non-nullable condition_currency cannot be null');
        }
        if ((mb_strlen($condition_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['condition_currency'] = $condition_currency;

        return $this;
    }

    /**
     * Gets condition_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\PricingUnit|null
     */
    public function getConditionQuantity()
    {
        return $this->container['condition_quantity'];
    }

    /**
     * Sets condition_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\PricingUnit|null $condition_quantity condition_quantity
     *
     * @return self
     */
    public function setConditionQuantity($condition_quantity)
    {
        if (is_null($condition_quantity)) {
            throw new \InvalidArgumentException('non-nullable condition_quantity cannot be null');
        }
        $this->container['condition_quantity'] = $condition_quantity;

        return $this;
    }

    /**
     * Gets condition_quantity_unit
     *
     * @return string|null
     */
    public function getConditionQuantityUnit()
    {
        return $this->container['condition_quantity_unit'];
    }

    /**
     * Sets condition_quantity_unit
     *
     * @param string|null $condition_quantity_unit Condition Unit in the Document
     *
     * @return self
     */
    public function setConditionQuantityUnit($condition_quantity_unit)
    {
        if (is_null($condition_quantity_unit)) {
            throw new \InvalidArgumentException('non-nullable condition_quantity_unit cannot be null');
        }
        if ((mb_strlen($condition_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_quantity_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['condition_quantity_unit'] = $condition_quantity_unit;

        return $this;
    }

    /**
     * Gets condition_to_base_qty_nmrtr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Numerator1|null
     */
    public function getConditionToBaseQtyNmrtr()
    {
        return $this->container['condition_to_base_qty_nmrtr'];
    }

    /**
     * Sets condition_to_base_qty_nmrtr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Numerator1|null $condition_to_base_qty_nmrtr condition_to_base_qty_nmrtr
     *
     * @return self
     */
    public function setConditionToBaseQtyNmrtr($condition_to_base_qty_nmrtr)
    {
        if (is_null($condition_to_base_qty_nmrtr)) {
            throw new \InvalidArgumentException('non-nullable condition_to_base_qty_nmrtr cannot be null');
        }
        $this->container['condition_to_base_qty_nmrtr'] = $condition_to_base_qty_nmrtr;

        return $this;
    }

    /**
     * Gets condition_to_base_qty_dnmntr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Denominator1|null
     */
    public function getConditionToBaseQtyDnmntr()
    {
        return $this->container['condition_to_base_qty_dnmntr'];
    }

    /**
     * Sets condition_to_base_qty_dnmntr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Denominator1|null $condition_to_base_qty_dnmntr condition_to_base_qty_dnmntr
     *
     * @return self
     */
    public function setConditionToBaseQtyDnmntr($condition_to_base_qty_dnmntr)
    {
        if (is_null($condition_to_base_qty_dnmntr)) {
            throw new \InvalidArgumentException('non-nullable condition_to_base_qty_dnmntr cannot be null');
        }
        $this->container['condition_to_base_qty_dnmntr'] = $condition_to_base_qty_dnmntr;

        return $this;
    }

    /**
     * Gets account_key_for_gl_account
     *
     * @return string|null
     */
    public function getAccountKeyForGlAccount()
    {
        return $this->container['account_key_for_gl_account'];
    }

    /**
     * Sets account_key_for_gl_account
     *
     * @param string|null $account_key_for_gl_account account_key_for_gl_account
     *
     * @return self
     */
    public function setAccountKeyForGlAccount($account_key_for_gl_account)
    {
        if (is_null($account_key_for_gl_account)) {
            throw new \InvalidArgumentException('non-nullable account_key_for_gl_account cannot be null');
        }
        if ((mb_strlen($account_key_for_gl_account) > 3)) {
            throw new \InvalidArgumentException('invalid length for $account_key_for_gl_account when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['account_key_for_gl_account'] = $account_key_for_gl_account;

        return $this;
    }

    /**
     * Gets gl_account
     *
     * @return string|null
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     *
     * @param string|null $gl_account G/L Account Number
     *
     * @return self
     */
    public function setGlAccount($gl_account)
    {
        if (is_null($gl_account)) {
            throw new \InvalidArgumentException('non-nullable gl_account cannot be null');
        }
        if ((mb_strlen($gl_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $gl_account when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Tax on Sales/Purchases Code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        if ((mb_strlen($tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets acct_key_for_accruals_gl_account
     *
     * @return string|null
     */
    public function getAcctKeyForAccrualsGlAccount()
    {
        return $this->container['acct_key_for_accruals_gl_account'];
    }

    /**
     * Sets acct_key_for_accruals_gl_account
     *
     * @param string|null $acct_key_for_accruals_gl_account Account Key - Accruals / Provisions
     *
     * @return self
     */
    public function setAcctKeyForAccrualsGlAccount($acct_key_for_accruals_gl_account)
    {
        if (is_null($acct_key_for_accruals_gl_account)) {
            throw new \InvalidArgumentException('non-nullable acct_key_for_accruals_gl_account cannot be null');
        }
        if ((mb_strlen($acct_key_for_accruals_gl_account) > 3)) {
            throw new \InvalidArgumentException('invalid length for $acct_key_for_accruals_gl_account when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['acct_key_for_accruals_gl_account'] = $acct_key_for_accruals_gl_account;

        return $this;
    }

    /**
     * Gets accruals_gl_account
     *
     * @return string|null
     */
    public function getAccrualsGlAccount()
    {
        return $this->container['accruals_gl_account'];
    }

    /**
     * Sets accruals_gl_account
     *
     * @param string|null $accruals_gl_account Number of Accruals Account
     *
     * @return self
     */
    public function setAccrualsGlAccount($accruals_gl_account)
    {
        if (is_null($accruals_gl_account)) {
            throw new \InvalidArgumentException('non-nullable accruals_gl_account cannot be null');
        }
        if ((mb_strlen($accruals_gl_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $accruals_gl_account when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['accruals_gl_account'] = $accruals_gl_account;

        return $this;
    }

    /**
     * Gets withholding_tax_code
     *
     * @return string|null
     */
    public function getWithholdingTaxCode()
    {
        return $this->container['withholding_tax_code'];
    }

    /**
     * Sets withholding_tax_code
     *
     * @param string|null $withholding_tax_code Withholding Tax Code
     *
     * @return self
     */
    public function setWithholdingTaxCode($withholding_tax_code)
    {
        if (is_null($withholding_tax_code)) {
            throw new \InvalidArgumentException('non-nullable withholding_tax_code cannot be null');
        }
        if ((mb_strlen($withholding_tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $withholding_tax_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['withholding_tax_code'] = $withholding_tax_code;

        return $this;
    }

    /**
     * Gets freight_supplier
     *
     * @return string|null
     */
    public function getFreightSupplier()
    {
        return $this->container['freight_supplier'];
    }

    /**
     * Sets freight_supplier
     *
     * @param string|null $freight_supplier Account Number of Supplier
     *
     * @return self
     */
    public function setFreightSupplier($freight_supplier)
    {
        if (is_null($freight_supplier)) {
            throw new \InvalidArgumentException('non-nullable freight_supplier cannot be null');
        }
        if ((mb_strlen($freight_supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $freight_supplier when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['freight_supplier'] = $freight_supplier;

        return $this;
    }

    /**
     * Gets cndn_rounding_off_diff_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\CondRoundingDiff|null
     */
    public function getCndnRoundingOffDiffAmount()
    {
        return $this->container['cndn_rounding_off_diff_amount'];
    }

    /**
     * Sets cndn_rounding_off_diff_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\CondRoundingDiff|null $cndn_rounding_off_diff_amount cndn_rounding_off_diff_amount
     *
     * @return self
     */
    public function setCndnRoundingOffDiffAmount($cndn_rounding_off_diff_amount)
    {
        if (is_null($cndn_rounding_off_diff_amount)) {
            throw new \InvalidArgumentException('non-nullable cndn_rounding_off_diff_amount cannot be null');
        }
        $this->container['cndn_rounding_off_diff_amount'] = $cndn_rounding_off_diff_amount;

        return $this;
    }

    /**
     * Gets transaction_currency
     *
     * @return string|null
     */
    public function getTransactionCurrency()
    {
        return $this->container['transaction_currency'];
    }

    /**
     * Sets transaction_currency
     *
     * @param string|null $transaction_currency SD Document Currency
     *
     * @return self
     */
    public function setTransactionCurrency($transaction_currency)
    {
        if (is_null($transaction_currency)) {
            throw new \InvalidArgumentException('non-nullable transaction_currency cannot be null');
        }
        if ((mb_strlen($transaction_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $transaction_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['transaction_currency'] = $transaction_currency;

        return $this;
    }

    /**
     * Gets prcg_procedure_counter_for_header
     *
     * @return string|null
     */
    public function getPrcgProcedureCounterForHeader()
    {
        return $this->container['prcg_procedure_counter_for_header'];
    }

    /**
     * Sets prcg_procedure_counter_for_header
     *
     * @param string|null $prcg_procedure_counter_for_header Condition Counter (Header)
     *
     * @return self
     */
    public function setPrcgProcedureCounterForHeader($prcg_procedure_counter_for_header)
    {
        if (is_null($prcg_procedure_counter_for_header)) {
            throw new \InvalidArgumentException('non-nullable prcg_procedure_counter_for_header cannot be null');
        }
        if ((mb_strlen($prcg_procedure_counter_for_header) > 3)) {
            throw new \InvalidArgumentException('invalid length for $prcg_procedure_counter_for_header when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['prcg_procedure_counter_for_header'] = $prcg_procedure_counter_for_header;

        return $this;
    }

    /**
     * Gets structure_condition
     *
     * @return string|null
     */
    public function getStructureCondition()
    {
        return $this->container['structure_condition'];
    }

    /**
     * Sets structure_condition
     *
     * @param string|null $structure_condition structure_condition
     *
     * @return self
     */
    public function setStructureCondition($structure_condition)
    {
        if (is_null($structure_condition)) {
            throw new \InvalidArgumentException('non-nullable structure_condition cannot be null');
        }
        if ((mb_strlen($structure_condition) > 1)) {
            throw new \InvalidArgumentException('invalid length for $structure_condition when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['structure_condition'] = $structure_condition;

        return $this;
    }

    /**
     * Gets period_factor_for_cndn_basis_value
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ConditionFactor1|null
     */
    public function getPeriodFactorForCndnBasisValue()
    {
        return $this->container['period_factor_for_cndn_basis_value'];
    }

    /**
     * Sets period_factor_for_cndn_basis_value
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ConditionFactor1|null $period_factor_for_cndn_basis_value period_factor_for_cndn_basis_value
     *
     * @return self
     */
    public function setPeriodFactorForCndnBasisValue($period_factor_for_cndn_basis_value)
    {
        if (is_null($period_factor_for_cndn_basis_value)) {
            throw new \InvalidArgumentException('non-nullable period_factor_for_cndn_basis_value cannot be null');
        }
        $this->container['period_factor_for_cndn_basis_value'] = $period_factor_for_cndn_basis_value;

        return $this;
    }

    /**
     * Gets condition_alternative_currency
     *
     * @return string|null
     */
    public function getConditionAlternativeCurrency()
    {
        return $this->container['condition_alternative_currency'];
    }

    /**
     * Sets condition_alternative_currency
     *
     * @param string|null $condition_alternative_currency Condition Currency (for Cumulation Fields)
     *
     * @return self
     */
    public function setConditionAlternativeCurrency($condition_alternative_currency)
    {
        if (is_null($condition_alternative_currency)) {
            throw new \InvalidArgumentException('non-nullable condition_alternative_currency cannot be null');
        }
        if ((mb_strlen($condition_alternative_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_alternative_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['condition_alternative_currency'] = $condition_alternative_currency;

        return $this;
    }

    /**
     * Gets condition_amount_in_local_crcy
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ConditionValue|null
     */
    public function getConditionAmountInLocalCrcy()
    {
        return $this->container['condition_amount_in_local_crcy'];
    }

    /**
     * Sets condition_amount_in_local_crcy
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ConditionValue|null $condition_amount_in_local_crcy condition_amount_in_local_crcy
     *
     * @return self
     */
    public function setConditionAmountInLocalCrcy($condition_amount_in_local_crcy)
    {
        if (is_null($condition_amount_in_local_crcy)) {
            throw new \InvalidArgumentException('non-nullable condition_amount_in_local_crcy cannot be null');
        }
        $this->container['condition_amount_in_local_crcy'] = $condition_amount_in_local_crcy;

        return $this;
    }

    /**
     * Gets billing_price_source
     *
     * @return string|null
     */
    public function getBillingPriceSource()
    {
        return $this->container['billing_price_source'];
    }

    /**
     * Sets billing_price_source
     *
     * @param string|null $billing_price_source billing_price_source
     *
     * @return self
     */
    public function setBillingPriceSource($billing_price_source)
    {
        if (is_null($billing_price_source)) {
            throw new \InvalidArgumentException('non-nullable billing_price_source cannot be null');
        }
        if ((mb_strlen($billing_price_source) > 1)) {
            throw new \InvalidArgumentException('invalid length for $billing_price_source when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['billing_price_source'] = $billing_price_source;

        return $this;
    }

    /**
     * Gets tax_jurisdiction_level
     *
     * @return string|null
     */
    public function getTaxJurisdictionLevel()
    {
        return $this->container['tax_jurisdiction_level'];
    }

    /**
     * Sets tax_jurisdiction_level
     *
     * @param string|null $tax_jurisdiction_level Tax jurisdiction code level
     *
     * @return self
     */
    public function setTaxJurisdictionLevel($tax_jurisdiction_level)
    {
        if (is_null($tax_jurisdiction_level)) {
            throw new \InvalidArgumentException('non-nullable tax_jurisdiction_level cannot be null');
        }
        if ((mb_strlen($tax_jurisdiction_level) > 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction_level when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['tax_jurisdiction_level'] = $tax_jurisdiction_level;

        return $this;
    }

    /**
     * Gets condition_byte_sequence
     *
     * @return string|null
     */
    public function getConditionByteSequence()
    {
        return $this->container['condition_byte_sequence'];
    }

    /**
     * Sets condition_byte_sequence
     *
     * @param string|null $condition_byte_sequence Bit encrypted flags in Pricing
     *
     * @return self
     */
    public function setConditionByteSequence($condition_byte_sequence)
    {
        if (is_null($condition_byte_sequence)) {
            throw new \InvalidArgumentException('non-nullable condition_byte_sequence cannot be null');
        }
        if ((mb_strlen($condition_byte_sequence) > 3)) {
            throw new \InvalidArgumentException('invalid length for $condition_byte_sequence when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['condition_byte_sequence'] = $condition_byte_sequence;

        return $this;
    }

    /**
     * Gets condition_basis_limit_exceeded
     *
     * @return string|null
     */
    public function getConditionBasisLimitExceeded()
    {
        return $this->container['condition_basis_limit_exceeded'];
    }

    /**
     * Sets condition_basis_limit_exceeded
     *
     * @param string|null $condition_basis_limit_exceeded Indicator for Maximum Condition Basis Value
     *
     * @return self
     */
    public function setConditionBasisLimitExceeded($condition_basis_limit_exceeded)
    {
        if (is_null($condition_basis_limit_exceeded)) {
            throw new \InvalidArgumentException('non-nullable condition_basis_limit_exceeded cannot be null');
        }
        if ((mb_strlen($condition_basis_limit_exceeded) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_basis_limit_exceeded when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['condition_basis_limit_exceeded'] = $condition_basis_limit_exceeded;

        return $this;
    }

    /**
     * Gets condition_amount_limit_exceeded
     *
     * @return string|null
     */
    public function getConditionAmountLimitExceeded()
    {
        return $this->container['condition_amount_limit_exceeded'];
    }

    /**
     * Sets condition_amount_limit_exceeded
     *
     * @param string|null $condition_amount_limit_exceeded Indicator for Maximum Condition Amount
     *
     * @return self
     */
    public function setConditionAmountLimitExceeded($condition_amount_limit_exceeded)
    {
        if (is_null($condition_amount_limit_exceeded)) {
            throw new \InvalidArgumentException('non-nullable condition_amount_limit_exceeded cannot be null');
        }
        if ((mb_strlen($condition_amount_limit_exceeded) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_amount_limit_exceeded when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['condition_amount_limit_exceeded'] = $condition_amount_limit_exceeded;

        return $this;
    }

    /**
     * Gets cumulated_condition_basis_value
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ConditionBasis|null
     */
    public function getCumulatedConditionBasisValue()
    {
        return $this->container['cumulated_condition_basis_value'];
    }

    /**
     * Sets cumulated_condition_basis_value
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ConditionBasis|null $cumulated_condition_basis_value cumulated_condition_basis_value
     *
     * @return self
     */
    public function setCumulatedConditionBasisValue($cumulated_condition_basis_value)
    {
        if (is_null($cumulated_condition_basis_value)) {
            throw new \InvalidArgumentException('non-nullable cumulated_condition_basis_value cannot be null');
        }
        $this->container['cumulated_condition_basis_value'] = $cumulated_condition_basis_value;

        return $this;
    }

    /**
     * Gets customer_rebate_recipient
     *
     * @return string|null
     */
    public function getCustomerRebateRecipient()
    {
        return $this->container['customer_rebate_recipient'];
    }

    /**
     * Sets customer_rebate_recipient
     *
     * @param string|null $customer_rebate_recipient Customer number (rebate recipient)
     *
     * @return self
     */
    public function setCustomerRebateRecipient($customer_rebate_recipient)
    {
        if (is_null($customer_rebate_recipient)) {
            throw new \InvalidArgumentException('non-nullable customer_rebate_recipient cannot be null');
        }
        if ((mb_strlen($customer_rebate_recipient) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer_rebate_recipient when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['customer_rebate_recipient'] = $customer_rebate_recipient;

        return $this;
    }

    /**
     * Gets variant_condition
     *
     * @return string|null
     */
    public function getVariantCondition()
    {
        return $this->container['variant_condition'];
    }

    /**
     * Sets variant_condition
     *
     * @param string|null $variant_condition Variant Condition Key
     *
     * @return self
     */
    public function setVariantCondition($variant_condition)
    {
        if (is_null($variant_condition)) {
            throw new \InvalidArgumentException('non-nullable variant_condition cannot be null');
        }
        if ((mb_strlen($variant_condition) > 26)) {
            throw new \InvalidArgumentException('invalid length for $variant_condition when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 26.');
        }

        $this->container['variant_condition'] = $variant_condition;

        return $this;
    }

    /**
     * Gets condition_acct_assgmt_relevance
     *
     * @return string|null
     */
    public function getConditionAcctAssgmtRelevance()
    {
        return $this->container['condition_acct_assgmt_relevance'];
    }

    /**
     * Sets condition_acct_assgmt_relevance
     *
     * @param string|null $condition_acct_assgmt_relevance Relevance for Account Assignment
     *
     * @return self
     */
    public function setConditionAcctAssgmtRelevance($condition_acct_assgmt_relevance)
    {
        if (is_null($condition_acct_assgmt_relevance)) {
            throw new \InvalidArgumentException('non-nullable condition_acct_assgmt_relevance cannot be null');
        }
        if ((mb_strlen($condition_acct_assgmt_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_acct_assgmt_relevance when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['condition_acct_assgmt_relevance'] = $condition_acct_assgmt_relevance;

        return $this;
    }

    /**
     * Gets condition_matrix_maint_relevance
     *
     * @return string|null
     */
    public function getConditionMatrixMaintRelevance()
    {
        return $this->container['condition_matrix_maint_relevance'];
    }

    /**
     * Sets condition_matrix_maint_relevance
     *
     * @param string|null $condition_matrix_maint_relevance Indicator: Matrix Maintenance
     *
     * @return self
     */
    public function setConditionMatrixMaintRelevance($condition_matrix_maint_relevance)
    {
        if (is_null($condition_matrix_maint_relevance)) {
            throw new \InvalidArgumentException('non-nullable condition_matrix_maint_relevance cannot be null');
        }
        if ((mb_strlen($condition_matrix_maint_relevance) > 1)) {
            throw new \InvalidArgumentException('invalid length for $condition_matrix_maint_relevance when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['condition_matrix_maint_relevance'] = $condition_matrix_maint_relevance;

        return $this;
    }

    /**
     * Gets configbl_parameters_and_formulas
     *
     * @return string|null
     */
    public function getConfigblParametersAndFormulas()
    {
        return $this->container['configbl_parameters_and_formulas'];
    }

    /**
     * Sets configbl_parameters_and_formulas
     *
     * @param string|null $configbl_parameters_and_formulas Identifier of CPF Formula in Document
     *
     * @return self
     */
    public function setConfigblParametersAndFormulas($configbl_parameters_and_formulas)
    {
        if (is_null($configbl_parameters_and_formulas)) {
            array_push($this->openAPINullablesSetToNull, 'configbl_parameters_and_formulas');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('configbl_parameters_and_formulas', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['configbl_parameters_and_formulas'] = $configbl_parameters_and_formulas;

        return $this;
    }

    /**
     * Gets condition_adjusted_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\AdjustedQty|null
     */
    public function getConditionAdjustedQuantity()
    {
        return $this->container['condition_adjusted_quantity'];
    }

    /**
     * Sets condition_adjusted_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\AdjustedQty|null $condition_adjusted_quantity condition_adjusted_quantity
     *
     * @return self
     */
    public function setConditionAdjustedQuantity($condition_adjusted_quantity)
    {
        if (is_null($condition_adjusted_quantity)) {
            throw new \InvalidArgumentException('non-nullable condition_adjusted_quantity cannot be null');
        }
        $this->container['condition_adjusted_quantity'] = $condition_adjusted_quantity;

        return $this;
    }

    /**
     * Gets condition_type_name
     *
     * @return string|null
     */
    public function getConditionTypeName()
    {
        return $this->container['condition_type_name'];
    }

    /**
     * Sets condition_type_name
     *
     * @param string|null $condition_type_name condition_type_name
     *
     * @return self
     */
    public function setConditionTypeName($condition_type_name)
    {
        if (is_null($condition_type_name)) {
            throw new \InvalidArgumentException('non-nullable condition_type_name cannot be null');
        }
        if ((mb_strlen($condition_type_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $condition_type_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['condition_type_name'] = $condition_type_name;

        return $this;
    }

    /**
     * Gets tax_code_name
     *
     * @return string|null
     */
    public function getTaxCodeName()
    {
        return $this->container['tax_code_name'];
    }

    /**
     * Sets tax_code_name
     *
     * @param string|null $tax_code_name tax_code_name
     *
     * @return self
     */
    public function setTaxCodeName($tax_code_name)
    {
        if (is_null($tax_code_name)) {
            throw new \InvalidArgumentException('non-nullable tax_code_name cannot be null');
        }
        if ((mb_strlen($tax_code_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $tax_code_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 50.');
        }

        $this->container['tax_code_name'] = $tax_code_name;

        return $this;
    }

    /**
     * Gets condition_is_deletable
     *
     * @return bool|null
     */
    public function getConditionIsDeletable()
    {
        return $this->container['condition_is_deletable'];
    }

    /**
     * Sets condition_is_deletable
     *
     * @param bool|null $condition_is_deletable condition_is_deletable
     *
     * @return self
     */
    public function setConditionIsDeletable($condition_is_deletable)
    {
        if (is_null($condition_is_deletable)) {
            throw new \InvalidArgumentException('non-nullable condition_is_deletable cannot be null');
        }
        $this->container['condition_is_deletable'] = $condition_is_deletable;

        return $this;
    }

    /**
     * Gets pricing_procedure
     *
     * @return string|null
     */
    public function getPricingProcedure()
    {
        return $this->container['pricing_procedure'];
    }

    /**
     * Sets pricing_procedure
     *
     * @param string|null $pricing_procedure Procedure (Pricing, Output Control, Acct. Det., Costing,...)
     *
     * @return self
     */
    public function setPricingProcedure($pricing_procedure)
    {
        if (is_null($pricing_procedure)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure cannot be null');
        }
        if ((mb_strlen($pricing_procedure) > 6)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['pricing_procedure'] = $pricing_procedure;

        return $this;
    }

    /**
     * Gets superordinate_document
     *
     * @return string|null
     */
    public function getSuperordinateDocument()
    {
        return $this->container['superordinate_document'];
    }

    /**
     * Sets superordinate_document
     *
     * @param string|null $superordinate_document superordinate_document
     *
     * @return self
     */
    public function setSuperordinateDocument($superordinate_document)
    {
        if (is_null($superordinate_document)) {
            throw new \InvalidArgumentException('non-nullable superordinate_document cannot be null');
        }
        if ((mb_strlen($superordinate_document) > 32)) {
            throw new \InvalidArgumentException('invalid length for $superordinate_document when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 32.');
        }

        $this->container['superordinate_document'] = $superordinate_document;

        return $this;
    }

    /**
     * Gets superordinate_document_item
     *
     * @return string|null
     */
    public function getSuperordinateDocumentItem()
    {
        return $this->container['superordinate_document_item'];
    }

    /**
     * Sets superordinate_document_item
     *
     * @param string|null $superordinate_document_item superordinate_document_item
     *
     * @return self
     */
    public function setSuperordinateDocumentItem($superordinate_document_item)
    {
        if (is_null($superordinate_document_item)) {
            throw new \InvalidArgumentException('non-nullable superordinate_document_item cannot be null');
        }
        if ((mb_strlen($superordinate_document_item) > 70)) {
            throw new \InvalidArgumentException('invalid length for $superordinate_document_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurOrderItemPricingElementTypeCreate., must be smaller than or equal to 70.');
        }

        $this->container['superordinate_document_item'] = $superordinate_document_item;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null
     */
    public function _getPurchaseOrder()
    {
    return $this->container['_purchase_order'];
    }

    /**
     * Sets _purchase_order
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null $_purchase_order _purchase_order
     *
     * @return self
     */
    public function _setPurchaseOrder($_purchase_order)
    {
        if (is_null($_purchase_order)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order cannot be null');
        }
        $this->container['_purchase_order'] = $_purchase_order;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null
     */
    public function _getPurchaseOrderItem()
    {
    return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function _setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


