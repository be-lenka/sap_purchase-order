<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurchaseOrder_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_type' => 'string',
        'purchasing_document_process_code' => 'string',
        'purchase_order_date' => '\DateTime',
        'validity_start_date' => '\DateTime',
        'validity_end_date' => '\DateTime',
        'language' => 'string',
        'purchasing_completeness_status' => 'bool',
        'purg_release_sequence_status' => 'string',
        'release_code' => 'string',
        'purchasing_release_strategy' => 'string',
        'purg_reason_for_doc_cancellation' => 'string',
        'company_code' => 'string',
        'purchasing_organization' => 'string',
        'purchasing_group' => 'string',
        'supplier' => 'string',
        'supplier_address_id' => 'string',
        'supplier_resp_sales_person_name' => 'string',
        'supplier_phone_number' => 'string',
        'supplying_supplier' => 'string',
        'supplying_plant' => 'string',
        'invoicing_party' => 'string',
        'customer' => 'string',
        'purchase_contract' => 'string',
        'supplier_quotation_external_id' => 'string',
        'quotation_submission_date' => '\DateTime',
        'item_number_interval_for_sub_items' => 'string',
        'payment_terms' => 'string',
        'cash_discount1_days' => '\BeLenka\SAP\PurchaseOrder\Model\Days1',
        'cash_discount2_days' => '\BeLenka\SAP\PurchaseOrder\Model\Days2',
        'net_payment_days' => '\BeLenka\SAP\PurchaseOrder\Model\DaysNet',
        'cash_discount1_percent' => '\BeLenka\SAP\PurchaseOrder\Model\CDPercentage1',
        'cash_discount2_percent' => '\BeLenka\SAP\PurchaseOrder\Model\CDPercentage2',
        'down_payment_type' => 'string',
        'down_payment_percentage_of_tot_amt' => '\BeLenka\SAP\PurchaseOrder\Model\DownPayment',
        'down_payment_amount' => '\BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount',
        'down_payment_due_date' => '\DateTime',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_version' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'is_intrastat_reporting_relevant' => 'bool',
        'is_intrastat_reporting_excluded' => 'bool',
        'correspnc_external_reference' => 'string',
        'correspnc_internal_reference' => 'string',
        'pricing_document' => 'string',
        'pricing_procedure' => 'string',
        'document_currency' => 'string',
        'exchange_rate' => '\BeLenka\SAP\PurchaseOrder\Model\ExchangeRate1',
        'exchange_rate_is_fixed' => 'bool',
        'tax_return_country' => 'string',
        'vat_registration_country' => 'string',
        'purchasing_collective_number' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate[]',
        '_purchase_order_note' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate[]',
        '_purchase_order_partner' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderPartnerTypeCreate[]',
        '_supplier_address' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_type' => null,
        'purchasing_document_process_code' => null,
        'purchase_order_date' => 'date',
        'validity_start_date' => 'date',
        'validity_end_date' => 'date',
        'language' => null,
        'purchasing_completeness_status' => null,
        'purg_release_sequence_status' => null,
        'release_code' => null,
        'purchasing_release_strategy' => null,
        'purg_reason_for_doc_cancellation' => null,
        'company_code' => null,
        'purchasing_organization' => null,
        'purchasing_group' => null,
        'supplier' => null,
        'supplier_address_id' => null,
        'supplier_resp_sales_person_name' => null,
        'supplier_phone_number' => null,
        'supplying_supplier' => null,
        'supplying_plant' => null,
        'invoicing_party' => null,
        'customer' => null,
        'purchase_contract' => null,
        'supplier_quotation_external_id' => null,
        'quotation_submission_date' => 'date',
        'item_number_interval_for_sub_items' => null,
        'payment_terms' => null,
        'cash_discount1_days' => null,
        'cash_discount2_days' => null,
        'net_payment_days' => null,
        'cash_discount1_percent' => null,
        'cash_discount2_percent' => null,
        'down_payment_type' => null,
        'down_payment_percentage_of_tot_amt' => null,
        'down_payment_amount' => null,
        'down_payment_due_date' => 'date',
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_version' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'is_intrastat_reporting_relevant' => null,
        'is_intrastat_reporting_excluded' => null,
        'correspnc_external_reference' => null,
        'correspnc_internal_reference' => null,
        'pricing_document' => null,
        'pricing_procedure' => null,
        'document_currency' => null,
        'exchange_rate' => null,
        'exchange_rate_is_fixed' => null,
        'tax_return_country' => null,
        'vat_registration_country' => null,
        'purchasing_collective_number' => null,
        'sap__messages' => null,
        '_purchase_order_item' => null,
        '_purchase_order_note' => null,
        '_purchase_order_partner' => null,
        '_supplier_address' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_type' => false,
		'purchasing_document_process_code' => false,
		'purchase_order_date' => true,
		'validity_start_date' => true,
		'validity_end_date' => true,
		'language' => false,
		'purchasing_completeness_status' => false,
		'purg_release_sequence_status' => false,
		'release_code' => false,
		'purchasing_release_strategy' => false,
		'purg_reason_for_doc_cancellation' => false,
		'company_code' => false,
		'purchasing_organization' => false,
		'purchasing_group' => false,
		'supplier' => false,
		'supplier_address_id' => false,
		'supplier_resp_sales_person_name' => false,
		'supplier_phone_number' => false,
		'supplying_supplier' => false,
		'supplying_plant' => false,
		'invoicing_party' => false,
		'customer' => false,
		'purchase_contract' => false,
		'supplier_quotation_external_id' => false,
		'quotation_submission_date' => true,
		'item_number_interval_for_sub_items' => false,
		'payment_terms' => false,
		'cash_discount1_days' => false,
		'cash_discount2_days' => false,
		'net_payment_days' => false,
		'cash_discount1_percent' => false,
		'cash_discount2_percent' => false,
		'down_payment_type' => false,
		'down_payment_percentage_of_tot_amt' => false,
		'down_payment_amount' => false,
		'down_payment_due_date' => true,
		'incoterms_classification' => false,
		'incoterms_transfer_location' => false,
		'incoterms_version' => false,
		'incoterms_location1' => false,
		'incoterms_location2' => false,
		'is_intrastat_reporting_relevant' => false,
		'is_intrastat_reporting_excluded' => false,
		'correspnc_external_reference' => false,
		'correspnc_internal_reference' => false,
		'pricing_document' => false,
		'pricing_procedure' => false,
		'document_currency' => false,
		'exchange_rate' => false,
		'exchange_rate_is_fixed' => false,
		'tax_return_country' => false,
		'vat_registration_country' => false,
		'purchasing_collective_number' => false,
		'sap__messages' => false,
		'_purchase_order_item' => false,
		'_purchase_order_note' => false,
		'_purchase_order_partner' => false,
		'_supplier_address' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_type' => 'PurchaseOrderType',
        'purchasing_document_process_code' => 'PurchasingDocumentProcessCode',
        'purchase_order_date' => 'PurchaseOrderDate',
        'validity_start_date' => 'ValidityStartDate',
        'validity_end_date' => 'ValidityEndDate',
        'language' => 'Language',
        'purchasing_completeness_status' => 'PurchasingCompletenessStatus',
        'purg_release_sequence_status' => 'PurgReleaseSequenceStatus',
        'release_code' => 'ReleaseCode',
        'purchasing_release_strategy' => 'PurchasingReleaseStrategy',
        'purg_reason_for_doc_cancellation' => 'PurgReasonForDocCancellation',
        'company_code' => 'CompanyCode',
        'purchasing_organization' => 'PurchasingOrganization',
        'purchasing_group' => 'PurchasingGroup',
        'supplier' => 'Supplier',
        'supplier_address_id' => 'SupplierAddressID',
        'supplier_resp_sales_person_name' => 'SupplierRespSalesPersonName',
        'supplier_phone_number' => 'SupplierPhoneNumber',
        'supplying_supplier' => 'SupplyingSupplier',
        'supplying_plant' => 'SupplyingPlant',
        'invoicing_party' => 'InvoicingParty',
        'customer' => 'Customer',
        'purchase_contract' => 'PurchaseContract',
        'supplier_quotation_external_id' => 'SupplierQuotationExternalID',
        'quotation_submission_date' => 'QuotationSubmissionDate',
        'item_number_interval_for_sub_items' => 'ItemNumberIntervalForSubItems',
        'payment_terms' => 'PaymentTerms',
        'cash_discount1_days' => 'CashDiscount1Days',
        'cash_discount2_days' => 'CashDiscount2Days',
        'net_payment_days' => 'NetPaymentDays',
        'cash_discount1_percent' => 'CashDiscount1Percent',
        'cash_discount2_percent' => 'CashDiscount2Percent',
        'down_payment_type' => 'DownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'DownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'DownPaymentAmount',
        'down_payment_due_date' => 'DownPaymentDueDate',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_version' => 'IncotermsVersion',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'is_intrastat_reporting_relevant' => 'IsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'IsIntrastatReportingExcluded',
        'correspnc_external_reference' => 'CorrespncExternalReference',
        'correspnc_internal_reference' => 'CorrespncInternalReference',
        'pricing_document' => 'PricingDocument',
        'pricing_procedure' => 'PricingProcedure',
        'document_currency' => 'DocumentCurrency',
        'exchange_rate' => 'ExchangeRate',
        'exchange_rate_is_fixed' => 'ExchangeRateIsFixed',
        'tax_return_country' => 'TaxReturnCountry',
        'vat_registration_country' => 'VATRegistrationCountry',
        'purchasing_collective_number' => 'PurchasingCollectiveNumber',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order_item' => '_PurchaseOrderItem',
        '_purchase_order_note' => '_PurchaseOrderNote',
        '_purchase_order_partner' => '_PurchaseOrderPartner',
        '_supplier_address' => '_SupplierAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_type' => 'setPurchaseOrderType',
        'purchasing_document_process_code' => 'setPurchasingDocumentProcessCode',
        'purchase_order_date' => 'setPurchaseOrderDate',
        'validity_start_date' => 'setValidityStartDate',
        'validity_end_date' => 'setValidityEndDate',
        'language' => 'setLanguage',
        'purchasing_completeness_status' => 'setPurchasingCompletenessStatus',
        'purg_release_sequence_status' => 'setPurgReleaseSequenceStatus',
        'release_code' => 'setReleaseCode',
        'purchasing_release_strategy' => 'setPurchasingReleaseStrategy',
        'purg_reason_for_doc_cancellation' => 'setPurgReasonForDocCancellation',
        'company_code' => 'setCompanyCode',
        'purchasing_organization' => 'setPurchasingOrganization',
        'purchasing_group' => 'setPurchasingGroup',
        'supplier' => 'setSupplier',
        'supplier_address_id' => 'setSupplierAddressId',
        'supplier_resp_sales_person_name' => 'setSupplierRespSalesPersonName',
        'supplier_phone_number' => 'setSupplierPhoneNumber',
        'supplying_supplier' => 'setSupplyingSupplier',
        'supplying_plant' => 'setSupplyingPlant',
        'invoicing_party' => 'setInvoicingParty',
        'customer' => 'setCustomer',
        'purchase_contract' => 'setPurchaseContract',
        'supplier_quotation_external_id' => 'setSupplierQuotationExternalId',
        'quotation_submission_date' => 'setQuotationSubmissionDate',
        'item_number_interval_for_sub_items' => 'setItemNumberIntervalForSubItems',
        'payment_terms' => 'setPaymentTerms',
        'cash_discount1_days' => 'setCashDiscount1Days',
        'cash_discount2_days' => 'setCashDiscount2Days',
        'net_payment_days' => 'setNetPaymentDays',
        'cash_discount1_percent' => 'setCashDiscount1Percent',
        'cash_discount2_percent' => 'setCashDiscount2Percent',
        'down_payment_type' => 'setDownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'setDownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'setDownPaymentAmount',
        'down_payment_due_date' => 'setDownPaymentDueDate',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_version' => 'setIncotermsVersion',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'is_intrastat_reporting_relevant' => 'setIsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'setIsIntrastatReportingExcluded',
        'correspnc_external_reference' => 'setCorrespncExternalReference',
        'correspnc_internal_reference' => 'setCorrespncInternalReference',
        'pricing_document' => 'setPricingDocument',
        'pricing_procedure' => 'setPricingProcedure',
        'document_currency' => 'setDocumentCurrency',
        'exchange_rate' => 'setExchangeRate',
        'exchange_rate_is_fixed' => 'setExchangeRateIsFixed',
        'tax_return_country' => 'setTaxReturnCountry',
        'vat_registration_country' => 'setVatRegistrationCountry',
        'purchasing_collective_number' => 'setPurchasingCollectiveNumber',
        'sap__messages' => 'setSapMessages',
        '_purchase_order_item' => '_setPurchaseOrderItem',
        '_purchase_order_note' => '_setPurchaseOrderNote',
        '_purchase_order_partner' => '_setPurchaseOrderPartner',
        '_supplier_address' => '_setSupplierAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_type' => 'getPurchaseOrderType',
        'purchasing_document_process_code' => 'getPurchasingDocumentProcessCode',
        'purchase_order_date' => 'getPurchaseOrderDate',
        'validity_start_date' => 'getValidityStartDate',
        'validity_end_date' => 'getValidityEndDate',
        'language' => 'getLanguage',
        'purchasing_completeness_status' => 'getPurchasingCompletenessStatus',
        'purg_release_sequence_status' => 'getPurgReleaseSequenceStatus',
        'release_code' => 'getReleaseCode',
        'purchasing_release_strategy' => 'getPurchasingReleaseStrategy',
        'purg_reason_for_doc_cancellation' => 'getPurgReasonForDocCancellation',
        'company_code' => 'getCompanyCode',
        'purchasing_organization' => 'getPurchasingOrganization',
        'purchasing_group' => 'getPurchasingGroup',
        'supplier' => 'getSupplier',
        'supplier_address_id' => 'getSupplierAddressId',
        'supplier_resp_sales_person_name' => 'getSupplierRespSalesPersonName',
        'supplier_phone_number' => 'getSupplierPhoneNumber',
        'supplying_supplier' => 'getSupplyingSupplier',
        'supplying_plant' => 'getSupplyingPlant',
        'invoicing_party' => 'getInvoicingParty',
        'customer' => 'getCustomer',
        'purchase_contract' => 'getPurchaseContract',
        'supplier_quotation_external_id' => 'getSupplierQuotationExternalId',
        'quotation_submission_date' => 'getQuotationSubmissionDate',
        'item_number_interval_for_sub_items' => 'getItemNumberIntervalForSubItems',
        'payment_terms' => 'getPaymentTerms',
        'cash_discount1_days' => 'getCashDiscount1Days',
        'cash_discount2_days' => 'getCashDiscount2Days',
        'net_payment_days' => 'getNetPaymentDays',
        'cash_discount1_percent' => 'getCashDiscount1Percent',
        'cash_discount2_percent' => 'getCashDiscount2Percent',
        'down_payment_type' => 'getDownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'getDownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'getDownPaymentAmount',
        'down_payment_due_date' => 'getDownPaymentDueDate',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_version' => 'getIncotermsVersion',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'is_intrastat_reporting_relevant' => 'getIsIntrastatReportingRelevant',
        'is_intrastat_reporting_excluded' => 'getIsIntrastatReportingExcluded',
        'correspnc_external_reference' => 'getCorrespncExternalReference',
        'correspnc_internal_reference' => 'getCorrespncInternalReference',
        'pricing_document' => 'getPricingDocument',
        'pricing_procedure' => 'getPricingProcedure',
        'document_currency' => 'getDocumentCurrency',
        'exchange_rate' => 'getExchangeRate',
        'exchange_rate_is_fixed' => 'getExchangeRateIsFixed',
        'tax_return_country' => 'getTaxReturnCountry',
        'vat_registration_country' => 'getVatRegistrationCountry',
        'purchasing_collective_number' => 'getPurchasingCollectiveNumber',
        'sap__messages' => 'getSapMessages',
        '_purchase_order_item' => '_getPurchaseOrderItem',
        '_purchase_order_note' => '_getPurchaseOrderNote',
        '_purchase_order_partner' => '_getPurchaseOrderPartner',
        '_supplier_address' => '_getSupplierAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_type', $data ?? [], null);
        $this->setIfExists('purchasing_document_process_code', $data ?? [], null);
        $this->setIfExists('purchase_order_date', $data ?? [], null);
        $this->setIfExists('validity_start_date', $data ?? [], null);
        $this->setIfExists('validity_end_date', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('purchasing_completeness_status', $data ?? [], null);
        $this->setIfExists('purg_release_sequence_status', $data ?? [], null);
        $this->setIfExists('release_code', $data ?? [], null);
        $this->setIfExists('purchasing_release_strategy', $data ?? [], null);
        $this->setIfExists('purg_reason_for_doc_cancellation', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('purchasing_organization', $data ?? [], null);
        $this->setIfExists('purchasing_group', $data ?? [], null);
        $this->setIfExists('supplier', $data ?? [], null);
        $this->setIfExists('supplier_address_id', $data ?? [], null);
        $this->setIfExists('supplier_resp_sales_person_name', $data ?? [], null);
        $this->setIfExists('supplier_phone_number', $data ?? [], null);
        $this->setIfExists('supplying_supplier', $data ?? [], null);
        $this->setIfExists('supplying_plant', $data ?? [], null);
        $this->setIfExists('invoicing_party', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('purchase_contract', $data ?? [], null);
        $this->setIfExists('supplier_quotation_external_id', $data ?? [], null);
        $this->setIfExists('quotation_submission_date', $data ?? [], null);
        $this->setIfExists('item_number_interval_for_sub_items', $data ?? [], null);
        $this->setIfExists('payment_terms', $data ?? [], null);
        $this->setIfExists('cash_discount1_days', $data ?? [], null);
        $this->setIfExists('cash_discount2_days', $data ?? [], null);
        $this->setIfExists('net_payment_days', $data ?? [], null);
        $this->setIfExists('cash_discount1_percent', $data ?? [], null);
        $this->setIfExists('cash_discount2_percent', $data ?? [], null);
        $this->setIfExists('down_payment_type', $data ?? [], null);
        $this->setIfExists('down_payment_percentage_of_tot_amt', $data ?? [], null);
        $this->setIfExists('down_payment_amount', $data ?? [], null);
        $this->setIfExists('down_payment_due_date', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_version', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('is_intrastat_reporting_relevant', $data ?? [], null);
        $this->setIfExists('is_intrastat_reporting_excluded', $data ?? [], null);
        $this->setIfExists('correspnc_external_reference', $data ?? [], null);
        $this->setIfExists('correspnc_internal_reference', $data ?? [], null);
        $this->setIfExists('pricing_document', $data ?? [], null);
        $this->setIfExists('pricing_procedure', $data ?? [], null);
        $this->setIfExists('document_currency', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('exchange_rate_is_fixed', $data ?? [], null);
        $this->setIfExists('tax_return_country', $data ?? [], null);
        $this->setIfExists('vat_registration_country', $data ?? [], null);
        $this->setIfExists('purchasing_collective_number', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
        $this->setIfExists('_purchase_order_note', $data ?? [], null);
        $this->setIfExists('_purchase_order_partner', $data ?? [], null);
        $this->setIfExists('_supplier_address', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['purchase_order_type'] === null) {
            $invalidProperties[] = "'purchase_order_type' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'purchase_order_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchasing_document_process_code']) && (mb_strlen($this->container['purchasing_document_process_code']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchasing_document_process_code', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['language']) && (mb_strlen($this->container['language']) > 2)) {
            $invalidProperties[] = "invalid value for 'language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['purg_release_sequence_status']) && (mb_strlen($this->container['purg_release_sequence_status']) > 8)) {
            $invalidProperties[] = "invalid value for 'purg_release_sequence_status', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['release_code']) && (mb_strlen($this->container['release_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'release_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purchasing_release_strategy']) && (mb_strlen($this->container['purchasing_release_strategy']) > 2)) {
            $invalidProperties[] = "invalid value for 'purchasing_release_strategy', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['purg_reason_for_doc_cancellation']) && (mb_strlen($this->container['purg_reason_for_doc_cancellation']) > 2)) {
            $invalidProperties[] = "invalid value for 'purg_reason_for_doc_cancellation', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchasing_organization']) && (mb_strlen($this->container['purchasing_organization']) > 4)) {
            $invalidProperties[] = "invalid value for 'purchasing_organization', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchasing_group']) && (mb_strlen($this->container['purchasing_group']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchasing_group', the character length must be smaller than or equal to 3.";
        }

        if ($this->container['supplier'] === null) {
            $invalidProperties[] = "'supplier' can't be null";
        }
        if ((mb_strlen($this->container['supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_address_id']) && (mb_strlen($this->container['supplier_address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_address_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_resp_sales_person_name']) && (mb_strlen($this->container['supplier_resp_sales_person_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'supplier_resp_sales_person_name', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['supplier_phone_number']) && (mb_strlen($this->container['supplier_phone_number']) > 16)) {
            $invalidProperties[] = "invalid value for 'supplier_phone_number', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['supplying_supplier']) && (mb_strlen($this->container['supplying_supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplying_supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplying_plant']) && (mb_strlen($this->container['supplying_plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplying_plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['invoicing_party']) && (mb_strlen($this->container['invoicing_party']) > 10)) {
            $invalidProperties[] = "invalid value for 'invoicing_party', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_contract']) && (mb_strlen($this->container['purchase_contract']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_contract', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_quotation_external_id']) && (mb_strlen($this->container['supplier_quotation_external_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_quotation_external_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['item_number_interval_for_sub_items']) && (mb_strlen($this->container['item_number_interval_for_sub_items']) > 5)) {
            $invalidProperties[] = "invalid value for 'item_number_interval_for_sub_items', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['payment_terms']) && (mb_strlen($this->container['payment_terms']) > 4)) {
            $invalidProperties[] = "invalid value for 'payment_terms', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['down_payment_type']) && (mb_strlen($this->container['down_payment_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'down_payment_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_version']) && (mb_strlen($this->container['incoterms_version']) > 4)) {
            $invalidProperties[] = "invalid value for 'incoterms_version', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['correspnc_external_reference']) && (mb_strlen($this->container['correspnc_external_reference']) > 12)) {
            $invalidProperties[] = "invalid value for 'correspnc_external_reference', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['correspnc_internal_reference']) && (mb_strlen($this->container['correspnc_internal_reference']) > 12)) {
            $invalidProperties[] = "invalid value for 'correspnc_internal_reference', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['pricing_document']) && (mb_strlen($this->container['pricing_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'pricing_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['pricing_procedure']) && (mb_strlen($this->container['pricing_procedure']) > 6)) {
            $invalidProperties[] = "invalid value for 'pricing_procedure', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['document_currency']) && (mb_strlen($this->container['document_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'document_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['tax_return_country']) && (mb_strlen($this->container['tax_return_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'tax_return_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['vat_registration_country']) && (mb_strlen($this->container['vat_registration_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'vat_registration_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchasing_collective_number']) && (mb_strlen($this->container['purchasing_collective_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchasing_collective_number', the character length must be smaller than or equal to 10.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string $purchase_order Purchase Order Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_type
     *
     * @return string
     */
    public function getPurchaseOrderType()
    {
        return $this->container['purchase_order_type'];
    }

    /**
     * Sets purchase_order_type
     *
     * @param string $purchase_order_type Purchasing Document Type
     *
     * @return self
     */
    public function setPurchaseOrderType($purchase_order_type)
    {
        if (is_null($purchase_order_type)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_type cannot be null');
        }
        if ((mb_strlen($purchase_order_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['purchase_order_type'] = $purchase_order_type;

        return $this;
    }

    /**
     * Gets purchasing_document_process_code
     *
     * @return string|null
     */
    public function getPurchasingDocumentProcessCode()
    {
        return $this->container['purchasing_document_process_code'];
    }

    /**
     * Sets purchasing_document_process_code
     *
     * @param string|null $purchasing_document_process_code Process Indicator for Purchase Order
     *
     * @return self
     */
    public function setPurchasingDocumentProcessCode($purchasing_document_process_code)
    {
        if (is_null($purchasing_document_process_code)) {
            throw new \InvalidArgumentException('non-nullable purchasing_document_process_code cannot be null');
        }
        if ((mb_strlen($purchasing_document_process_code) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_document_process_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['purchasing_document_process_code'] = $purchasing_document_process_code;

        return $this;
    }

    /**
     * Gets purchase_order_date
     *
     * @return \DateTime|null
     */
    public function getPurchaseOrderDate()
    {
        return $this->container['purchase_order_date'];
    }

    /**
     * Sets purchase_order_date
     *
     * @param \DateTime|null $purchase_order_date purchase_order_date
     *
     * @return self
     */
    public function setPurchaseOrderDate($purchase_order_date)
    {
        if (is_null($purchase_order_date)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_order_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_order_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_order_date'] = $purchase_order_date;

        return $this;
    }

    /**
     * Gets validity_start_date
     *
     * @return \DateTime|null
     */
    public function getValidityStartDate()
    {
        return $this->container['validity_start_date'];
    }

    /**
     * Sets validity_start_date
     *
     * @param \DateTime|null $validity_start_date Start of Validity Period
     *
     * @return self
     */
    public function setValidityStartDate($validity_start_date)
    {
        if (is_null($validity_start_date)) {
            array_push($this->openAPINullablesSetToNull, 'validity_start_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validity_start_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validity_start_date'] = $validity_start_date;

        return $this;
    }

    /**
     * Gets validity_end_date
     *
     * @return \DateTime|null
     */
    public function getValidityEndDate()
    {
        return $this->container['validity_end_date'];
    }

    /**
     * Sets validity_end_date
     *
     * @param \DateTime|null $validity_end_date End of Validity Period
     *
     * @return self
     */
    public function setValidityEndDate($validity_end_date)
    {
        if (is_null($validity_end_date)) {
            array_push($this->openAPINullablesSetToNull, 'validity_end_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validity_end_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validity_end_date'] = $validity_end_date;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        if ((mb_strlen($language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $language when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets purchasing_completeness_status
     *
     * @return bool|null
     */
    public function getPurchasingCompletenessStatus()
    {
        return $this->container['purchasing_completeness_status'];
    }

    /**
     * Sets purchasing_completeness_status
     *
     * @param bool|null $purchasing_completeness_status Purchase order not yet complete
     *
     * @return self
     */
    public function setPurchasingCompletenessStatus($purchasing_completeness_status)
    {
        if (is_null($purchasing_completeness_status)) {
            throw new \InvalidArgumentException('non-nullable purchasing_completeness_status cannot be null');
        }
        $this->container['purchasing_completeness_status'] = $purchasing_completeness_status;

        return $this;
    }

    /**
     * Gets purg_release_sequence_status
     *
     * @return string|null
     */
    public function getPurgReleaseSequenceStatus()
    {
        return $this->container['purg_release_sequence_status'];
    }

    /**
     * Sets purg_release_sequence_status
     *
     * @param string|null $purg_release_sequence_status purg_release_sequence_status
     *
     * @return self
     */
    public function setPurgReleaseSequenceStatus($purg_release_sequence_status)
    {
        if (is_null($purg_release_sequence_status)) {
            throw new \InvalidArgumentException('non-nullable purg_release_sequence_status cannot be null');
        }
        if ((mb_strlen($purg_release_sequence_status) > 8)) {
            throw new \InvalidArgumentException('invalid length for $purg_release_sequence_status when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 8.');
        }

        $this->container['purg_release_sequence_status'] = $purg_release_sequence_status;

        return $this;
    }

    /**
     * Gets release_code
     *
     * @return string|null
     */
    public function getReleaseCode()
    {
        return $this->container['release_code'];
    }

    /**
     * Sets release_code
     *
     * @param string|null $release_code Release Indicator: Purchasing Document
     *
     * @return self
     */
    public function setReleaseCode($release_code)
    {
        if (is_null($release_code)) {
            throw new \InvalidArgumentException('non-nullable release_code cannot be null');
        }
        if ((mb_strlen($release_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $release_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['release_code'] = $release_code;

        return $this;
    }

    /**
     * Gets purchasing_release_strategy
     *
     * @return string|null
     */
    public function getPurchasingReleaseStrategy()
    {
        return $this->container['purchasing_release_strategy'];
    }

    /**
     * Sets purchasing_release_strategy
     *
     * @param string|null $purchasing_release_strategy purchasing_release_strategy
     *
     * @return self
     */
    public function setPurchasingReleaseStrategy($purchasing_release_strategy)
    {
        if (is_null($purchasing_release_strategy)) {
            throw new \InvalidArgumentException('non-nullable purchasing_release_strategy cannot be null');
        }
        if ((mb_strlen($purchasing_release_strategy) > 2)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_release_strategy when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['purchasing_release_strategy'] = $purchasing_release_strategy;

        return $this;
    }

    /**
     * Gets purg_reason_for_doc_cancellation
     *
     * @return string|null
     */
    public function getPurgReasonForDocCancellation()
    {
        return $this->container['purg_reason_for_doc_cancellation'];
    }

    /**
     * Sets purg_reason_for_doc_cancellation
     *
     * @param string|null $purg_reason_for_doc_cancellation Reason for Cancellation
     *
     * @return self
     */
    public function setPurgReasonForDocCancellation($purg_reason_for_doc_cancellation)
    {
        if (is_null($purg_reason_for_doc_cancellation)) {
            throw new \InvalidArgumentException('non-nullable purg_reason_for_doc_cancellation cannot be null');
        }
        if ((mb_strlen($purg_reason_for_doc_cancellation) > 2)) {
            throw new \InvalidArgumentException('invalid length for $purg_reason_for_doc_cancellation when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['purg_reason_for_doc_cancellation'] = $purg_reason_for_doc_cancellation;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string|null $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            throw new \InvalidArgumentException('non-nullable company_code cannot be null');
        }
        if ((mb_strlen($company_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets purchasing_organization
     *
     * @return string|null
     */
    public function getPurchasingOrganization()
    {
        return $this->container['purchasing_organization'];
    }

    /**
     * Sets purchasing_organization
     *
     * @param string|null $purchasing_organization Purchasing Organization
     *
     * @return self
     */
    public function setPurchasingOrganization($purchasing_organization)
    {
        if (is_null($purchasing_organization)) {
            throw new \InvalidArgumentException('non-nullable purchasing_organization cannot be null');
        }
        if ((mb_strlen($purchasing_organization) > 4)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_organization when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['purchasing_organization'] = $purchasing_organization;

        return $this;
    }

    /**
     * Gets purchasing_group
     *
     * @return string|null
     */
    public function getPurchasingGroup()
    {
        return $this->container['purchasing_group'];
    }

    /**
     * Sets purchasing_group
     *
     * @param string|null $purchasing_group purchasing_group
     *
     * @return self
     */
    public function setPurchasingGroup($purchasing_group)
    {
        if (is_null($purchasing_group)) {
            throw new \InvalidArgumentException('non-nullable purchasing_group cannot be null');
        }
        if ((mb_strlen($purchasing_group) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_group when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['purchasing_group'] = $purchasing_group;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier supplier
     *
     * @return self
     */
    public function setSupplier($supplier)
    {
        if (is_null($supplier)) {
            throw new \InvalidArgumentException('non-nullable supplier cannot be null');
        }
        if ((mb_strlen($supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets supplier_address_id
     *
     * @return string|null
     */
    public function getSupplierAddressId()
    {
        return $this->container['supplier_address_id'];
    }

    /**
     * Sets supplier_address_id
     *
     * @param string|null $supplier_address_id supplier_address_id
     *
     * @return self
     */
    public function setSupplierAddressId($supplier_address_id)
    {
        if (is_null($supplier_address_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_address_id cannot be null');
        }
        if ((mb_strlen($supplier_address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_address_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['supplier_address_id'] = $supplier_address_id;

        return $this;
    }

    /**
     * Gets supplier_resp_sales_person_name
     *
     * @return string|null
     */
    public function getSupplierRespSalesPersonName()
    {
        return $this->container['supplier_resp_sales_person_name'];
    }

    /**
     * Sets supplier_resp_sales_person_name
     *
     * @param string|null $supplier_resp_sales_person_name Responsible Salesperson at Supplier's Office
     *
     * @return self
     */
    public function setSupplierRespSalesPersonName($supplier_resp_sales_person_name)
    {
        if (is_null($supplier_resp_sales_person_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_resp_sales_person_name cannot be null');
        }
        if ((mb_strlen($supplier_resp_sales_person_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $supplier_resp_sales_person_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 30.');
        }

        $this->container['supplier_resp_sales_person_name'] = $supplier_resp_sales_person_name;

        return $this;
    }

    /**
     * Gets supplier_phone_number
     *
     * @return string|null
     */
    public function getSupplierPhoneNumber()
    {
        return $this->container['supplier_phone_number'];
    }

    /**
     * Sets supplier_phone_number
     *
     * @param string|null $supplier_phone_number Supplier's Phone Number
     *
     * @return self
     */
    public function setSupplierPhoneNumber($supplier_phone_number)
    {
        if (is_null($supplier_phone_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_phone_number cannot be null');
        }
        if ((mb_strlen($supplier_phone_number) > 16)) {
            throw new \InvalidArgumentException('invalid length for $supplier_phone_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 16.');
        }

        $this->container['supplier_phone_number'] = $supplier_phone_number;

        return $this;
    }

    /**
     * Gets supplying_supplier
     *
     * @return string|null
     */
    public function getSupplyingSupplier()
    {
        return $this->container['supplying_supplier'];
    }

    /**
     * Sets supplying_supplier
     *
     * @param string|null $supplying_supplier supplying_supplier
     *
     * @return self
     */
    public function setSupplyingSupplier($supplying_supplier)
    {
        if (is_null($supplying_supplier)) {
            throw new \InvalidArgumentException('non-nullable supplying_supplier cannot be null');
        }
        if ((mb_strlen($supplying_supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplying_supplier when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['supplying_supplier'] = $supplying_supplier;

        return $this;
    }

    /**
     * Gets supplying_plant
     *
     * @return string|null
     */
    public function getSupplyingPlant()
    {
        return $this->container['supplying_plant'];
    }

    /**
     * Sets supplying_plant
     *
     * @param string|null $supplying_plant Supplying (issuing) plant in case of stock transport order
     *
     * @return self
     */
    public function setSupplyingPlant($supplying_plant)
    {
        if (is_null($supplying_plant)) {
            throw new \InvalidArgumentException('non-nullable supplying_plant cannot be null');
        }
        if ((mb_strlen($supplying_plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplying_plant when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['supplying_plant'] = $supplying_plant;

        return $this;
    }

    /**
     * Gets invoicing_party
     *
     * @return string|null
     */
    public function getInvoicingParty()
    {
        return $this->container['invoicing_party'];
    }

    /**
     * Sets invoicing_party
     *
     * @param string|null $invoicing_party Different Invoicing Party
     *
     * @return self
     */
    public function setInvoicingParty($invoicing_party)
    {
        if (is_null($invoicing_party)) {
            throw new \InvalidArgumentException('non-nullable invoicing_party cannot be null');
        }
        if ((mb_strlen($invoicing_party) > 10)) {
            throw new \InvalidArgumentException('invalid length for $invoicing_party when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['invoicing_party'] = $invoicing_party;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer Customer Number
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        if ((mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets purchase_contract
     *
     * @return string|null
     */
    public function getPurchaseContract()
    {
        return $this->container['purchase_contract'];
    }

    /**
     * Sets purchase_contract
     *
     * @param string|null $purchase_contract Number of principal purchase agreement
     *
     * @return self
     */
    public function setPurchaseContract($purchase_contract)
    {
        if (is_null($purchase_contract)) {
            throw new \InvalidArgumentException('non-nullable purchase_contract cannot be null');
        }
        if ((mb_strlen($purchase_contract) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_contract when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_contract'] = $purchase_contract;

        return $this;
    }

    /**
     * Gets supplier_quotation_external_id
     *
     * @return string|null
     */
    public function getSupplierQuotationExternalId()
    {
        return $this->container['supplier_quotation_external_id'];
    }

    /**
     * Sets supplier_quotation_external_id
     *
     * @param string|null $supplier_quotation_external_id Quotation Number
     *
     * @return self
     */
    public function setSupplierQuotationExternalId($supplier_quotation_external_id)
    {
        if (is_null($supplier_quotation_external_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_quotation_external_id cannot be null');
        }
        if ((mb_strlen($supplier_quotation_external_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_quotation_external_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['supplier_quotation_external_id'] = $supplier_quotation_external_id;

        return $this;
    }

    /**
     * Gets quotation_submission_date
     *
     * @return \DateTime|null
     */
    public function getQuotationSubmissionDate()
    {
        return $this->container['quotation_submission_date'];
    }

    /**
     * Sets quotation_submission_date
     *
     * @param \DateTime|null $quotation_submission_date Quotation Submission Date
     *
     * @return self
     */
    public function setQuotationSubmissionDate($quotation_submission_date)
    {
        if (is_null($quotation_submission_date)) {
            array_push($this->openAPINullablesSetToNull, 'quotation_submission_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('quotation_submission_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['quotation_submission_date'] = $quotation_submission_date;

        return $this;
    }

    /**
     * Gets item_number_interval_for_sub_items
     *
     * @return string|null
     */
    public function getItemNumberIntervalForSubItems()
    {
        return $this->container['item_number_interval_for_sub_items'];
    }

    /**
     * Sets item_number_interval_for_sub_items
     *
     * @param string|null $item_number_interval_for_sub_items Item Number Interval for Subitems
     *
     * @return self
     */
    public function setItemNumberIntervalForSubItems($item_number_interval_for_sub_items)
    {
        if (is_null($item_number_interval_for_sub_items)) {
            throw new \InvalidArgumentException('non-nullable item_number_interval_for_sub_items cannot be null');
        }
        if ((mb_strlen($item_number_interval_for_sub_items) > 5)) {
            throw new \InvalidArgumentException('invalid length for $item_number_interval_for_sub_items when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 5.');
        }

        $this->container['item_number_interval_for_sub_items'] = $item_number_interval_for_sub_items;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return string|null
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param string|null $payment_terms Terms of Payment Key
     *
     * @return self
     */
    public function setPaymentTerms($payment_terms)
    {
        if (is_null($payment_terms)) {
            throw new \InvalidArgumentException('non-nullable payment_terms cannot be null');
        }
        if ((mb_strlen($payment_terms) > 4)) {
            throw new \InvalidArgumentException('invalid length for $payment_terms when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets cash_discount1_days
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Days1|null
     */
    public function getCashDiscount1Days()
    {
        return $this->container['cash_discount1_days'];
    }

    /**
     * Sets cash_discount1_days
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Days1|null $cash_discount1_days cash_discount1_days
     *
     * @return self
     */
    public function setCashDiscount1Days($cash_discount1_days)
    {
        if (is_null($cash_discount1_days)) {
            throw new \InvalidArgumentException('non-nullable cash_discount1_days cannot be null');
        }
        $this->container['cash_discount1_days'] = $cash_discount1_days;

        return $this;
    }

    /**
     * Gets cash_discount2_days
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Days2|null
     */
    public function getCashDiscount2Days()
    {
        return $this->container['cash_discount2_days'];
    }

    /**
     * Sets cash_discount2_days
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Days2|null $cash_discount2_days cash_discount2_days
     *
     * @return self
     */
    public function setCashDiscount2Days($cash_discount2_days)
    {
        if (is_null($cash_discount2_days)) {
            throw new \InvalidArgumentException('non-nullable cash_discount2_days cannot be null');
        }
        $this->container['cash_discount2_days'] = $cash_discount2_days;

        return $this;
    }

    /**
     * Gets net_payment_days
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\DaysNet|null
     */
    public function getNetPaymentDays()
    {
        return $this->container['net_payment_days'];
    }

    /**
     * Sets net_payment_days
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\DaysNet|null $net_payment_days net_payment_days
     *
     * @return self
     */
    public function setNetPaymentDays($net_payment_days)
    {
        if (is_null($net_payment_days)) {
            throw new \InvalidArgumentException('non-nullable net_payment_days cannot be null');
        }
        $this->container['net_payment_days'] = $net_payment_days;

        return $this;
    }

    /**
     * Gets cash_discount1_percent
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\CDPercentage1|null
     */
    public function getCashDiscount1Percent()
    {
        return $this->container['cash_discount1_percent'];
    }

    /**
     * Sets cash_discount1_percent
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\CDPercentage1|null $cash_discount1_percent cash_discount1_percent
     *
     * @return self
     */
    public function setCashDiscount1Percent($cash_discount1_percent)
    {
        if (is_null($cash_discount1_percent)) {
            throw new \InvalidArgumentException('non-nullable cash_discount1_percent cannot be null');
        }
        $this->container['cash_discount1_percent'] = $cash_discount1_percent;

        return $this;
    }

    /**
     * Gets cash_discount2_percent
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\CDPercentage2|null
     */
    public function getCashDiscount2Percent()
    {
        return $this->container['cash_discount2_percent'];
    }

    /**
     * Sets cash_discount2_percent
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\CDPercentage2|null $cash_discount2_percent cash_discount2_percent
     *
     * @return self
     */
    public function setCashDiscount2Percent($cash_discount2_percent)
    {
        if (is_null($cash_discount2_percent)) {
            throw new \InvalidArgumentException('non-nullable cash_discount2_percent cannot be null');
        }
        $this->container['cash_discount2_percent'] = $cash_discount2_percent;

        return $this;
    }

    /**
     * Gets down_payment_type
     *
     * @return string|null
     */
    public function getDownPaymentType()
    {
        return $this->container['down_payment_type'];
    }

    /**
     * Sets down_payment_type
     *
     * @param string|null $down_payment_type Down Payment Indicator
     *
     * @return self
     */
    public function setDownPaymentType($down_payment_type)
    {
        if (is_null($down_payment_type)) {
            throw new \InvalidArgumentException('non-nullable down_payment_type cannot be null');
        }
        if ((mb_strlen($down_payment_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $down_payment_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['down_payment_type'] = $down_payment_type;

        return $this;
    }

    /**
     * Gets down_payment_percentage_of_tot_amt
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\DownPayment|null
     */
    public function getDownPaymentPercentageOfTotAmt()
    {
        return $this->container['down_payment_percentage_of_tot_amt'];
    }

    /**
     * Sets down_payment_percentage_of_tot_amt
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\DownPayment|null $down_payment_percentage_of_tot_amt down_payment_percentage_of_tot_amt
     *
     * @return self
     */
    public function setDownPaymentPercentageOfTotAmt($down_payment_percentage_of_tot_amt)
    {
        if (is_null($down_payment_percentage_of_tot_amt)) {
            throw new \InvalidArgumentException('non-nullable down_payment_percentage_of_tot_amt cannot be null');
        }
        $this->container['down_payment_percentage_of_tot_amt'] = $down_payment_percentage_of_tot_amt;

        return $this;
    }

    /**
     * Gets down_payment_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount|null
     */
    public function getDownPaymentAmount()
    {
        return $this->container['down_payment_amount'];
    }

    /**
     * Sets down_payment_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount|null $down_payment_amount down_payment_amount
     *
     * @return self
     */
    public function setDownPaymentAmount($down_payment_amount)
    {
        if (is_null($down_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable down_payment_amount cannot be null');
        }
        $this->container['down_payment_amount'] = $down_payment_amount;

        return $this;
    }

    /**
     * Gets down_payment_due_date
     *
     * @return \DateTime|null
     */
    public function getDownPaymentDueDate()
    {
        return $this->container['down_payment_due_date'];
    }

    /**
     * Sets down_payment_due_date
     *
     * @param \DateTime|null $down_payment_due_date Due Date for Down Payment
     *
     * @return self
     */
    public function setDownPaymentDueDate($down_payment_due_date)
    {
        if (is_null($down_payment_due_date)) {
            array_push($this->openAPINullablesSetToNull, 'down_payment_due_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_payment_due_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_payment_due_date'] = $down_payment_due_date;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            throw new \InvalidArgumentException('non-nullable incoterms_classification cannot be null');
        }
        if ((mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            throw new \InvalidArgumentException('non-nullable incoterms_transfer_location cannot be null');
        }
        if ((mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_version
     *
     * @return string|null
     */
    public function getIncotermsVersion()
    {
        return $this->container['incoterms_version'];
    }

    /**
     * Sets incoterms_version
     *
     * @param string|null $incoterms_version incoterms_version
     *
     * @return self
     */
    public function setIncotermsVersion($incoterms_version)
    {
        if (is_null($incoterms_version)) {
            throw new \InvalidArgumentException('non-nullable incoterms_version cannot be null');
        }
        if ((mb_strlen($incoterms_version) > 4)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_version when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['incoterms_version'] = $incoterms_version;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            throw new \InvalidArgumentException('non-nullable incoterms_location1 cannot be null');
        }
        if ((mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            throw new \InvalidArgumentException('non-nullable incoterms_location2 cannot be null');
        }
        if ((mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets is_intrastat_reporting_relevant
     *
     * @return bool|null
     */
    public function getIsIntrastatReportingRelevant()
    {
        return $this->container['is_intrastat_reporting_relevant'];
    }

    /**
     * Sets is_intrastat_reporting_relevant
     *
     * @param bool|null $is_intrastat_reporting_relevant Relevant for Intrastat Reporting
     *
     * @return self
     */
    public function setIsIntrastatReportingRelevant($is_intrastat_reporting_relevant)
    {
        if (is_null($is_intrastat_reporting_relevant)) {
            throw new \InvalidArgumentException('non-nullable is_intrastat_reporting_relevant cannot be null');
        }
        $this->container['is_intrastat_reporting_relevant'] = $is_intrastat_reporting_relevant;

        return $this;
    }

    /**
     * Gets is_intrastat_reporting_excluded
     *
     * @return bool|null
     */
    public function getIsIntrastatReportingExcluded()
    {
        return $this->container['is_intrastat_reporting_excluded'];
    }

    /**
     * Sets is_intrastat_reporting_excluded
     *
     * @param bool|null $is_intrastat_reporting_excluded Exclude from Intrastat Reporting
     *
     * @return self
     */
    public function setIsIntrastatReportingExcluded($is_intrastat_reporting_excluded)
    {
        if (is_null($is_intrastat_reporting_excluded)) {
            throw new \InvalidArgumentException('non-nullable is_intrastat_reporting_excluded cannot be null');
        }
        $this->container['is_intrastat_reporting_excluded'] = $is_intrastat_reporting_excluded;

        return $this;
    }

    /**
     * Gets correspnc_external_reference
     *
     * @return string|null
     */
    public function getCorrespncExternalReference()
    {
        return $this->container['correspnc_external_reference'];
    }

    /**
     * Sets correspnc_external_reference
     *
     * @param string|null $correspnc_external_reference correspnc_external_reference
     *
     * @return self
     */
    public function setCorrespncExternalReference($correspnc_external_reference)
    {
        if (is_null($correspnc_external_reference)) {
            throw new \InvalidArgumentException('non-nullable correspnc_external_reference cannot be null');
        }
        if ((mb_strlen($correspnc_external_reference) > 12)) {
            throw new \InvalidArgumentException('invalid length for $correspnc_external_reference when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 12.');
        }

        $this->container['correspnc_external_reference'] = $correspnc_external_reference;

        return $this;
    }

    /**
     * Gets correspnc_internal_reference
     *
     * @return string|null
     */
    public function getCorrespncInternalReference()
    {
        return $this->container['correspnc_internal_reference'];
    }

    /**
     * Sets correspnc_internal_reference
     *
     * @param string|null $correspnc_internal_reference correspnc_internal_reference
     *
     * @return self
     */
    public function setCorrespncInternalReference($correspnc_internal_reference)
    {
        if (is_null($correspnc_internal_reference)) {
            throw new \InvalidArgumentException('non-nullable correspnc_internal_reference cannot be null');
        }
        if ((mb_strlen($correspnc_internal_reference) > 12)) {
            throw new \InvalidArgumentException('invalid length for $correspnc_internal_reference when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 12.');
        }

        $this->container['correspnc_internal_reference'] = $correspnc_internal_reference;

        return $this;
    }

    /**
     * Gets pricing_document
     *
     * @return string|null
     */
    public function getPricingDocument()
    {
        return $this->container['pricing_document'];
    }

    /**
     * Sets pricing_document
     *
     * @param string|null $pricing_document Number of the Document Condition
     *
     * @return self
     */
    public function setPricingDocument($pricing_document)
    {
        if (is_null($pricing_document)) {
            throw new \InvalidArgumentException('non-nullable pricing_document cannot be null');
        }
        if ((mb_strlen($pricing_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $pricing_document when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['pricing_document'] = $pricing_document;

        return $this;
    }

    /**
     * Gets pricing_procedure
     *
     * @return string|null
     */
    public function getPricingProcedure()
    {
        return $this->container['pricing_procedure'];
    }

    /**
     * Sets pricing_procedure
     *
     * @param string|null $pricing_procedure Procedure (Pricing, Output Control, Acct. Det., Costing,...)
     *
     * @return self
     */
    public function setPricingProcedure($pricing_procedure)
    {
        if (is_null($pricing_procedure)) {
            throw new \InvalidArgumentException('non-nullable pricing_procedure cannot be null');
        }
        if ((mb_strlen($pricing_procedure) > 6)) {
            throw new \InvalidArgumentException('invalid length for $pricing_procedure when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['pricing_procedure'] = $pricing_procedure;

        return $this;
    }

    /**
     * Gets document_currency
     *
     * @return string|null
     */
    public function getDocumentCurrency()
    {
        return $this->container['document_currency'];
    }

    /**
     * Sets document_currency
     *
     * @param string|null $document_currency Currency Key
     *
     * @return self
     */
    public function setDocumentCurrency($document_currency)
    {
        if (is_null($document_currency)) {
            throw new \InvalidArgumentException('non-nullable document_currency cannot be null');
        }
        if ((mb_strlen($document_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $document_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['document_currency'] = $document_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ExchangeRate1|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ExchangeRate1|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets exchange_rate_is_fixed
     *
     * @return bool|null
     */
    public function getExchangeRateIsFixed()
    {
        return $this->container['exchange_rate_is_fixed'];
    }

    /**
     * Sets exchange_rate_is_fixed
     *
     * @param bool|null $exchange_rate_is_fixed Indicator for Fixed Exchange Rate
     *
     * @return self
     */
    public function setExchangeRateIsFixed($exchange_rate_is_fixed)
    {
        if (is_null($exchange_rate_is_fixed)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate_is_fixed cannot be null');
        }
        $this->container['exchange_rate_is_fixed'] = $exchange_rate_is_fixed;

        return $this;
    }

    /**
     * Gets tax_return_country
     *
     * @return string|null
     */
    public function getTaxReturnCountry()
    {
        return $this->container['tax_return_country'];
    }

    /**
     * Sets tax_return_country
     *
     * @param string|null $tax_return_country Country/Region for Tax Report
     *
     * @return self
     */
    public function setTaxReturnCountry($tax_return_country)
    {
        if (is_null($tax_return_country)) {
            throw new \InvalidArgumentException('non-nullable tax_return_country cannot be null');
        }
        if ((mb_strlen($tax_return_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $tax_return_country when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['tax_return_country'] = $tax_return_country;

        return $this;
    }

    /**
     * Gets vat_registration_country
     *
     * @return string|null
     */
    public function getVatRegistrationCountry()
    {
        return $this->container['vat_registration_country'];
    }

    /**
     * Sets vat_registration_country
     *
     * @param string|null $vat_registration_country Country/Region of Sales Tax ID Number
     *
     * @return self
     */
    public function setVatRegistrationCountry($vat_registration_country)
    {
        if (is_null($vat_registration_country)) {
            throw new \InvalidArgumentException('non-nullable vat_registration_country cannot be null');
        }
        if ((mb_strlen($vat_registration_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $vat_registration_country when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['vat_registration_country'] = $vat_registration_country;

        return $this;
    }

    /**
     * Gets purchasing_collective_number
     *
     * @return string|null
     */
    public function getPurchasingCollectiveNumber()
    {
        return $this->container['purchasing_collective_number'];
    }

    /**
     * Sets purchasing_collective_number
     *
     * @param string|null $purchasing_collective_number purchasing_collective_number
     *
     * @return self
     */
    public function setPurchasingCollectiveNumber($purchasing_collective_number)
    {
        if (is_null($purchasing_collective_number)) {
            throw new \InvalidArgumentException('non-nullable purchasing_collective_number cannot be null');
        }
        if ((mb_strlen($purchasing_collective_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_collective_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchasing_collective_number'] = $purchasing_collective_number;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate[]|null
     */
    public function _getPurchaseOrderItem()
    {
    return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeCreate[]|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function _setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }

    /**
     * Gets _purchase_order_note
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate[]|null
     */
    public function _getPurchaseOrderNote()
    {
    return $this->container['_purchase_order_note'];
    }

    /**
     * Sets _purchase_order_note
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderNoteTypeCreate[]|null $_purchase_order_note _purchase_order_note
     *
     * @return self
     */
    public function _setPurchaseOrderNote($_purchase_order_note)
    {
        if (is_null($_purchase_order_note)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_note cannot be null');
        }
        $this->container['_purchase_order_note'] = $_purchase_order_note;

        return $this;
    }

    /**
     * Gets _purchase_order_partner
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderPartnerTypeCreate[]|null
     */
    public function _getPurchaseOrderPartner()
    {
    return $this->container['_purchase_order_partner'];
    }

    /**
     * Sets _purchase_order_partner
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderPartnerTypeCreate[]|null $_purchase_order_partner _purchase_order_partner
     *
     * @return self
     */
    public function _setPurchaseOrderPartner($_purchase_order_partner)
    {
        if (is_null($_purchase_order_partner)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_partner cannot be null');
        }
        $this->container['_purchase_order_partner'] = $_purchase_order_partner;

        return $this;
    }

    /**
     * Gets _supplier_address
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate|null
     */
    public function _getSupplierAddress()
    {
    return $this->container['_supplier_address'];
    }

    /**
     * Sets _supplier_address
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate|null $_supplier_address _supplier_address
     *
     * @return self
     */
    public function _setSupplierAddress($_supplier_address)
    {
        if (is_null($_supplier_address)) {
            throw new \InvalidArgumentException('non-nullable _supplier_address cannot be null');
        }
        $this->container['_supplier_address'] = $_supplier_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


