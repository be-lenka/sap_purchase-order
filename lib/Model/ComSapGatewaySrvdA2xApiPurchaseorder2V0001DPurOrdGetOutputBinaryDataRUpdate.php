<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.D_PurOrdGetOutputBinaryDataR-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'mime_type' => 'string',
        'output_binary_data' => 'string',
        'output_channel' => 'string',
        'output_document_name' => 'string',
        'recipient' => 'string',
        'recipient_role' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'mime_type' => null,
        'output_binary_data' => 'base64url',
        'output_channel' => null,
        'output_document_name' => null,
        'recipient' => null,
        'recipient_role' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'mime_type' => false,
		'output_binary_data' => false,
		'output_channel' => false,
		'output_document_name' => false,
		'recipient' => false,
		'recipient_role' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mime_type' => 'MimeType',
        'output_binary_data' => 'OutputBinaryData',
        'output_channel' => 'OutputChannel',
        'output_document_name' => 'OutputDocumentName',
        'recipient' => 'Recipient',
        'recipient_role' => 'RecipientRole'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mime_type' => 'setMimeType',
        'output_binary_data' => 'setOutputBinaryData',
        'output_channel' => 'setOutputChannel',
        'output_document_name' => 'setOutputDocumentName',
        'recipient' => 'setRecipient',
        'recipient_role' => 'setRecipientRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mime_type' => 'getMimeType',
        'output_binary_data' => 'getOutputBinaryData',
        'output_channel' => 'getOutputChannel',
        'output_document_name' => 'getOutputDocumentName',
        'recipient' => 'getRecipient',
        'recipient_role' => 'getRecipientRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('mime_type', $data ?? [], null);
        $this->setIfExists('output_binary_data', $data ?? [], null);
        $this->setIfExists('output_channel', $data ?? [], null);
        $this->setIfExists('output_document_name', $data ?? [], null);
        $this->setIfExists('recipient', $data ?? [], null);
        $this->setIfExists('recipient_role', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['mime_type']) && (mb_strlen($this->container['mime_type']) > 128)) {
            $invalidProperties[] = "invalid value for 'mime_type', the character length must be smaller than or equal to 128.";
        }

        if (!is_null($this->container['output_channel']) && (mb_strlen($this->container['output_channel']) > 5)) {
            $invalidProperties[] = "invalid value for 'output_channel', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['output_document_name']) && (mb_strlen($this->container['output_document_name']) > 120)) {
            $invalidProperties[] = "invalid value for 'output_document_name', the character length must be smaller than or equal to 120.";
        }

        if (!is_null($this->container['recipient']) && (mb_strlen($this->container['recipient']) > 10)) {
            $invalidProperties[] = "invalid value for 'recipient', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['recipient_role']) && (mb_strlen($this->container['recipient_role']) > 2)) {
            $invalidProperties[] = "invalid value for 'recipient_role', the character length must be smaller than or equal to 2.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mime_type
     *
     * @return string|null
     */
    public function getMimeType()
    {
        return $this->container['mime_type'];
    }

    /**
     * Sets mime_type
     *
     * @param string|null $mime_type HTML content type
     *
     * @return self
     */
    public function setMimeType($mime_type)
    {
        if (is_null($mime_type)) {
            throw new \InvalidArgumentException('non-nullable mime_type cannot be null');
        }
        if ((mb_strlen($mime_type) > 128)) {
            throw new \InvalidArgumentException('invalid length for $mime_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate., must be smaller than or equal to 128.');
        }

        $this->container['mime_type'] = $mime_type;

        return $this;
    }

    /**
     * Gets output_binary_data
     *
     * @return string|null
     */
    public function getOutputBinaryData()
    {
        return $this->container['output_binary_data'];
    }

    /**
     * Sets output_binary_data
     *
     * @param string|null $output_binary_data output_binary_data
     *
     * @return self
     */
    public function setOutputBinaryData($output_binary_data)
    {
        if (is_null($output_binary_data)) {
            throw new \InvalidArgumentException('non-nullable output_binary_data cannot be null');
        }
        $this->container['output_binary_data'] = $output_binary_data;

        return $this;
    }

    /**
     * Gets output_channel
     *
     * @return string|null
     */
    public function getOutputChannel()
    {
        return $this->container['output_channel'];
    }

    /**
     * Sets output_channel
     *
     * @param string|null $output_channel Output Channel
     *
     * @return self
     */
    public function setOutputChannel($output_channel)
    {
        if (is_null($output_channel)) {
            throw new \InvalidArgumentException('non-nullable output_channel cannot be null');
        }
        if ((mb_strlen($output_channel) > 5)) {
            throw new \InvalidArgumentException('invalid length for $output_channel when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate., must be smaller than or equal to 5.');
        }

        $this->container['output_channel'] = $output_channel;

        return $this;
    }

    /**
     * Gets output_document_name
     *
     * @return string|null
     */
    public function getOutputDocumentName()
    {
        return $this->container['output_document_name'];
    }

    /**
     * Sets output_document_name
     *
     * @param string|null $output_document_name output_document_name
     *
     * @return self
     */
    public function setOutputDocumentName($output_document_name)
    {
        if (is_null($output_document_name)) {
            throw new \InvalidArgumentException('non-nullable output_document_name cannot be null');
        }
        if ((mb_strlen($output_document_name) > 120)) {
            throw new \InvalidArgumentException('invalid length for $output_document_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate., must be smaller than or equal to 120.');
        }

        $this->container['output_document_name'] = $output_document_name;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string|null
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string|null $recipient Recipient ID
     *
     * @return self
     */
    public function setRecipient($recipient)
    {
        if (is_null($recipient)) {
            throw new \InvalidArgumentException('non-nullable recipient cannot be null');
        }
        if ((mb_strlen($recipient) > 10)) {
            throw new \InvalidArgumentException('invalid length for $recipient when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate., must be smaller than or equal to 10.');
        }

        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets recipient_role
     *
     * @return string|null
     */
    public function getRecipientRole()
    {
        return $this->container['recipient_role'];
    }

    /**
     * Sets recipient_role
     *
     * @param string|null $recipient_role Role Code
     *
     * @return self
     */
    public function setRecipientRole($recipient_role)
    {
        if (is_null($recipient_role)) {
            throw new \InvalidArgumentException('non-nullable recipient_role cannot be null');
        }
        if ((mb_strlen($recipient_role) > 2)) {
            throw new \InvalidArgumentException('invalid length for $recipient_role when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001DPurOrdGetOutputBinaryDataRUpdate., must be smaller than or equal to 2.');
        }

        $this->container['recipient_role'] = $recipient_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


