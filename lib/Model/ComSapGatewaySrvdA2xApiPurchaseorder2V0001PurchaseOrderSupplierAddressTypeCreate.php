<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurchaseOrderSupplierAddress_Type-create';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'supplier_address_id' => 'string',
        'purchase_order' => 'string',
        'address_id' => 'string',
        'address_person_id' => 'string',
        'address_representation_code' => 'string',
        'correspondence_language' => 'string',
        'prfrd_comm_medium_type' => 'string',
        'addressee_full_name' => 'string',
        'organization_name1' => 'string',
        'organization_name2' => 'string',
        'organization_name3' => 'string',
        'organization_name4' => 'string',
        'address_search_term1' => 'string',
        'address_search_term2' => 'string',
        'city_name' => 'string',
        'district_name' => 'string',
        'village_name' => 'string',
        'postal_code' => 'string',
        'company_postal_code' => 'string',
        'street_name' => 'string',
        'street_prefix_name1' => 'string',
        'street_prefix_name2' => 'string',
        'street_suffix_name1' => 'string',
        'street_suffix_name2' => 'string',
        'house_number' => 'string',
        'house_number_supplement_text' => 'string',
        'building' => 'string',
        'floor' => 'string',
        'room_number' => 'string',
        'country' => 'string',
        'region' => 'string',
        'form_of_address' => 'string',
        'tax_jurisdiction' => 'string',
        'transport_zone' => 'string',
        'po_box' => 'string',
        'po_box_is_without_number' => 'bool',
        'po_box_postal_code' => 'string',
        'po_box_lobby_name' => 'string',
        'po_box_deviating_city_name' => 'string',
        'po_box_deviating_region' => 'string',
        'po_box_deviating_country' => 'string',
        'care_of_name' => 'string',
        'delivery_service_type_code' => 'string',
        'delivery_service_number' => 'string',
        'address_time_zone' => 'string',
        'email_address' => 'string',
        'regional_structure_check_status' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]',
        '_purchase_order_tp' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'supplier_address_id' => null,
        'purchase_order' => null,
        'address_id' => null,
        'address_person_id' => null,
        'address_representation_code' => null,
        'correspondence_language' => null,
        'prfrd_comm_medium_type' => null,
        'addressee_full_name' => null,
        'organization_name1' => null,
        'organization_name2' => null,
        'organization_name3' => null,
        'organization_name4' => null,
        'address_search_term1' => null,
        'address_search_term2' => null,
        'city_name' => null,
        'district_name' => null,
        'village_name' => null,
        'postal_code' => null,
        'company_postal_code' => null,
        'street_name' => null,
        'street_prefix_name1' => null,
        'street_prefix_name2' => null,
        'street_suffix_name1' => null,
        'street_suffix_name2' => null,
        'house_number' => null,
        'house_number_supplement_text' => null,
        'building' => null,
        'floor' => null,
        'room_number' => null,
        'country' => null,
        'region' => null,
        'form_of_address' => null,
        'tax_jurisdiction' => null,
        'transport_zone' => null,
        'po_box' => null,
        'po_box_is_without_number' => null,
        'po_box_postal_code' => null,
        'po_box_lobby_name' => null,
        'po_box_deviating_city_name' => null,
        'po_box_deviating_region' => null,
        'po_box_deviating_country' => null,
        'care_of_name' => null,
        'delivery_service_type_code' => null,
        'delivery_service_number' => null,
        'address_time_zone' => null,
        'email_address' => null,
        'regional_structure_check_status' => null,
        'sap__messages' => null,
        '_purchase_order_tp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'supplier_address_id' => false,
		'purchase_order' => false,
		'address_id' => false,
		'address_person_id' => false,
		'address_representation_code' => false,
		'correspondence_language' => false,
		'prfrd_comm_medium_type' => false,
		'addressee_full_name' => false,
		'organization_name1' => false,
		'organization_name2' => false,
		'organization_name3' => false,
		'organization_name4' => false,
		'address_search_term1' => false,
		'address_search_term2' => false,
		'city_name' => false,
		'district_name' => false,
		'village_name' => false,
		'postal_code' => false,
		'company_postal_code' => false,
		'street_name' => false,
		'street_prefix_name1' => false,
		'street_prefix_name2' => false,
		'street_suffix_name1' => false,
		'street_suffix_name2' => false,
		'house_number' => false,
		'house_number_supplement_text' => false,
		'building' => false,
		'floor' => false,
		'room_number' => false,
		'country' => false,
		'region' => false,
		'form_of_address' => false,
		'tax_jurisdiction' => false,
		'transport_zone' => false,
		'po_box' => false,
		'po_box_is_without_number' => false,
		'po_box_postal_code' => false,
		'po_box_lobby_name' => false,
		'po_box_deviating_city_name' => false,
		'po_box_deviating_region' => false,
		'po_box_deviating_country' => false,
		'care_of_name' => false,
		'delivery_service_type_code' => false,
		'delivery_service_number' => false,
		'address_time_zone' => false,
		'email_address' => false,
		'regional_structure_check_status' => false,
		'sap__messages' => false,
		'_purchase_order_tp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'supplier_address_id' => 'SupplierAddressID',
        'purchase_order' => 'PurchaseOrder',
        'address_id' => 'AddressID',
        'address_person_id' => 'AddressPersonID',
        'address_representation_code' => 'AddressRepresentationCode',
        'correspondence_language' => 'CorrespondenceLanguage',
        'prfrd_comm_medium_type' => 'PrfrdCommMediumType',
        'addressee_full_name' => 'AddresseeFullName',
        'organization_name1' => 'OrganizationName1',
        'organization_name2' => 'OrganizationName2',
        'organization_name3' => 'OrganizationName3',
        'organization_name4' => 'OrganizationName4',
        'address_search_term1' => 'AddressSearchTerm1',
        'address_search_term2' => 'AddressSearchTerm2',
        'city_name' => 'CityName',
        'district_name' => 'DistrictName',
        'village_name' => 'VillageName',
        'postal_code' => 'PostalCode',
        'company_postal_code' => 'CompanyPostalCode',
        'street_name' => 'StreetName',
        'street_prefix_name1' => 'StreetPrefixName1',
        'street_prefix_name2' => 'StreetPrefixName2',
        'street_suffix_name1' => 'StreetSuffixName1',
        'street_suffix_name2' => 'StreetSuffixName2',
        'house_number' => 'HouseNumber',
        'house_number_supplement_text' => 'HouseNumberSupplementText',
        'building' => 'Building',
        'floor' => 'Floor',
        'room_number' => 'RoomNumber',
        'country' => 'Country',
        'region' => 'Region',
        'form_of_address' => 'FormOfAddress',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'transport_zone' => 'TransportZone',
        'po_box' => 'POBox',
        'po_box_is_without_number' => 'POBoxIsWithoutNumber',
        'po_box_postal_code' => 'POBoxPostalCode',
        'po_box_lobby_name' => 'POBoxLobbyName',
        'po_box_deviating_city_name' => 'POBoxDeviatingCityName',
        'po_box_deviating_region' => 'POBoxDeviatingRegion',
        'po_box_deviating_country' => 'POBoxDeviatingCountry',
        'care_of_name' => 'CareOfName',
        'delivery_service_type_code' => 'DeliveryServiceTypeCode',
        'delivery_service_number' => 'DeliveryServiceNumber',
        'address_time_zone' => 'AddressTimeZone',
        'email_address' => 'EmailAddress',
        'regional_structure_check_status' => 'RegionalStructureCheckStatus',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order_tp' => '_PurchaseOrderTP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'supplier_address_id' => 'setSupplierAddressId',
        'purchase_order' => 'setPurchaseOrder',
        'address_id' => 'setAddressId',
        'address_person_id' => 'setAddressPersonId',
        'address_representation_code' => 'setAddressRepresentationCode',
        'correspondence_language' => 'setCorrespondenceLanguage',
        'prfrd_comm_medium_type' => 'setPrfrdCommMediumType',
        'addressee_full_name' => 'setAddresseeFullName',
        'organization_name1' => 'setOrganizationName1',
        'organization_name2' => 'setOrganizationName2',
        'organization_name3' => 'setOrganizationName3',
        'organization_name4' => 'setOrganizationName4',
        'address_search_term1' => 'setAddressSearchTerm1',
        'address_search_term2' => 'setAddressSearchTerm2',
        'city_name' => 'setCityName',
        'district_name' => 'setDistrictName',
        'village_name' => 'setVillageName',
        'postal_code' => 'setPostalCode',
        'company_postal_code' => 'setCompanyPostalCode',
        'street_name' => 'setStreetName',
        'street_prefix_name1' => 'setStreetPrefixName1',
        'street_prefix_name2' => 'setStreetPrefixName2',
        'street_suffix_name1' => 'setStreetSuffixName1',
        'street_suffix_name2' => 'setStreetSuffixName2',
        'house_number' => 'setHouseNumber',
        'house_number_supplement_text' => 'setHouseNumberSupplementText',
        'building' => 'setBuilding',
        'floor' => 'setFloor',
        'room_number' => 'setRoomNumber',
        'country' => 'setCountry',
        'region' => 'setRegion',
        'form_of_address' => 'setFormOfAddress',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'transport_zone' => 'setTransportZone',
        'po_box' => 'setPoBox',
        'po_box_is_without_number' => 'setPoBoxIsWithoutNumber',
        'po_box_postal_code' => 'setPoBoxPostalCode',
        'po_box_lobby_name' => 'setPoBoxLobbyName',
        'po_box_deviating_city_name' => 'setPoBoxDeviatingCityName',
        'po_box_deviating_region' => 'setPoBoxDeviatingRegion',
        'po_box_deviating_country' => 'setPoBoxDeviatingCountry',
        'care_of_name' => 'setCareOfName',
        'delivery_service_type_code' => 'setDeliveryServiceTypeCode',
        'delivery_service_number' => 'setDeliveryServiceNumber',
        'address_time_zone' => 'setAddressTimeZone',
        'email_address' => 'setEmailAddress',
        'regional_structure_check_status' => 'setRegionalStructureCheckStatus',
        'sap__messages' => 'setSapMessages',
        '_purchase_order_tp' => 'setPurchaseOrderTp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'supplier_address_id' => 'getSupplierAddressId',
        'purchase_order' => 'getPurchaseOrder',
        'address_id' => 'getAddressId',
        'address_person_id' => 'getAddressPersonId',
        'address_representation_code' => 'getAddressRepresentationCode',
        'correspondence_language' => 'getCorrespondenceLanguage',
        'prfrd_comm_medium_type' => 'getPrfrdCommMediumType',
        'addressee_full_name' => 'getAddresseeFullName',
        'organization_name1' => 'getOrganizationName1',
        'organization_name2' => 'getOrganizationName2',
        'organization_name3' => 'getOrganizationName3',
        'organization_name4' => 'getOrganizationName4',
        'address_search_term1' => 'getAddressSearchTerm1',
        'address_search_term2' => 'getAddressSearchTerm2',
        'city_name' => 'getCityName',
        'district_name' => 'getDistrictName',
        'village_name' => 'getVillageName',
        'postal_code' => 'getPostalCode',
        'company_postal_code' => 'getCompanyPostalCode',
        'street_name' => 'getStreetName',
        'street_prefix_name1' => 'getStreetPrefixName1',
        'street_prefix_name2' => 'getStreetPrefixName2',
        'street_suffix_name1' => 'getStreetSuffixName1',
        'street_suffix_name2' => 'getStreetSuffixName2',
        'house_number' => 'getHouseNumber',
        'house_number_supplement_text' => 'getHouseNumberSupplementText',
        'building' => 'getBuilding',
        'floor' => 'getFloor',
        'room_number' => 'getRoomNumber',
        'country' => 'getCountry',
        'region' => 'getRegion',
        'form_of_address' => 'getFormOfAddress',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'transport_zone' => 'getTransportZone',
        'po_box' => 'getPoBox',
        'po_box_is_without_number' => 'getPoBoxIsWithoutNumber',
        'po_box_postal_code' => 'getPoBoxPostalCode',
        'po_box_lobby_name' => 'getPoBoxLobbyName',
        'po_box_deviating_city_name' => 'getPoBoxDeviatingCityName',
        'po_box_deviating_region' => 'getPoBoxDeviatingRegion',
        'po_box_deviating_country' => 'getPoBoxDeviatingCountry',
        'care_of_name' => 'getCareOfName',
        'delivery_service_type_code' => 'getDeliveryServiceTypeCode',
        'delivery_service_number' => 'getDeliveryServiceNumber',
        'address_time_zone' => 'getAddressTimeZone',
        'email_address' => 'getEmailAddress',
        'regional_structure_check_status' => 'getRegionalStructureCheckStatus',
        'sap__messages' => 'getSapMessages',
        '_purchase_order_tp' => 'getPurchaseOrderTp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('supplier_address_id', $data ?? [], null);
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('address_id', $data ?? [], null);
        $this->setIfExists('address_person_id', $data ?? [], null);
        $this->setIfExists('address_representation_code', $data ?? [], null);
        $this->setIfExists('correspondence_language', $data ?? [], null);
        $this->setIfExists('prfrd_comm_medium_type', $data ?? [], null);
        $this->setIfExists('addressee_full_name', $data ?? [], null);
        $this->setIfExists('organization_name1', $data ?? [], null);
        $this->setIfExists('organization_name2', $data ?? [], null);
        $this->setIfExists('organization_name3', $data ?? [], null);
        $this->setIfExists('organization_name4', $data ?? [], null);
        $this->setIfExists('address_search_term1', $data ?? [], null);
        $this->setIfExists('address_search_term2', $data ?? [], null);
        $this->setIfExists('city_name', $data ?? [], null);
        $this->setIfExists('district_name', $data ?? [], null);
        $this->setIfExists('village_name', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('company_postal_code', $data ?? [], null);
        $this->setIfExists('street_name', $data ?? [], null);
        $this->setIfExists('street_prefix_name1', $data ?? [], null);
        $this->setIfExists('street_prefix_name2', $data ?? [], null);
        $this->setIfExists('street_suffix_name1', $data ?? [], null);
        $this->setIfExists('street_suffix_name2', $data ?? [], null);
        $this->setIfExists('house_number', $data ?? [], null);
        $this->setIfExists('house_number_supplement_text', $data ?? [], null);
        $this->setIfExists('building', $data ?? [], null);
        $this->setIfExists('floor', $data ?? [], null);
        $this->setIfExists('room_number', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('form_of_address', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('transport_zone', $data ?? [], null);
        $this->setIfExists('po_box', $data ?? [], null);
        $this->setIfExists('po_box_is_without_number', $data ?? [], null);
        $this->setIfExists('po_box_postal_code', $data ?? [], null);
        $this->setIfExists('po_box_lobby_name', $data ?? [], null);
        $this->setIfExists('po_box_deviating_city_name', $data ?? [], null);
        $this->setIfExists('po_box_deviating_region', $data ?? [], null);
        $this->setIfExists('po_box_deviating_country', $data ?? [], null);
        $this->setIfExists('care_of_name', $data ?? [], null);
        $this->setIfExists('delivery_service_type_code', $data ?? [], null);
        $this->setIfExists('delivery_service_number', $data ?? [], null);
        $this->setIfExists('address_time_zone', $data ?? [], null);
        $this->setIfExists('email_address', $data ?? [], null);
        $this->setIfExists('regional_structure_check_status', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order_tp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['supplier_address_id'] === null) {
            $invalidProperties[] = "'supplier_address_id' can't be null";
        }
        if ((mb_strlen($this->container['supplier_address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_address_id', the character length must be smaller than or equal to 10.";
        }

        if ($this->container['purchase_order'] === null) {
            $invalidProperties[] = "'purchase_order' can't be null";
        }
        if ((mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_id']) && (mb_strlen($this->container['address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_person_id']) && (mb_strlen($this->container['address_person_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'address_person_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_representation_code']) && (mb_strlen($this->container['address_representation_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'address_representation_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['correspondence_language']) && (mb_strlen($this->container['correspondence_language']) > 2)) {
            $invalidProperties[] = "invalid value for 'correspondence_language', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['prfrd_comm_medium_type']) && (mb_strlen($this->container['prfrd_comm_medium_type']) > 3)) {
            $invalidProperties[] = "invalid value for 'prfrd_comm_medium_type', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['addressee_full_name']) && (mb_strlen($this->container['addressee_full_name']) > 80)) {
            $invalidProperties[] = "invalid value for 'addressee_full_name', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['organization_name1']) && (mb_strlen($this->container['organization_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name2']) && (mb_strlen($this->container['organization_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name3']) && (mb_strlen($this->container['organization_name3']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name3', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['organization_name4']) && (mb_strlen($this->container['organization_name4']) > 40)) {
            $invalidProperties[] = "invalid value for 'organization_name4', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['address_search_term1']) && (mb_strlen($this->container['address_search_term1']) > 20)) {
            $invalidProperties[] = "invalid value for 'address_search_term1', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['address_search_term2']) && (mb_strlen($this->container['address_search_term2']) > 20)) {
            $invalidProperties[] = "invalid value for 'address_search_term2', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['city_name']) && (mb_strlen($this->container['city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['district_name']) && (mb_strlen($this->container['district_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'district_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['village_name']) && (mb_strlen($this->container['village_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'village_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['postal_code']) && (mb_strlen($this->container['postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['company_postal_code']) && (mb_strlen($this->container['company_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'company_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['street_name']) && (mb_strlen($this->container['street_name']) > 60)) {
            $invalidProperties[] = "invalid value for 'street_name', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['street_prefix_name1']) && (mb_strlen($this->container['street_prefix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_prefix_name2']) && (mb_strlen($this->container['street_prefix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_prefix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name1']) && (mb_strlen($this->container['street_suffix_name1']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name1', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['street_suffix_name2']) && (mb_strlen($this->container['street_suffix_name2']) > 40)) {
            $invalidProperties[] = "invalid value for 'street_suffix_name2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['house_number']) && (mb_strlen($this->container['house_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['house_number_supplement_text']) && (mb_strlen($this->container['house_number_supplement_text']) > 10)) {
            $invalidProperties[] = "invalid value for 'house_number_supplement_text', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['building']) && (mb_strlen($this->container['building']) > 20)) {
            $invalidProperties[] = "invalid value for 'building', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['floor']) && (mb_strlen($this->container['floor']) > 10)) {
            $invalidProperties[] = "invalid value for 'floor', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['room_number']) && (mb_strlen($this->container['room_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'room_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 3)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['region']) && (mb_strlen($this->container['region']) > 3)) {
            $invalidProperties[] = "invalid value for 'region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['form_of_address']) && (mb_strlen($this->container['form_of_address']) > 4)) {
            $invalidProperties[] = "invalid value for 'form_of_address', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['transport_zone']) && (mb_strlen($this->container['transport_zone']) > 10)) {
            $invalidProperties[] = "invalid value for 'transport_zone', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box']) && (mb_strlen($this->container['po_box']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box_postal_code']) && (mb_strlen($this->container['po_box_postal_code']) > 10)) {
            $invalidProperties[] = "invalid value for 'po_box_postal_code', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['po_box_lobby_name']) && (mb_strlen($this->container['po_box_lobby_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_lobby_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_deviating_city_name']) && (mb_strlen($this->container['po_box_deviating_city_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_city_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['po_box_deviating_region']) && (mb_strlen($this->container['po_box_deviating_region']) > 3)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_region', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['po_box_deviating_country']) && (mb_strlen($this->container['po_box_deviating_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'po_box_deviating_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['care_of_name']) && (mb_strlen($this->container['care_of_name']) > 40)) {
            $invalidProperties[] = "invalid value for 'care_of_name', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['delivery_service_type_code']) && (mb_strlen($this->container['delivery_service_type_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_service_type_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['delivery_service_number']) && (mb_strlen($this->container['delivery_service_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_service_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['address_time_zone']) && (mb_strlen($this->container['address_time_zone']) > 6)) {
            $invalidProperties[] = "invalid value for 'address_time_zone', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['email_address']) && (mb_strlen($this->container['email_address']) > 241)) {
            $invalidProperties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 241.";
        }

        if (!is_null($this->container['regional_structure_check_status']) && (mb_strlen($this->container['regional_structure_check_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'regional_structure_check_status', the character length must be smaller than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets supplier_address_id
     *
     * @return string
     */
    public function getSupplierAddressId()
    {
        return $this->container['supplier_address_id'];
    }

    /**
     * Sets supplier_address_id
     *
     * @param string $supplier_address_id supplier_address_id
     *
     * @return self
     */
    public function setSupplierAddressId($supplier_address_id)
    {
        if (is_null($supplier_address_id)) {
            throw new \InvalidArgumentException('non-nullable supplier_address_id cannot be null');
        }
        if ((mb_strlen($supplier_address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_address_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['supplier_address_id'] = $supplier_address_id;

        return $this;
    }

    /**
     * Gets purchase_order
     *
     * @return string
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string $purchase_order Purchase Order Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets address_id
     *
     * @return string|null
     */
    public function getAddressId()
    {
        return $this->container['address_id'];
    }

    /**
     * Sets address_id
     *
     * @param string|null $address_id address_id
     *
     * @return self
     */
    public function setAddressId($address_id)
    {
        if (is_null($address_id)) {
            throw new \InvalidArgumentException('non-nullable address_id cannot be null');
        }
        if ((mb_strlen($address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['address_id'] = $address_id;

        return $this;
    }

    /**
     * Gets address_person_id
     *
     * @return string|null
     */
    public function getAddressPersonId()
    {
        return $this->container['address_person_id'];
    }

    /**
     * Sets address_person_id
     *
     * @param string|null $address_person_id address_person_id
     *
     * @return self
     */
    public function setAddressPersonId($address_person_id)
    {
        if (is_null($address_person_id)) {
            throw new \InvalidArgumentException('non-nullable address_person_id cannot be null');
        }
        if ((mb_strlen($address_person_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $address_person_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['address_person_id'] = $address_person_id;

        return $this;
    }

    /**
     * Gets address_representation_code
     *
     * @return string|null
     */
    public function getAddressRepresentationCode()
    {
        return $this->container['address_representation_code'];
    }

    /**
     * Sets address_representation_code
     *
     * @param string|null $address_representation_code Version ID for International Addresses
     *
     * @return self
     */
    public function setAddressRepresentationCode($address_representation_code)
    {
        if (is_null($address_representation_code)) {
            throw new \InvalidArgumentException('non-nullable address_representation_code cannot be null');
        }
        if ((mb_strlen($address_representation_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $address_representation_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['address_representation_code'] = $address_representation_code;

        return $this;
    }

    /**
     * Gets correspondence_language
     *
     * @return string|null
     */
    public function getCorrespondenceLanguage()
    {
        return $this->container['correspondence_language'];
    }

    /**
     * Sets correspondence_language
     *
     * @param string|null $correspondence_language correspondence_language
     *
     * @return self
     */
    public function setCorrespondenceLanguage($correspondence_language)
    {
        if (is_null($correspondence_language)) {
            throw new \InvalidArgumentException('non-nullable correspondence_language cannot be null');
        }
        if ((mb_strlen($correspondence_language) > 2)) {
            throw new \InvalidArgumentException('invalid length for $correspondence_language when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 2.');
        }

        $this->container['correspondence_language'] = $correspondence_language;

        return $this;
    }

    /**
     * Gets prfrd_comm_medium_type
     *
     * @return string|null
     */
    public function getPrfrdCommMediumType()
    {
        return $this->container['prfrd_comm_medium_type'];
    }

    /**
     * Sets prfrd_comm_medium_type
     *
     * @param string|null $prfrd_comm_medium_type Communication Method (Key) (Business Address Services)
     *
     * @return self
     */
    public function setPrfrdCommMediumType($prfrd_comm_medium_type)
    {
        if (is_null($prfrd_comm_medium_type)) {
            throw new \InvalidArgumentException('non-nullable prfrd_comm_medium_type cannot be null');
        }
        if ((mb_strlen($prfrd_comm_medium_type) > 3)) {
            throw new \InvalidArgumentException('invalid length for $prfrd_comm_medium_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['prfrd_comm_medium_type'] = $prfrd_comm_medium_type;

        return $this;
    }

    /**
     * Gets addressee_full_name
     *
     * @return string|null
     */
    public function getAddresseeFullName()
    {
        return $this->container['addressee_full_name'];
    }

    /**
     * Sets addressee_full_name
     *
     * @param string|null $addressee_full_name Full Name of Person
     *
     * @return self
     */
    public function setAddresseeFullName($addressee_full_name)
    {
        if (is_null($addressee_full_name)) {
            throw new \InvalidArgumentException('non-nullable addressee_full_name cannot be null');
        }
        if ((mb_strlen($addressee_full_name) > 80)) {
            throw new \InvalidArgumentException('invalid length for $addressee_full_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 80.');
        }

        $this->container['addressee_full_name'] = $addressee_full_name;

        return $this;
    }

    /**
     * Gets organization_name1
     *
     * @return string|null
     */
    public function getOrganizationName1()
    {
        return $this->container['organization_name1'];
    }

    /**
     * Sets organization_name1
     *
     * @param string|null $organization_name1 Name 1
     *
     * @return self
     */
    public function setOrganizationName1($organization_name1)
    {
        if (is_null($organization_name1)) {
            throw new \InvalidArgumentException('non-nullable organization_name1 cannot be null');
        }
        if ((mb_strlen($organization_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name1'] = $organization_name1;

        return $this;
    }

    /**
     * Gets organization_name2
     *
     * @return string|null
     */
    public function getOrganizationName2()
    {
        return $this->container['organization_name2'];
    }

    /**
     * Sets organization_name2
     *
     * @param string|null $organization_name2 organization_name2
     *
     * @return self
     */
    public function setOrganizationName2($organization_name2)
    {
        if (is_null($organization_name2)) {
            throw new \InvalidArgumentException('non-nullable organization_name2 cannot be null');
        }
        if ((mb_strlen($organization_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name2'] = $organization_name2;

        return $this;
    }

    /**
     * Gets organization_name3
     *
     * @return string|null
     */
    public function getOrganizationName3()
    {
        return $this->container['organization_name3'];
    }

    /**
     * Sets organization_name3
     *
     * @param string|null $organization_name3 organization_name3
     *
     * @return self
     */
    public function setOrganizationName3($organization_name3)
    {
        if (is_null($organization_name3)) {
            throw new \InvalidArgumentException('non-nullable organization_name3 cannot be null');
        }
        if ((mb_strlen($organization_name3) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name3 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name3'] = $organization_name3;

        return $this;
    }

    /**
     * Gets organization_name4
     *
     * @return string|null
     */
    public function getOrganizationName4()
    {
        return $this->container['organization_name4'];
    }

    /**
     * Sets organization_name4
     *
     * @param string|null $organization_name4 organization_name4
     *
     * @return self
     */
    public function setOrganizationName4($organization_name4)
    {
        if (is_null($organization_name4)) {
            throw new \InvalidArgumentException('non-nullable organization_name4 cannot be null');
        }
        if ((mb_strlen($organization_name4) > 40)) {
            throw new \InvalidArgumentException('invalid length for $organization_name4 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['organization_name4'] = $organization_name4;

        return $this;
    }

    /**
     * Gets address_search_term1
     *
     * @return string|null
     */
    public function getAddressSearchTerm1()
    {
        return $this->container['address_search_term1'];
    }

    /**
     * Sets address_search_term1
     *
     * @param string|null $address_search_term1 address_search_term1
     *
     * @return self
     */
    public function setAddressSearchTerm1($address_search_term1)
    {
        if (is_null($address_search_term1)) {
            throw new \InvalidArgumentException('non-nullable address_search_term1 cannot be null');
        }
        if ((mb_strlen($address_search_term1) > 20)) {
            throw new \InvalidArgumentException('invalid length for $address_search_term1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['address_search_term1'] = $address_search_term1;

        return $this;
    }

    /**
     * Gets address_search_term2
     *
     * @return string|null
     */
    public function getAddressSearchTerm2()
    {
        return $this->container['address_search_term2'];
    }

    /**
     * Sets address_search_term2
     *
     * @param string|null $address_search_term2 address_search_term2
     *
     * @return self
     */
    public function setAddressSearchTerm2($address_search_term2)
    {
        if (is_null($address_search_term2)) {
            throw new \InvalidArgumentException('non-nullable address_search_term2 cannot be null');
        }
        if ((mb_strlen($address_search_term2) > 20)) {
            throw new \InvalidArgumentException('invalid length for $address_search_term2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['address_search_term2'] = $address_search_term2;

        return $this;
    }

    /**
     * Gets city_name
     *
     * @return string|null
     */
    public function getCityName()
    {
        return $this->container['city_name'];
    }

    /**
     * Sets city_name
     *
     * @param string|null $city_name city_name
     *
     * @return self
     */
    public function setCityName($city_name)
    {
        if (is_null($city_name)) {
            throw new \InvalidArgumentException('non-nullable city_name cannot be null');
        }
        if ((mb_strlen($city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $city_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['city_name'] = $city_name;

        return $this;
    }

    /**
     * Gets district_name
     *
     * @return string|null
     */
    public function getDistrictName()
    {
        return $this->container['district_name'];
    }

    /**
     * Sets district_name
     *
     * @param string|null $district_name district_name
     *
     * @return self
     */
    public function setDistrictName($district_name)
    {
        if (is_null($district_name)) {
            throw new \InvalidArgumentException('non-nullable district_name cannot be null');
        }
        if ((mb_strlen($district_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $district_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['district_name'] = $district_name;

        return $this;
    }

    /**
     * Gets village_name
     *
     * @return string|null
     */
    public function getVillageName()
    {
        return $this->container['village_name'];
    }

    /**
     * Sets village_name
     *
     * @param string|null $village_name City (different from postal city)
     *
     * @return self
     */
    public function setVillageName($village_name)
    {
        if (is_null($village_name)) {
            throw new \InvalidArgumentException('non-nullable village_name cannot be null');
        }
        if ((mb_strlen($village_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $village_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['village_name'] = $village_name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code City Postal Code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {
        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }
        if ((mb_strlen($postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postal_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets company_postal_code
     *
     * @return string|null
     */
    public function getCompanyPostalCode()
    {
        return $this->container['company_postal_code'];
    }

    /**
     * Sets company_postal_code
     *
     * @param string|null $company_postal_code Company Postal Code (for Large Customers)
     *
     * @return self
     */
    public function setCompanyPostalCode($company_postal_code)
    {
        if (is_null($company_postal_code)) {
            throw new \InvalidArgumentException('non-nullable company_postal_code cannot be null');
        }
        if ((mb_strlen($company_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $company_postal_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['company_postal_code'] = $company_postal_code;

        return $this;
    }

    /**
     * Gets street_name
     *
     * @return string|null
     */
    public function getStreetName()
    {
        return $this->container['street_name'];
    }

    /**
     * Sets street_name
     *
     * @param string|null $street_name street_name
     *
     * @return self
     */
    public function setStreetName($street_name)
    {
        if (is_null($street_name)) {
            throw new \InvalidArgumentException('non-nullable street_name cannot be null');
        }
        if ((mb_strlen($street_name) > 60)) {
            throw new \InvalidArgumentException('invalid length for $street_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 60.');
        }

        $this->container['street_name'] = $street_name;

        return $this;
    }

    /**
     * Gets street_prefix_name1
     *
     * @return string|null
     */
    public function getStreetPrefixName1()
    {
        return $this->container['street_prefix_name1'];
    }

    /**
     * Sets street_prefix_name1
     *
     * @param string|null $street_prefix_name1 street_prefix_name1
     *
     * @return self
     */
    public function setStreetPrefixName1($street_prefix_name1)
    {
        if (is_null($street_prefix_name1)) {
            throw new \InvalidArgumentException('non-nullable street_prefix_name1 cannot be null');
        }
        if ((mb_strlen($street_prefix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name1'] = $street_prefix_name1;

        return $this;
    }

    /**
     * Gets street_prefix_name2
     *
     * @return string|null
     */
    public function getStreetPrefixName2()
    {
        return $this->container['street_prefix_name2'];
    }

    /**
     * Sets street_prefix_name2
     *
     * @param string|null $street_prefix_name2 street_prefix_name2
     *
     * @return self
     */
    public function setStreetPrefixName2($street_prefix_name2)
    {
        if (is_null($street_prefix_name2)) {
            throw new \InvalidArgumentException('non-nullable street_prefix_name2 cannot be null');
        }
        if ((mb_strlen($street_prefix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_prefix_name2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_prefix_name2'] = $street_prefix_name2;

        return $this;
    }

    /**
     * Gets street_suffix_name1
     *
     * @return string|null
     */
    public function getStreetSuffixName1()
    {
        return $this->container['street_suffix_name1'];
    }

    /**
     * Sets street_suffix_name1
     *
     * @param string|null $street_suffix_name1 street_suffix_name1
     *
     * @return self
     */
    public function setStreetSuffixName1($street_suffix_name1)
    {
        if (is_null($street_suffix_name1)) {
            throw new \InvalidArgumentException('non-nullable street_suffix_name1 cannot be null');
        }
        if ((mb_strlen($street_suffix_name1) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name1'] = $street_suffix_name1;

        return $this;
    }

    /**
     * Gets street_suffix_name2
     *
     * @return string|null
     */
    public function getStreetSuffixName2()
    {
        return $this->container['street_suffix_name2'];
    }

    /**
     * Sets street_suffix_name2
     *
     * @param string|null $street_suffix_name2 street_suffix_name2
     *
     * @return self
     */
    public function setStreetSuffixName2($street_suffix_name2)
    {
        if (is_null($street_suffix_name2)) {
            throw new \InvalidArgumentException('non-nullable street_suffix_name2 cannot be null');
        }
        if ((mb_strlen($street_suffix_name2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $street_suffix_name2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['street_suffix_name2'] = $street_suffix_name2;

        return $this;
    }

    /**
     * Gets house_number
     *
     * @return string|null
     */
    public function getHouseNumber()
    {
        return $this->container['house_number'];
    }

    /**
     * Sets house_number
     *
     * @param string|null $house_number house_number
     *
     * @return self
     */
    public function setHouseNumber($house_number)
    {
        if (is_null($house_number)) {
            throw new \InvalidArgumentException('non-nullable house_number cannot be null');
        }
        if ((mb_strlen($house_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number'] = $house_number;

        return $this;
    }

    /**
     * Gets house_number_supplement_text
     *
     * @return string|null
     */
    public function getHouseNumberSupplementText()
    {
        return $this->container['house_number_supplement_text'];
    }

    /**
     * Sets house_number_supplement_text
     *
     * @param string|null $house_number_supplement_text House number supplement
     *
     * @return self
     */
    public function setHouseNumberSupplementText($house_number_supplement_text)
    {
        if (is_null($house_number_supplement_text)) {
            throw new \InvalidArgumentException('non-nullable house_number_supplement_text cannot be null');
        }
        if ((mb_strlen($house_number_supplement_text) > 10)) {
            throw new \InvalidArgumentException('invalid length for $house_number_supplement_text when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['house_number_supplement_text'] = $house_number_supplement_text;

        return $this;
    }

    /**
     * Gets building
     *
     * @return string|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param string|null $building Building (Number or Code)
     *
     * @return self
     */
    public function setBuilding($building)
    {
        if (is_null($building)) {
            throw new \InvalidArgumentException('non-nullable building cannot be null');
        }
        if ((mb_strlen($building) > 20)) {
            throw new \InvalidArgumentException('invalid length for $building when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 20.');
        }

        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets floor
     *
     * @return string|null
     */
    public function getFloor()
    {
        return $this->container['floor'];
    }

    /**
     * Sets floor
     *
     * @param string|null $floor Floor in building
     *
     * @return self
     */
    public function setFloor($floor)
    {
        if (is_null($floor)) {
            throw new \InvalidArgumentException('non-nullable floor cannot be null');
        }
        if ((mb_strlen($floor) > 10)) {
            throw new \InvalidArgumentException('invalid length for $floor when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['floor'] = $floor;

        return $this;
    }

    /**
     * Gets room_number
     *
     * @return string|null
     */
    public function getRoomNumber()
    {
        return $this->container['room_number'];
    }

    /**
     * Sets room_number
     *
     * @param string|null $room_number Room or Apartment Number
     *
     * @return self
     */
    public function setRoomNumber($room_number)
    {
        if (is_null($room_number)) {
            throw new \InvalidArgumentException('non-nullable room_number cannot be null');
        }
        if ((mb_strlen($room_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $room_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['room_number'] = $room_number;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        if ((mb_strlen($country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $country when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region Region (State, Province, County)
     *
     * @return self
     */
    public function setRegion($region)
    {
        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }
        if ((mb_strlen($region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $region when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets form_of_address
     *
     * @return string|null
     */
    public function getFormOfAddress()
    {
        return $this->container['form_of_address'];
    }

    /**
     * Sets form_of_address
     *
     * @param string|null $form_of_address Form-of-Address Key
     *
     * @return self
     */
    public function setFormOfAddress($form_of_address)
    {
        if (is_null($form_of_address)) {
            throw new \InvalidArgumentException('non-nullable form_of_address cannot be null');
        }
        if ((mb_strlen($form_of_address) > 4)) {
            throw new \InvalidArgumentException('invalid length for $form_of_address when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['form_of_address'] = $form_of_address;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable tax_jurisdiction cannot be null');
        }
        if ((mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets transport_zone
     *
     * @return string|null
     */
    public function getTransportZone()
    {
        return $this->container['transport_zone'];
    }

    /**
     * Sets transport_zone
     *
     * @param string|null $transport_zone Transportation zone to or from which the goods are delivered
     *
     * @return self
     */
    public function setTransportZone($transport_zone)
    {
        if (is_null($transport_zone)) {
            throw new \InvalidArgumentException('non-nullable transport_zone cannot be null');
        }
        if ((mb_strlen($transport_zone) > 10)) {
            throw new \InvalidArgumentException('invalid length for $transport_zone when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['transport_zone'] = $transport_zone;

        return $this;
    }

    /**
     * Gets po_box
     *
     * @return string|null
     */
    public function getPoBox()
    {
        return $this->container['po_box'];
    }

    /**
     * Sets po_box
     *
     * @param string|null $po_box po_box
     *
     * @return self
     */
    public function setPoBox($po_box)
    {
        if (is_null($po_box)) {
            throw new \InvalidArgumentException('non-nullable po_box cannot be null');
        }
        if ((mb_strlen($po_box) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['po_box'] = $po_box;

        return $this;
    }

    /**
     * Gets po_box_is_without_number
     *
     * @return bool|null
     */
    public function getPoBoxIsWithoutNumber()
    {
        return $this->container['po_box_is_without_number'];
    }

    /**
     * Sets po_box_is_without_number
     *
     * @param bool|null $po_box_is_without_number Flag: PO Box Without Number
     *
     * @return self
     */
    public function setPoBoxIsWithoutNumber($po_box_is_without_number)
    {
        if (is_null($po_box_is_without_number)) {
            throw new \InvalidArgumentException('non-nullable po_box_is_without_number cannot be null');
        }
        $this->container['po_box_is_without_number'] = $po_box_is_without_number;

        return $this;
    }

    /**
     * Gets po_box_postal_code
     *
     * @return string|null
     */
    public function getPoBoxPostalCode()
    {
        return $this->container['po_box_postal_code'];
    }

    /**
     * Sets po_box_postal_code
     *
     * @param string|null $po_box_postal_code po_box_postal_code
     *
     * @return self
     */
    public function setPoBoxPostalCode($po_box_postal_code)
    {
        if (is_null($po_box_postal_code)) {
            throw new \InvalidArgumentException('non-nullable po_box_postal_code cannot be null');
        }
        if ((mb_strlen($po_box_postal_code) > 10)) {
            throw new \InvalidArgumentException('invalid length for $po_box_postal_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['po_box_postal_code'] = $po_box_postal_code;

        return $this;
    }

    /**
     * Gets po_box_lobby_name
     *
     * @return string|null
     */
    public function getPoBoxLobbyName()
    {
        return $this->container['po_box_lobby_name'];
    }

    /**
     * Sets po_box_lobby_name
     *
     * @param string|null $po_box_lobby_name po_box_lobby_name
     *
     * @return self
     */
    public function setPoBoxLobbyName($po_box_lobby_name)
    {
        if (is_null($po_box_lobby_name)) {
            throw new \InvalidArgumentException('non-nullable po_box_lobby_name cannot be null');
        }
        if ((mb_strlen($po_box_lobby_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_lobby_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_lobby_name'] = $po_box_lobby_name;

        return $this;
    }

    /**
     * Gets po_box_deviating_city_name
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCityName()
    {
        return $this->container['po_box_deviating_city_name'];
    }

    /**
     * Sets po_box_deviating_city_name
     *
     * @param string|null $po_box_deviating_city_name PO Box city
     *
     * @return self
     */
    public function setPoBoxDeviatingCityName($po_box_deviating_city_name)
    {
        if (is_null($po_box_deviating_city_name)) {
            throw new \InvalidArgumentException('non-nullable po_box_deviating_city_name cannot be null');
        }
        if ((mb_strlen($po_box_deviating_city_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_city_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['po_box_deviating_city_name'] = $po_box_deviating_city_name;

        return $this;
    }

    /**
     * Gets po_box_deviating_region
     *
     * @return string|null
     */
    public function getPoBoxDeviatingRegion()
    {
        return $this->container['po_box_deviating_region'];
    }

    /**
     * Sets po_box_deviating_region
     *
     * @param string|null $po_box_deviating_region Region for PO Box (Country/Region, State, Province, ...)
     *
     * @return self
     */
    public function setPoBoxDeviatingRegion($po_box_deviating_region)
    {
        if (is_null($po_box_deviating_region)) {
            throw new \InvalidArgumentException('non-nullable po_box_deviating_region cannot be null');
        }
        if ((mb_strlen($po_box_deviating_region) > 3)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_region when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['po_box_deviating_region'] = $po_box_deviating_region;

        return $this;
    }

    /**
     * Gets po_box_deviating_country
     *
     * @return string|null
     */
    public function getPoBoxDeviatingCountry()
    {
        return $this->container['po_box_deviating_country'];
    }

    /**
     * Sets po_box_deviating_country
     *
     * @param string|null $po_box_deviating_country PO Box of Country/Region
     *
     * @return self
     */
    public function setPoBoxDeviatingCountry($po_box_deviating_country)
    {
        if (is_null($po_box_deviating_country)) {
            throw new \InvalidArgumentException('non-nullable po_box_deviating_country cannot be null');
        }
        if ((mb_strlen($po_box_deviating_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $po_box_deviating_country when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 3.');
        }

        $this->container['po_box_deviating_country'] = $po_box_deviating_country;

        return $this;
    }

    /**
     * Gets care_of_name
     *
     * @return string|null
     */
    public function getCareOfName()
    {
        return $this->container['care_of_name'];
    }

    /**
     * Sets care_of_name
     *
     * @param string|null $care_of_name c/o name
     *
     * @return self
     */
    public function setCareOfName($care_of_name)
    {
        if (is_null($care_of_name)) {
            throw new \InvalidArgumentException('non-nullable care_of_name cannot be null');
        }
        if ((mb_strlen($care_of_name) > 40)) {
            throw new \InvalidArgumentException('invalid length for $care_of_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 40.');
        }

        $this->container['care_of_name'] = $care_of_name;

        return $this;
    }

    /**
     * Gets delivery_service_type_code
     *
     * @return string|null
     */
    public function getDeliveryServiceTypeCode()
    {
        return $this->container['delivery_service_type_code'];
    }

    /**
     * Sets delivery_service_type_code
     *
     * @param string|null $delivery_service_type_code Type of Delivery Service
     *
     * @return self
     */
    public function setDeliveryServiceTypeCode($delivery_service_type_code)
    {
        if (is_null($delivery_service_type_code)) {
            throw new \InvalidArgumentException('non-nullable delivery_service_type_code cannot be null');
        }
        if ((mb_strlen($delivery_service_type_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_service_type_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 4.');
        }

        $this->container['delivery_service_type_code'] = $delivery_service_type_code;

        return $this;
    }

    /**
     * Gets delivery_service_number
     *
     * @return string|null
     */
    public function getDeliveryServiceNumber()
    {
        return $this->container['delivery_service_number'];
    }

    /**
     * Sets delivery_service_number
     *
     * @param string|null $delivery_service_number Number of Delivery Service
     *
     * @return self
     */
    public function setDeliveryServiceNumber($delivery_service_number)
    {
        if (is_null($delivery_service_number)) {
            throw new \InvalidArgumentException('non-nullable delivery_service_number cannot be null');
        }
        if ((mb_strlen($delivery_service_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $delivery_service_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 10.');
        }

        $this->container['delivery_service_number'] = $delivery_service_number;

        return $this;
    }

    /**
     * Gets address_time_zone
     *
     * @return string|null
     */
    public function getAddressTimeZone()
    {
        return $this->container['address_time_zone'];
    }

    /**
     * Sets address_time_zone
     *
     * @param string|null $address_time_zone Address Time Zone
     *
     * @return self
     */
    public function setAddressTimeZone($address_time_zone)
    {
        if (is_null($address_time_zone)) {
            throw new \InvalidArgumentException('non-nullable address_time_zone cannot be null');
        }
        if ((mb_strlen($address_time_zone) > 6)) {
            throw new \InvalidArgumentException('invalid length for $address_time_zone when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 6.');
        }

        $this->container['address_time_zone'] = $address_time_zone;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string|null
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string|null $email_address email_address
     *
     * @return self
     */
    public function setEmailAddress($email_address)
    {
        if (is_null($email_address)) {
            throw new \InvalidArgumentException('non-nullable email_address cannot be null');
        }
        if ((mb_strlen($email_address) > 241)) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 241.');
        }

        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets regional_structure_check_status
     *
     * @return string|null
     */
    public function getRegionalStructureCheckStatus()
    {
        return $this->container['regional_structure_check_status'];
    }

    /**
     * Sets regional_structure_check_status
     *
     * @param string|null $regional_structure_check_status City File Test Status
     *
     * @return self
     */
    public function setRegionalStructureCheckStatus($regional_structure_check_status)
    {
        if (is_null($regional_structure_check_status)) {
            throw new \InvalidArgumentException('non-nullable regional_structure_check_status cannot be null');
        }
        if ((mb_strlen($regional_structure_check_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $regional_structure_check_status when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderSupplierAddressTypeCreate., must be smaller than or equal to 1.');
        }

        $this->container['regional_structure_check_status'] = $regional_structure_check_status;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageCreate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order_tp
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null
     */
    public function getPurchaseOrderTp()
    {
        return $this->container['_purchase_order_tp'];
    }

    /**
     * Sets _purchase_order_tp
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderTypeCreate|null $_purchase_order_tp _purchase_order_tp
     *
     * @return self
     */
    public function setPurchaseOrderTp($_purchase_order_tp)
    {
        if (is_null($_purchase_order_tp)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_tp cannot be null');
        }
        $this->container['_purchase_order_tp'] = $_purchase_order_tp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


