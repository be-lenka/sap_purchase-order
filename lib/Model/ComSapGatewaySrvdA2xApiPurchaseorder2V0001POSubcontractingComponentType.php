<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.POSubcontractingComponent_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'schedule_line' => 'string',
        'reservation_item' => 'string',
        'record_type' => 'string',
        'material' => 'string',
        'is_material_provision' => 'bool',
        'material_provision_type' => 'string',
        'material_qty_to_base_qty_nmrtr' => '\BeLenka\SAP\PurchaseOrder\Model\Numerator',
        'material_qty_to_base_qty_dnmntr' => '\BeLenka\SAP\PurchaseOrder\Model\Denominator',
        'material_revision_level' => 'string',
        'material_comp_is_variable_sized' => 'bool',
        'material_component_is_phantom_item' => 'bool',
        'reservation' => 'string',
        'required_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\RequirementQuantity',
        'requirement_date' => '\DateTime',
        'requirement_time' => 'string',
        'reservation_is_finally_issued' => 'bool',
        'base_unit' => 'string',
        'quantity_in_entry_unit' => '\BeLenka\SAP\PurchaseOrder\Model\QuantityInUnitOfEntry',
        'entry_unit' => 'string',
        'variable_size_item_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\NumberOfVariableSizeComponents',
        'variable_size_item_unit' => 'string',
        'variable_size_component_unit' => 'string',
        'variable_size_component_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\VSIQuantity',
        'unit_of_measure_for_size1_to3' => 'string',
        'size1' => '\BeLenka\SAP\PurchaseOrder\Model\Size1',
        'size2' => '\BeLenka\SAP\PurchaseOrder\Model\Size2',
        'size3' => '\BeLenka\SAP\PurchaseOrder\Model\Size3',
        'plant' => 'string',
        'latest_requirement_date' => '\DateTime',
        'order_level_value' => 'string',
        'order_path_value' => 'string',
        'bill_of_material_item_number' => 'string',
        'matl_comp_free_defined_attribute' => 'string',
        'bom_item_category' => 'string',
        'is_bulk_material_component' => 'bool',
        'account_assignment_category' => 'string',
        'inventory_special_stock_type' => 'string',
        'consumption_posting' => 'string',
        'inventory_special_stock_valn_type' => 'string',
        'debit_credit_code' => 'string',
        'withdrawn_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\WithdrawnQuantity',
        'quantity_is_fixed' => 'bool',
        'component_scrap_in_percent' => '\BeLenka\SAP\PurchaseOrder\Model\ComponentScrap',
        'operation_scrap_in_percent' => '\BeLenka\SAP\PurchaseOrder\Model\OperationScrapIn',
        'is_net_scrap' => 'bool',
        'lead_time_offset' => '\BeLenka\SAP\PurchaseOrder\Model\LeadTimeOffset',
        'quantity_distribution_key' => 'string',
        'formula_key' => 'string',
        'storage_location' => 'string',
        'production_supply_area' => 'string',
        'batch' => 'string',
        'bom_item_description' => 'string',
        'bom_item_text2' => 'string',
        'change_number' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]',
        '_purchase_order' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType',
        '_schedule_line' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderScheduleLineType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_item' => null,
        'schedule_line' => null,
        'reservation_item' => null,
        'record_type' => null,
        'material' => null,
        'is_material_provision' => null,
        'material_provision_type' => null,
        'material_qty_to_base_qty_nmrtr' => null,
        'material_qty_to_base_qty_dnmntr' => null,
        'material_revision_level' => null,
        'material_comp_is_variable_sized' => null,
        'material_component_is_phantom_item' => null,
        'reservation' => null,
        'required_quantity' => null,
        'requirement_date' => 'date',
        'requirement_time' => 'time',
        'reservation_is_finally_issued' => null,
        'base_unit' => null,
        'quantity_in_entry_unit' => null,
        'entry_unit' => null,
        'variable_size_item_quantity' => null,
        'variable_size_item_unit' => null,
        'variable_size_component_unit' => null,
        'variable_size_component_quantity' => null,
        'unit_of_measure_for_size1_to3' => null,
        'size1' => null,
        'size2' => null,
        'size3' => null,
        'plant' => null,
        'latest_requirement_date' => 'date',
        'order_level_value' => null,
        'order_path_value' => null,
        'bill_of_material_item_number' => null,
        'matl_comp_free_defined_attribute' => null,
        'bom_item_category' => null,
        'is_bulk_material_component' => null,
        'account_assignment_category' => null,
        'inventory_special_stock_type' => null,
        'consumption_posting' => null,
        'inventory_special_stock_valn_type' => null,
        'debit_credit_code' => null,
        'withdrawn_quantity' => null,
        'quantity_is_fixed' => null,
        'component_scrap_in_percent' => null,
        'operation_scrap_in_percent' => null,
        'is_net_scrap' => null,
        'lead_time_offset' => null,
        'quantity_distribution_key' => null,
        'formula_key' => null,
        'storage_location' => null,
        'production_supply_area' => null,
        'batch' => null,
        'bom_item_description' => null,
        'bom_item_text2' => null,
        'change_number' => null,
        'sap__messages' => null,
        '_purchase_order' => null,
        '_purchase_order_item' => null,
        '_schedule_line' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_item' => false,
		'schedule_line' => false,
		'reservation_item' => false,
		'record_type' => false,
		'material' => false,
		'is_material_provision' => false,
		'material_provision_type' => false,
		'material_qty_to_base_qty_nmrtr' => false,
		'material_qty_to_base_qty_dnmntr' => false,
		'material_revision_level' => false,
		'material_comp_is_variable_sized' => false,
		'material_component_is_phantom_item' => false,
		'reservation' => false,
		'required_quantity' => false,
		'requirement_date' => true,
		'requirement_time' => false,
		'reservation_is_finally_issued' => false,
		'base_unit' => false,
		'quantity_in_entry_unit' => false,
		'entry_unit' => false,
		'variable_size_item_quantity' => false,
		'variable_size_item_unit' => false,
		'variable_size_component_unit' => false,
		'variable_size_component_quantity' => false,
		'unit_of_measure_for_size1_to3' => false,
		'size1' => false,
		'size2' => false,
		'size3' => false,
		'plant' => false,
		'latest_requirement_date' => true,
		'order_level_value' => false,
		'order_path_value' => false,
		'bill_of_material_item_number' => false,
		'matl_comp_free_defined_attribute' => false,
		'bom_item_category' => false,
		'is_bulk_material_component' => false,
		'account_assignment_category' => false,
		'inventory_special_stock_type' => false,
		'consumption_posting' => false,
		'inventory_special_stock_valn_type' => false,
		'debit_credit_code' => false,
		'withdrawn_quantity' => false,
		'quantity_is_fixed' => false,
		'component_scrap_in_percent' => false,
		'operation_scrap_in_percent' => false,
		'is_net_scrap' => false,
		'lead_time_offset' => false,
		'quantity_distribution_key' => false,
		'formula_key' => false,
		'storage_location' => false,
		'production_supply_area' => false,
		'batch' => false,
		'bom_item_description' => false,
		'bom_item_text2' => false,
		'change_number' => false,
		'sap__messages' => false,
		'_purchase_order' => false,
		'_purchase_order_item' => false,
		'_schedule_line' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'schedule_line' => 'ScheduleLine',
        'reservation_item' => 'ReservationItem',
        'record_type' => 'RecordType',
        'material' => 'Material',
        'is_material_provision' => 'IsMaterialProvision',
        'material_provision_type' => 'MaterialProvisionType',
        'material_qty_to_base_qty_nmrtr' => 'MaterialQtyToBaseQtyNmrtr',
        'material_qty_to_base_qty_dnmntr' => 'MaterialQtyToBaseQtyDnmntr',
        'material_revision_level' => 'MaterialRevisionLevel',
        'material_comp_is_variable_sized' => 'MaterialCompIsVariableSized',
        'material_component_is_phantom_item' => 'MaterialComponentIsPhantomItem',
        'reservation' => 'Reservation',
        'required_quantity' => 'RequiredQuantity',
        'requirement_date' => 'RequirementDate',
        'requirement_time' => 'RequirementTime',
        'reservation_is_finally_issued' => 'ReservationIsFinallyIssued',
        'base_unit' => 'BaseUnit',
        'quantity_in_entry_unit' => 'QuantityInEntryUnit',
        'entry_unit' => 'EntryUnit',
        'variable_size_item_quantity' => 'VariableSizeItemQuantity',
        'variable_size_item_unit' => 'VariableSizeItemUnit',
        'variable_size_component_unit' => 'VariableSizeComponentUnit',
        'variable_size_component_quantity' => 'VariableSizeComponentQuantity',
        'unit_of_measure_for_size1_to3' => 'UnitOfMeasureForSize1To3',
        'size1' => 'Size1',
        'size2' => 'Size2',
        'size3' => 'Size3',
        'plant' => 'Plant',
        'latest_requirement_date' => 'LatestRequirementDate',
        'order_level_value' => 'OrderLevelValue',
        'order_path_value' => 'OrderPathValue',
        'bill_of_material_item_number' => 'BillOfMaterialItemNumber',
        'matl_comp_free_defined_attribute' => 'MatlCompFreeDefinedAttribute',
        'bom_item_category' => 'BOMItemCategory',
        'is_bulk_material_component' => 'IsBulkMaterialComponent',
        'account_assignment_category' => 'AccountAssignmentCategory',
        'inventory_special_stock_type' => 'InventorySpecialStockType',
        'consumption_posting' => 'ConsumptionPosting',
        'inventory_special_stock_valn_type' => 'InventorySpecialStockValnType',
        'debit_credit_code' => 'DebitCreditCode',
        'withdrawn_quantity' => 'WithdrawnQuantity',
        'quantity_is_fixed' => 'QuantityIsFixed',
        'component_scrap_in_percent' => 'ComponentScrapInPercent',
        'operation_scrap_in_percent' => 'OperationScrapInPercent',
        'is_net_scrap' => 'IsNetScrap',
        'lead_time_offset' => 'LeadTimeOffset',
        'quantity_distribution_key' => 'QuantityDistributionKey',
        'formula_key' => 'FormulaKey',
        'storage_location' => 'StorageLocation',
        'production_supply_area' => 'ProductionSupplyArea',
        'batch' => 'Batch',
        'bom_item_description' => 'BOMItemDescription',
        'bom_item_text2' => 'BOMItemText2',
        'change_number' => 'ChangeNumber',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order' => '_PurchaseOrder',
        '_purchase_order_item' => '_PurchaseOrderItem',
        '_schedule_line' => '_ScheduleLine'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'schedule_line' => 'setScheduleLine',
        'reservation_item' => 'setReservationItem',
        'record_type' => 'setRecordType',
        'material' => 'setMaterial',
        'is_material_provision' => 'setIsMaterialProvision',
        'material_provision_type' => 'setMaterialProvisionType',
        'material_qty_to_base_qty_nmrtr' => 'setMaterialQtyToBaseQtyNmrtr',
        'material_qty_to_base_qty_dnmntr' => 'setMaterialQtyToBaseQtyDnmntr',
        'material_revision_level' => 'setMaterialRevisionLevel',
        'material_comp_is_variable_sized' => 'setMaterialCompIsVariableSized',
        'material_component_is_phantom_item' => 'setMaterialComponentIsPhantomItem',
        'reservation' => 'setReservation',
        'required_quantity' => 'setRequiredQuantity',
        'requirement_date' => 'setRequirementDate',
        'requirement_time' => 'setRequirementTime',
        'reservation_is_finally_issued' => 'setReservationIsFinallyIssued',
        'base_unit' => 'setBaseUnit',
        'quantity_in_entry_unit' => 'setQuantityInEntryUnit',
        'entry_unit' => 'setEntryUnit',
        'variable_size_item_quantity' => 'setVariableSizeItemQuantity',
        'variable_size_item_unit' => 'setVariableSizeItemUnit',
        'variable_size_component_unit' => 'setVariableSizeComponentUnit',
        'variable_size_component_quantity' => 'setVariableSizeComponentQuantity',
        'unit_of_measure_for_size1_to3' => 'setUnitOfMeasureForSize1To3',
        'size1' => 'setSize1',
        'size2' => 'setSize2',
        'size3' => 'setSize3',
        'plant' => 'setPlant',
        'latest_requirement_date' => 'setLatestRequirementDate',
        'order_level_value' => 'setOrderLevelValue',
        'order_path_value' => 'setOrderPathValue',
        'bill_of_material_item_number' => 'setBillOfMaterialItemNumber',
        'matl_comp_free_defined_attribute' => 'setMatlCompFreeDefinedAttribute',
        'bom_item_category' => 'setBomItemCategory',
        'is_bulk_material_component' => 'setIsBulkMaterialComponent',
        'account_assignment_category' => 'setAccountAssignmentCategory',
        'inventory_special_stock_type' => 'setInventorySpecialStockType',
        'consumption_posting' => 'setConsumptionPosting',
        'inventory_special_stock_valn_type' => 'setInventorySpecialStockValnType',
        'debit_credit_code' => 'setDebitCreditCode',
        'withdrawn_quantity' => 'setWithdrawnQuantity',
        'quantity_is_fixed' => 'setQuantityIsFixed',
        'component_scrap_in_percent' => 'setComponentScrapInPercent',
        'operation_scrap_in_percent' => 'setOperationScrapInPercent',
        'is_net_scrap' => 'setIsNetScrap',
        'lead_time_offset' => 'setLeadTimeOffset',
        'quantity_distribution_key' => 'setQuantityDistributionKey',
        'formula_key' => 'setFormulaKey',
        'storage_location' => 'setStorageLocation',
        'production_supply_area' => 'setProductionSupplyArea',
        'batch' => 'setBatch',
        'bom_item_description' => 'setBomItemDescription',
        'bom_item_text2' => 'setBomItemText2',
        'change_number' => 'setChangeNumber',
        'sap__messages' => 'setSapMessages',
        '_purchase_order' => 'setPurchaseOrder',
        '_purchase_order_item' => 'setPurchaseOrderItem',
        '_schedule_line' => 'setScheduleLine'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'schedule_line' => 'getScheduleLine',
        'reservation_item' => 'getReservationItem',
        'record_type' => 'getRecordType',
        'material' => 'getMaterial',
        'is_material_provision' => 'getIsMaterialProvision',
        'material_provision_type' => 'getMaterialProvisionType',
        'material_qty_to_base_qty_nmrtr' => 'getMaterialQtyToBaseQtyNmrtr',
        'material_qty_to_base_qty_dnmntr' => 'getMaterialQtyToBaseQtyDnmntr',
        'material_revision_level' => 'getMaterialRevisionLevel',
        'material_comp_is_variable_sized' => 'getMaterialCompIsVariableSized',
        'material_component_is_phantom_item' => 'getMaterialComponentIsPhantomItem',
        'reservation' => 'getReservation',
        'required_quantity' => 'getRequiredQuantity',
        'requirement_date' => 'getRequirementDate',
        'requirement_time' => 'getRequirementTime',
        'reservation_is_finally_issued' => 'getReservationIsFinallyIssued',
        'base_unit' => 'getBaseUnit',
        'quantity_in_entry_unit' => 'getQuantityInEntryUnit',
        'entry_unit' => 'getEntryUnit',
        'variable_size_item_quantity' => 'getVariableSizeItemQuantity',
        'variable_size_item_unit' => 'getVariableSizeItemUnit',
        'variable_size_component_unit' => 'getVariableSizeComponentUnit',
        'variable_size_component_quantity' => 'getVariableSizeComponentQuantity',
        'unit_of_measure_for_size1_to3' => 'getUnitOfMeasureForSize1To3',
        'size1' => 'getSize1',
        'size2' => 'getSize2',
        'size3' => 'getSize3',
        'plant' => 'getPlant',
        'latest_requirement_date' => 'getLatestRequirementDate',
        'order_level_value' => 'getOrderLevelValue',
        'order_path_value' => 'getOrderPathValue',
        'bill_of_material_item_number' => 'getBillOfMaterialItemNumber',
        'matl_comp_free_defined_attribute' => 'getMatlCompFreeDefinedAttribute',
        'bom_item_category' => 'getBomItemCategory',
        'is_bulk_material_component' => 'getIsBulkMaterialComponent',
        'account_assignment_category' => 'getAccountAssignmentCategory',
        'inventory_special_stock_type' => 'getInventorySpecialStockType',
        'consumption_posting' => 'getConsumptionPosting',
        'inventory_special_stock_valn_type' => 'getInventorySpecialStockValnType',
        'debit_credit_code' => 'getDebitCreditCode',
        'withdrawn_quantity' => 'getWithdrawnQuantity',
        'quantity_is_fixed' => 'getQuantityIsFixed',
        'component_scrap_in_percent' => 'getComponentScrapInPercent',
        'operation_scrap_in_percent' => 'getOperationScrapInPercent',
        'is_net_scrap' => 'getIsNetScrap',
        'lead_time_offset' => 'getLeadTimeOffset',
        'quantity_distribution_key' => 'getQuantityDistributionKey',
        'formula_key' => 'getFormulaKey',
        'storage_location' => 'getStorageLocation',
        'production_supply_area' => 'getProductionSupplyArea',
        'batch' => 'getBatch',
        'bom_item_description' => 'getBomItemDescription',
        'bom_item_text2' => 'getBomItemText2',
        'change_number' => 'getChangeNumber',
        'sap__messages' => 'getSapMessages',
        '_purchase_order' => 'getPurchaseOrder',
        '_purchase_order_item' => 'getPurchaseOrderItem',
        '_schedule_line' => 'getScheduleLine'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('schedule_line', $data ?? [], null);
        $this->setIfExists('reservation_item', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('is_material_provision', $data ?? [], null);
        $this->setIfExists('material_provision_type', $data ?? [], null);
        $this->setIfExists('material_qty_to_base_qty_nmrtr', $data ?? [], null);
        $this->setIfExists('material_qty_to_base_qty_dnmntr', $data ?? [], null);
        $this->setIfExists('material_revision_level', $data ?? [], null);
        $this->setIfExists('material_comp_is_variable_sized', $data ?? [], null);
        $this->setIfExists('material_component_is_phantom_item', $data ?? [], null);
        $this->setIfExists('reservation', $data ?? [], null);
        $this->setIfExists('required_quantity', $data ?? [], null);
        $this->setIfExists('requirement_date', $data ?? [], null);
        $this->setIfExists('requirement_time', $data ?? [], null);
        $this->setIfExists('reservation_is_finally_issued', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('quantity_in_entry_unit', $data ?? [], null);
        $this->setIfExists('entry_unit', $data ?? [], null);
        $this->setIfExists('variable_size_item_quantity', $data ?? [], null);
        $this->setIfExists('variable_size_item_unit', $data ?? [], null);
        $this->setIfExists('variable_size_component_unit', $data ?? [], null);
        $this->setIfExists('variable_size_component_quantity', $data ?? [], null);
        $this->setIfExists('unit_of_measure_for_size1_to3', $data ?? [], null);
        $this->setIfExists('size1', $data ?? [], null);
        $this->setIfExists('size2', $data ?? [], null);
        $this->setIfExists('size3', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('latest_requirement_date', $data ?? [], null);
        $this->setIfExists('order_level_value', $data ?? [], null);
        $this->setIfExists('order_path_value', $data ?? [], null);
        $this->setIfExists('bill_of_material_item_number', $data ?? [], null);
        $this->setIfExists('matl_comp_free_defined_attribute', $data ?? [], null);
        $this->setIfExists('bom_item_category', $data ?? [], null);
        $this->setIfExists('is_bulk_material_component', $data ?? [], null);
        $this->setIfExists('account_assignment_category', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_type', $data ?? [], null);
        $this->setIfExists('consumption_posting', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_valn_type', $data ?? [], null);
        $this->setIfExists('debit_credit_code', $data ?? [], null);
        $this->setIfExists('withdrawn_quantity', $data ?? [], null);
        $this->setIfExists('quantity_is_fixed', $data ?? [], null);
        $this->setIfExists('component_scrap_in_percent', $data ?? [], null);
        $this->setIfExists('operation_scrap_in_percent', $data ?? [], null);
        $this->setIfExists('is_net_scrap', $data ?? [], null);
        $this->setIfExists('lead_time_offset', $data ?? [], null);
        $this->setIfExists('quantity_distribution_key', $data ?? [], null);
        $this->setIfExists('formula_key', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('production_supply_area', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('bom_item_description', $data ?? [], null);
        $this->setIfExists('bom_item_text2', $data ?? [], null);
        $this->setIfExists('change_number', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
        $this->setIfExists('_schedule_line', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['purchase_order']) && (mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_order_item']) && (mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['schedule_line']) && (mb_strlen($this->container['schedule_line']) > 4)) {
            $invalidProperties[] = "invalid value for 'schedule_line', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reservation_item']) && (mb_strlen($this->container['reservation_item']) > 4)) {
            $invalidProperties[] = "invalid value for 'reservation_item', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['record_type']) && (mb_strlen($this->container['record_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'record_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 18)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['material_provision_type']) && (mb_strlen($this->container['material_provision_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'material_provision_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['material_revision_level']) && (mb_strlen($this->container['material_revision_level']) > 2)) {
            $invalidProperties[] = "invalid value for 'material_revision_level', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['reservation']) && (mb_strlen($this->container['reservation']) > 10)) {
            $invalidProperties[] = "invalid value for 'reservation', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['entry_unit']) && (mb_strlen($this->container['entry_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'entry_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['variable_size_item_unit']) && (mb_strlen($this->container['variable_size_item_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'variable_size_item_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['variable_size_component_unit']) && (mb_strlen($this->container['variable_size_component_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'variable_size_component_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['unit_of_measure_for_size1_to3']) && (mb_strlen($this->container['unit_of_measure_for_size1_to3']) > 3)) {
            $invalidProperties[] = "invalid value for 'unit_of_measure_for_size1_to3', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['order_level_value']) && (mb_strlen($this->container['order_level_value']) > 2)) {
            $invalidProperties[] = "invalid value for 'order_level_value', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['order_path_value']) && (mb_strlen($this->container['order_path_value']) > 2)) {
            $invalidProperties[] = "invalid value for 'order_path_value', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['bill_of_material_item_number']) && (mb_strlen($this->container['bill_of_material_item_number']) > 4)) {
            $invalidProperties[] = "invalid value for 'bill_of_material_item_number', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['matl_comp_free_defined_attribute']) && (mb_strlen($this->container['matl_comp_free_defined_attribute']) > 10)) {
            $invalidProperties[] = "invalid value for 'matl_comp_free_defined_attribute', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bom_item_category']) && (mb_strlen($this->container['bom_item_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'bom_item_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['account_assignment_category']) && (mb_strlen($this->container['account_assignment_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'account_assignment_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_special_stock_type']) && (mb_strlen($this->container['inventory_special_stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['consumption_posting']) && (mb_strlen($this->container['consumption_posting']) > 1)) {
            $invalidProperties[] = "invalid value for 'consumption_posting', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_special_stock_valn_type']) && (mb_strlen($this->container['inventory_special_stock_valn_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_valn_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['debit_credit_code']) && (mb_strlen($this->container['debit_credit_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'debit_credit_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['quantity_distribution_key']) && (mb_strlen($this->container['quantity_distribution_key']) > 4)) {
            $invalidProperties[] = "invalid value for 'quantity_distribution_key', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['formula_key']) && (mb_strlen($this->container['formula_key']) > 2)) {
            $invalidProperties[] = "invalid value for 'formula_key', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['production_supply_area']) && (mb_strlen($this->container['production_supply_area']) > 10)) {
            $invalidProperties[] = "invalid value for 'production_supply_area', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['bom_item_description']) && (mb_strlen($this->container['bom_item_description']) > 40)) {
            $invalidProperties[] = "invalid value for 'bom_item_description', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['bom_item_text2']) && (mb_strlen($this->container['bom_item_text2']) > 40)) {
            $invalidProperties[] = "invalid value for 'bom_item_text2', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['change_number']) && (mb_strlen($this->container['change_number']) > 12)) {
            $invalidProperties[] = "invalid value for 'change_number', the character length must be smaller than or equal to 12.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string|null $purchase_order purchase_order
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string|null
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string|null $purchase_order_item purchase_order_item
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item cannot be null');
        }
        if ((mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets schedule_line
     *
     * @return string|null
     */
    public function getScheduleLine()
    {
        return $this->container['schedule_line'];
    }

    /**
     * Sets schedule_line
     *
     * @param string|null $schedule_line Delivery Schedule Line Counter
     *
     * @return self
     */
    public function setScheduleLine($schedule_line)
    {
        if (is_null($schedule_line)) {
            throw new \InvalidArgumentException('non-nullable schedule_line cannot be null');
        }
        if ((mb_strlen($schedule_line) > 4)) {
            throw new \InvalidArgumentException('invalid length for $schedule_line when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['schedule_line'] = $schedule_line;

        return $this;
    }

    /**
     * Gets reservation_item
     *
     * @return string|null
     */
    public function getReservationItem()
    {
        return $this->container['reservation_item'];
    }

    /**
     * Sets reservation_item
     *
     * @param string|null $reservation_item reservation_item
     *
     * @return self
     */
    public function setReservationItem($reservation_item)
    {
        if (is_null($reservation_item)) {
            throw new \InvalidArgumentException('non-nullable reservation_item cannot be null');
        }
        if ((mb_strlen($reservation_item) > 4)) {
            throw new \InvalidArgumentException('invalid length for $reservation_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['reservation_item'] = $reservation_item;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type record_type
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        if ((mb_strlen($record_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $record_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        if ((mb_strlen($material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $material when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 18.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets is_material_provision
     *
     * @return bool|null
     */
    public function getIsMaterialProvision()
    {
        return $this->container['is_material_provision'];
    }

    /**
     * Sets is_material_provision
     *
     * @param bool|null $is_material_provision Material Provision Indicator
     *
     * @return self
     */
    public function setIsMaterialProvision($is_material_provision)
    {
        if (is_null($is_material_provision)) {
            throw new \InvalidArgumentException('non-nullable is_material_provision cannot be null');
        }
        $this->container['is_material_provision'] = $is_material_provision;

        return $this;
    }

    /**
     * Gets material_provision_type
     *
     * @return string|null
     */
    public function getMaterialProvisionType()
    {
        return $this->container['material_provision_type'];
    }

    /**
     * Sets material_provision_type
     *
     * @param string|null $material_provision_type material_provision_type
     *
     * @return self
     */
    public function setMaterialProvisionType($material_provision_type)
    {
        if (is_null($material_provision_type)) {
            throw new \InvalidArgumentException('non-nullable material_provision_type cannot be null');
        }
        if ((mb_strlen($material_provision_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $material_provision_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['material_provision_type'] = $material_provision_type;

        return $this;
    }

    /**
     * Gets material_qty_to_base_qty_nmrtr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Numerator|null
     */
    public function getMaterialQtyToBaseQtyNmrtr()
    {
        return $this->container['material_qty_to_base_qty_nmrtr'];
    }

    /**
     * Sets material_qty_to_base_qty_nmrtr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Numerator|null $material_qty_to_base_qty_nmrtr material_qty_to_base_qty_nmrtr
     *
     * @return self
     */
    public function setMaterialQtyToBaseQtyNmrtr($material_qty_to_base_qty_nmrtr)
    {
        if (is_null($material_qty_to_base_qty_nmrtr)) {
            throw new \InvalidArgumentException('non-nullable material_qty_to_base_qty_nmrtr cannot be null');
        }
        $this->container['material_qty_to_base_qty_nmrtr'] = $material_qty_to_base_qty_nmrtr;

        return $this;
    }

    /**
     * Gets material_qty_to_base_qty_dnmntr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Denominator|null
     */
    public function getMaterialQtyToBaseQtyDnmntr()
    {
        return $this->container['material_qty_to_base_qty_dnmntr'];
    }

    /**
     * Sets material_qty_to_base_qty_dnmntr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Denominator|null $material_qty_to_base_qty_dnmntr material_qty_to_base_qty_dnmntr
     *
     * @return self
     */
    public function setMaterialQtyToBaseQtyDnmntr($material_qty_to_base_qty_dnmntr)
    {
        if (is_null($material_qty_to_base_qty_dnmntr)) {
            throw new \InvalidArgumentException('non-nullable material_qty_to_base_qty_dnmntr cannot be null');
        }
        $this->container['material_qty_to_base_qty_dnmntr'] = $material_qty_to_base_qty_dnmntr;

        return $this;
    }

    /**
     * Gets material_revision_level
     *
     * @return string|null
     */
    public function getMaterialRevisionLevel()
    {
        return $this->container['material_revision_level'];
    }

    /**
     * Sets material_revision_level
     *
     * @param string|null $material_revision_level material_revision_level
     *
     * @return self
     */
    public function setMaterialRevisionLevel($material_revision_level)
    {
        if (is_null($material_revision_level)) {
            throw new \InvalidArgumentException('non-nullable material_revision_level cannot be null');
        }
        if ((mb_strlen($material_revision_level) > 2)) {
            throw new \InvalidArgumentException('invalid length for $material_revision_level when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 2.');
        }

        $this->container['material_revision_level'] = $material_revision_level;

        return $this;
    }

    /**
     * Gets material_comp_is_variable_sized
     *
     * @return bool|null
     */
    public function getMaterialCompIsVariableSized()
    {
        return $this->container['material_comp_is_variable_sized'];
    }

    /**
     * Sets material_comp_is_variable_sized
     *
     * @param bool|null $material_comp_is_variable_sized Variable-Sized Item Indicator
     *
     * @return self
     */
    public function setMaterialCompIsVariableSized($material_comp_is_variable_sized)
    {
        if (is_null($material_comp_is_variable_sized)) {
            throw new \InvalidArgumentException('non-nullable material_comp_is_variable_sized cannot be null');
        }
        $this->container['material_comp_is_variable_sized'] = $material_comp_is_variable_sized;

        return $this;
    }

    /**
     * Gets material_component_is_phantom_item
     *
     * @return bool|null
     */
    public function getMaterialComponentIsPhantomItem()
    {
        return $this->container['material_component_is_phantom_item'];
    }

    /**
     * Sets material_component_is_phantom_item
     *
     * @param bool|null $material_component_is_phantom_item Phantom Item Indicator
     *
     * @return self
     */
    public function setMaterialComponentIsPhantomItem($material_component_is_phantom_item)
    {
        if (is_null($material_component_is_phantom_item)) {
            throw new \InvalidArgumentException('non-nullable material_component_is_phantom_item cannot be null');
        }
        $this->container['material_component_is_phantom_item'] = $material_component_is_phantom_item;

        return $this;
    }

    /**
     * Gets reservation
     *
     * @return string|null
     */
    public function getReservation()
    {
        return $this->container['reservation'];
    }

    /**
     * Sets reservation
     *
     * @param string|null $reservation Number of reservation/dependent requirements
     *
     * @return self
     */
    public function setReservation($reservation)
    {
        if (is_null($reservation)) {
            throw new \InvalidArgumentException('non-nullable reservation cannot be null');
        }
        if ((mb_strlen($reservation) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reservation when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 10.');
        }

        $this->container['reservation'] = $reservation;

        return $this;
    }

    /**
     * Gets required_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\RequirementQuantity|null
     */
    public function getRequiredQuantity()
    {
        return $this->container['required_quantity'];
    }

    /**
     * Sets required_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\RequirementQuantity|null $required_quantity required_quantity
     *
     * @return self
     */
    public function setRequiredQuantity($required_quantity)
    {
        if (is_null($required_quantity)) {
            throw new \InvalidArgumentException('non-nullable required_quantity cannot be null');
        }
        $this->container['required_quantity'] = $required_quantity;

        return $this;
    }

    /**
     * Gets requirement_date
     *
     * @return \DateTime|null
     */
    public function getRequirementDate()
    {
        return $this->container['requirement_date'];
    }

    /**
     * Sets requirement_date
     *
     * @param \DateTime|null $requirement_date Material Component Requirement Date
     *
     * @return self
     */
    public function setRequirementDate($requirement_date)
    {
        if (is_null($requirement_date)) {
            array_push($this->openAPINullablesSetToNull, 'requirement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requirement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['requirement_date'] = $requirement_date;

        return $this;
    }

    /**
     * Gets requirement_time
     *
     * @return string|null
     */
    public function getRequirementTime()
    {
        return $this->container['requirement_time'];
    }

    /**
     * Sets requirement_time
     *
     * @param string|null $requirement_time Material Component Requirement Time
     *
     * @return self
     */
    public function setRequirementTime($requirement_time)
    {
        if (is_null($requirement_time)) {
            throw new \InvalidArgumentException('non-nullable requirement_time cannot be null');
        }
        $this->container['requirement_time'] = $requirement_time;

        return $this;
    }

    /**
     * Gets reservation_is_finally_issued
     *
     * @return bool|null
     */
    public function getReservationIsFinallyIssued()
    {
        return $this->container['reservation_is_finally_issued'];
    }

    /**
     * Sets reservation_is_finally_issued
     *
     * @param bool|null $reservation_is_finally_issued Final Issue for Reservation
     *
     * @return self
     */
    public function setReservationIsFinallyIssued($reservation_is_finally_issued)
    {
        if (is_null($reservation_is_finally_issued)) {
            throw new \InvalidArgumentException('non-nullable reservation_is_finally_issued cannot be null');
        }
        $this->container['reservation_is_finally_issued'] = $reservation_is_finally_issued;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets quantity_in_entry_unit
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\QuantityInUnitOfEntry|null
     */
    public function getQuantityInEntryUnit()
    {
        return $this->container['quantity_in_entry_unit'];
    }

    /**
     * Sets quantity_in_entry_unit
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\QuantityInUnitOfEntry|null $quantity_in_entry_unit quantity_in_entry_unit
     *
     * @return self
     */
    public function setQuantityInEntryUnit($quantity_in_entry_unit)
    {
        if (is_null($quantity_in_entry_unit)) {
            throw new \InvalidArgumentException('non-nullable quantity_in_entry_unit cannot be null');
        }
        $this->container['quantity_in_entry_unit'] = $quantity_in_entry_unit;

        return $this;
    }

    /**
     * Gets entry_unit
     *
     * @return string|null
     */
    public function getEntryUnit()
    {
        return $this->container['entry_unit'];
    }

    /**
     * Sets entry_unit
     *
     * @param string|null $entry_unit Unit of entry
     *
     * @return self
     */
    public function setEntryUnit($entry_unit)
    {
        if (is_null($entry_unit)) {
            throw new \InvalidArgumentException('non-nullable entry_unit cannot be null');
        }
        if ((mb_strlen($entry_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $entry_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 3.');
        }

        $this->container['entry_unit'] = $entry_unit;

        return $this;
    }

    /**
     * Gets variable_size_item_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NumberOfVariableSizeComponents|null
     */
    public function getVariableSizeItemQuantity()
    {
        return $this->container['variable_size_item_quantity'];
    }

    /**
     * Sets variable_size_item_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NumberOfVariableSizeComponents|null $variable_size_item_quantity variable_size_item_quantity
     *
     * @return self
     */
    public function setVariableSizeItemQuantity($variable_size_item_quantity)
    {
        if (is_null($variable_size_item_quantity)) {
            throw new \InvalidArgumentException('non-nullable variable_size_item_quantity cannot be null');
        }
        $this->container['variable_size_item_quantity'] = $variable_size_item_quantity;

        return $this;
    }

    /**
     * Gets variable_size_item_unit
     *
     * @return string|null
     */
    public function getVariableSizeItemUnit()
    {
        return $this->container['variable_size_item_unit'];
    }

    /**
     * Sets variable_size_item_unit
     *
     * @param string|null $variable_size_item_unit Variable-Size Item Unit of Measure
     *
     * @return self
     */
    public function setVariableSizeItemUnit($variable_size_item_unit)
    {
        if (is_null($variable_size_item_unit)) {
            throw new \InvalidArgumentException('non-nullable variable_size_item_unit cannot be null');
        }
        if ((mb_strlen($variable_size_item_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $variable_size_item_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 3.');
        }

        $this->container['variable_size_item_unit'] = $variable_size_item_unit;

        return $this;
    }

    /**
     * Gets variable_size_component_unit
     *
     * @return string|null
     */
    public function getVariableSizeComponentUnit()
    {
        return $this->container['variable_size_component_unit'];
    }

    /**
     * Sets variable_size_component_unit
     *
     * @param string|null $variable_size_component_unit Unit of Measure for Variable-Size Components
     *
     * @return self
     */
    public function setVariableSizeComponentUnit($variable_size_component_unit)
    {
        if (is_null($variable_size_component_unit)) {
            throw new \InvalidArgumentException('non-nullable variable_size_component_unit cannot be null');
        }
        if ((mb_strlen($variable_size_component_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $variable_size_component_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 3.');
        }

        $this->container['variable_size_component_unit'] = $variable_size_component_unit;

        return $this;
    }

    /**
     * Gets variable_size_component_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\VSIQuantity|null
     */
    public function getVariableSizeComponentQuantity()
    {
        return $this->container['variable_size_component_quantity'];
    }

    /**
     * Sets variable_size_component_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\VSIQuantity|null $variable_size_component_quantity variable_size_component_quantity
     *
     * @return self
     */
    public function setVariableSizeComponentQuantity($variable_size_component_quantity)
    {
        if (is_null($variable_size_component_quantity)) {
            throw new \InvalidArgumentException('non-nullable variable_size_component_quantity cannot be null');
        }
        $this->container['variable_size_component_quantity'] = $variable_size_component_quantity;

        return $this;
    }

    /**
     * Gets unit_of_measure_for_size1_to3
     *
     * @return string|null
     */
    public function getUnitOfMeasureForSize1To3()
    {
        return $this->container['unit_of_measure_for_size1_to3'];
    }

    /**
     * Sets unit_of_measure_for_size1_to3
     *
     * @param string|null $unit_of_measure_for_size1_to3 Unit of measure for sizes 1 to 3
     *
     * @return self
     */
    public function setUnitOfMeasureForSize1To3($unit_of_measure_for_size1_to3)
    {
        if (is_null($unit_of_measure_for_size1_to3)) {
            throw new \InvalidArgumentException('non-nullable unit_of_measure_for_size1_to3 cannot be null');
        }
        if ((mb_strlen($unit_of_measure_for_size1_to3) > 3)) {
            throw new \InvalidArgumentException('invalid length for $unit_of_measure_for_size1_to3 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 3.');
        }

        $this->container['unit_of_measure_for_size1_to3'] = $unit_of_measure_for_size1_to3;

        return $this;
    }

    /**
     * Gets size1
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Size1|null
     */
    public function getSize1()
    {
        return $this->container['size1'];
    }

    /**
     * Sets size1
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Size1|null $size1 size1
     *
     * @return self
     */
    public function setSize1($size1)
    {
        if (is_null($size1)) {
            throw new \InvalidArgumentException('non-nullable size1 cannot be null');
        }
        $this->container['size1'] = $size1;

        return $this;
    }

    /**
     * Gets size2
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Size2|null
     */
    public function getSize2()
    {
        return $this->container['size2'];
    }

    /**
     * Sets size2
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Size2|null $size2 size2
     *
     * @return self
     */
    public function setSize2($size2)
    {
        if (is_null($size2)) {
            throw new \InvalidArgumentException('non-nullable size2 cannot be null');
        }
        $this->container['size2'] = $size2;

        return $this;
    }

    /**
     * Gets size3
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Size3|null
     */
    public function getSize3()
    {
        return $this->container['size3'];
    }

    /**
     * Sets size3
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Size3|null $size3 size3
     *
     * @return self
     */
    public function setSize3($size3)
    {
        if (is_null($size3)) {
            throw new \InvalidArgumentException('non-nullable size3 cannot be null');
        }
        $this->container['size3'] = $size3;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            throw new \InvalidArgumentException('non-nullable plant cannot be null');
        }
        if ((mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets latest_requirement_date
     *
     * @return \DateTime|null
     */
    public function getLatestRequirementDate()
    {
        return $this->container['latest_requirement_date'];
    }

    /**
     * Sets latest_requirement_date
     *
     * @param \DateTime|null $latest_requirement_date latest_requirement_date
     *
     * @return self
     */
    public function setLatestRequirementDate($latest_requirement_date)
    {
        if (is_null($latest_requirement_date)) {
            array_push($this->openAPINullablesSetToNull, 'latest_requirement_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('latest_requirement_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['latest_requirement_date'] = $latest_requirement_date;

        return $this;
    }

    /**
     * Gets order_level_value
     *
     * @return string|null
     */
    public function getOrderLevelValue()
    {
        return $this->container['order_level_value'];
    }

    /**
     * Sets order_level_value
     *
     * @param string|null $order_level_value order_level_value
     *
     * @return self
     */
    public function setOrderLevelValue($order_level_value)
    {
        if (is_null($order_level_value)) {
            throw new \InvalidArgumentException('non-nullable order_level_value cannot be null');
        }
        if ((mb_strlen($order_level_value) > 2)) {
            throw new \InvalidArgumentException('invalid length for $order_level_value when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 2.');
        }

        $this->container['order_level_value'] = $order_level_value;

        return $this;
    }

    /**
     * Gets order_path_value
     *
     * @return string|null
     */
    public function getOrderPathValue()
    {
        return $this->container['order_path_value'];
    }

    /**
     * Sets order_path_value
     *
     * @param string|null $order_path_value order_path_value
     *
     * @return self
     */
    public function setOrderPathValue($order_path_value)
    {
        if (is_null($order_path_value)) {
            throw new \InvalidArgumentException('non-nullable order_path_value cannot be null');
        }
        if ((mb_strlen($order_path_value) > 2)) {
            throw new \InvalidArgumentException('invalid length for $order_path_value when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 2.');
        }

        $this->container['order_path_value'] = $order_path_value;

        return $this;
    }

    /**
     * Gets bill_of_material_item_number
     *
     * @return string|null
     */
    public function getBillOfMaterialItemNumber()
    {
        return $this->container['bill_of_material_item_number'];
    }

    /**
     * Sets bill_of_material_item_number
     *
     * @param string|null $bill_of_material_item_number bill_of_material_item_number
     *
     * @return self
     */
    public function setBillOfMaterialItemNumber($bill_of_material_item_number)
    {
        if (is_null($bill_of_material_item_number)) {
            throw new \InvalidArgumentException('non-nullable bill_of_material_item_number cannot be null');
        }
        if ((mb_strlen($bill_of_material_item_number) > 4)) {
            throw new \InvalidArgumentException('invalid length for $bill_of_material_item_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['bill_of_material_item_number'] = $bill_of_material_item_number;

        return $this;
    }

    /**
     * Gets matl_comp_free_defined_attribute
     *
     * @return string|null
     */
    public function getMatlCompFreeDefinedAttribute()
    {
        return $this->container['matl_comp_free_defined_attribute'];
    }

    /**
     * Sets matl_comp_free_defined_attribute
     *
     * @param string|null $matl_comp_free_defined_attribute matl_comp_free_defined_attribute
     *
     * @return self
     */
    public function setMatlCompFreeDefinedAttribute($matl_comp_free_defined_attribute)
    {
        if (is_null($matl_comp_free_defined_attribute)) {
            throw new \InvalidArgumentException('non-nullable matl_comp_free_defined_attribute cannot be null');
        }
        if ((mb_strlen($matl_comp_free_defined_attribute) > 10)) {
            throw new \InvalidArgumentException('invalid length for $matl_comp_free_defined_attribute when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 10.');
        }

        $this->container['matl_comp_free_defined_attribute'] = $matl_comp_free_defined_attribute;

        return $this;
    }

    /**
     * Gets bom_item_category
     *
     * @return string|null
     */
    public function getBomItemCategory()
    {
        return $this->container['bom_item_category'];
    }

    /**
     * Sets bom_item_category
     *
     * @param string|null $bom_item_category Bill of Material Item Category
     *
     * @return self
     */
    public function setBomItemCategory($bom_item_category)
    {
        if (is_null($bom_item_category)) {
            throw new \InvalidArgumentException('non-nullable bom_item_category cannot be null');
        }
        if ((mb_strlen($bom_item_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $bom_item_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['bom_item_category'] = $bom_item_category;

        return $this;
    }

    /**
     * Gets is_bulk_material_component
     *
     * @return bool|null
     */
    public function getIsBulkMaterialComponent()
    {
        return $this->container['is_bulk_material_component'];
    }

    /**
     * Sets is_bulk_material_component
     *
     * @param bool|null $is_bulk_material_component Indicator: Bulk Material
     *
     * @return self
     */
    public function setIsBulkMaterialComponent($is_bulk_material_component)
    {
        if (is_null($is_bulk_material_component)) {
            throw new \InvalidArgumentException('non-nullable is_bulk_material_component cannot be null');
        }
        $this->container['is_bulk_material_component'] = $is_bulk_material_component;

        return $this;
    }

    /**
     * Gets account_assignment_category
     *
     * @return string|null
     */
    public function getAccountAssignmentCategory()
    {
        return $this->container['account_assignment_category'];
    }

    /**
     * Sets account_assignment_category
     *
     * @param string|null $account_assignment_category account_assignment_category
     *
     * @return self
     */
    public function setAccountAssignmentCategory($account_assignment_category)
    {
        if (is_null($account_assignment_category)) {
            throw new \InvalidArgumentException('non-nullable account_assignment_category cannot be null');
        }
        if ((mb_strlen($account_assignment_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $account_assignment_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['account_assignment_category'] = $account_assignment_category;

        return $this;
    }

    /**
     * Gets inventory_special_stock_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockType()
    {
        return $this->container['inventory_special_stock_type'];
    }

    /**
     * Sets inventory_special_stock_type
     *
     * @param string|null $inventory_special_stock_type Inventory Special Stock Type
     *
     * @return self
     */
    public function setInventorySpecialStockType($inventory_special_stock_type)
    {
        if (is_null($inventory_special_stock_type)) {
            throw new \InvalidArgumentException('non-nullable inventory_special_stock_type cannot be null');
        }
        if ((mb_strlen($inventory_special_stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_type'] = $inventory_special_stock_type;

        return $this;
    }

    /**
     * Gets consumption_posting
     *
     * @return string|null
     */
    public function getConsumptionPosting()
    {
        return $this->container['consumption_posting'];
    }

    /**
     * Sets consumption_posting
     *
     * @param string|null $consumption_posting consumption_posting
     *
     * @return self
     */
    public function setConsumptionPosting($consumption_posting)
    {
        if (is_null($consumption_posting)) {
            throw new \InvalidArgumentException('non-nullable consumption_posting cannot be null');
        }
        if ((mb_strlen($consumption_posting) > 1)) {
            throw new \InvalidArgumentException('invalid length for $consumption_posting when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['consumption_posting'] = $consumption_posting;

        return $this;
    }

    /**
     * Gets inventory_special_stock_valn_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockValnType()
    {
        return $this->container['inventory_special_stock_valn_type'];
    }

    /**
     * Sets inventory_special_stock_valn_type
     *
     * @param string|null $inventory_special_stock_valn_type Inventory Special Stock Valuation Type
     *
     * @return self
     */
    public function setInventorySpecialStockValnType($inventory_special_stock_valn_type)
    {
        if (is_null($inventory_special_stock_valn_type)) {
            throw new \InvalidArgumentException('non-nullable inventory_special_stock_valn_type cannot be null');
        }
        if ((mb_strlen($inventory_special_stock_valn_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_valn_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_valn_type'] = $inventory_special_stock_valn_type;

        return $this;
    }

    /**
     * Gets debit_credit_code
     *
     * @return string|null
     */
    public function getDebitCreditCode()
    {
        return $this->container['debit_credit_code'];
    }

    /**
     * Sets debit_credit_code
     *
     * @param string|null $debit_credit_code Debit/Credit Code
     *
     * @return self
     */
    public function setDebitCreditCode($debit_credit_code)
    {
        if (is_null($debit_credit_code)) {
            throw new \InvalidArgumentException('non-nullable debit_credit_code cannot be null');
        }
        if ((mb_strlen($debit_credit_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $debit_credit_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 1.');
        }

        $this->container['debit_credit_code'] = $debit_credit_code;

        return $this;
    }

    /**
     * Gets withdrawn_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\WithdrawnQuantity|null
     */
    public function getWithdrawnQuantity()
    {
        return $this->container['withdrawn_quantity'];
    }

    /**
     * Sets withdrawn_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\WithdrawnQuantity|null $withdrawn_quantity withdrawn_quantity
     *
     * @return self
     */
    public function setWithdrawnQuantity($withdrawn_quantity)
    {
        if (is_null($withdrawn_quantity)) {
            throw new \InvalidArgumentException('non-nullable withdrawn_quantity cannot be null');
        }
        $this->container['withdrawn_quantity'] = $withdrawn_quantity;

        return $this;
    }

    /**
     * Gets quantity_is_fixed
     *
     * @return bool|null
     */
    public function getQuantityIsFixed()
    {
        return $this->container['quantity_is_fixed'];
    }

    /**
     * Sets quantity_is_fixed
     *
     * @param bool|null $quantity_is_fixed quantity_is_fixed
     *
     * @return self
     */
    public function setQuantityIsFixed($quantity_is_fixed)
    {
        if (is_null($quantity_is_fixed)) {
            throw new \InvalidArgumentException('non-nullable quantity_is_fixed cannot be null');
        }
        $this->container['quantity_is_fixed'] = $quantity_is_fixed;

        return $this;
    }

    /**
     * Gets component_scrap_in_percent
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComponentScrap|null
     */
    public function getComponentScrapInPercent()
    {
        return $this->container['component_scrap_in_percent'];
    }

    /**
     * Sets component_scrap_in_percent
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComponentScrap|null $component_scrap_in_percent component_scrap_in_percent
     *
     * @return self
     */
    public function setComponentScrapInPercent($component_scrap_in_percent)
    {
        if (is_null($component_scrap_in_percent)) {
            throw new \InvalidArgumentException('non-nullable component_scrap_in_percent cannot be null');
        }
        $this->container['component_scrap_in_percent'] = $component_scrap_in_percent;

        return $this;
    }

    /**
     * Gets operation_scrap_in_percent
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\OperationScrapIn|null
     */
    public function getOperationScrapInPercent()
    {
        return $this->container['operation_scrap_in_percent'];
    }

    /**
     * Sets operation_scrap_in_percent
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\OperationScrapIn|null $operation_scrap_in_percent operation_scrap_in_percent
     *
     * @return self
     */
    public function setOperationScrapInPercent($operation_scrap_in_percent)
    {
        if (is_null($operation_scrap_in_percent)) {
            throw new \InvalidArgumentException('non-nullable operation_scrap_in_percent cannot be null');
        }
        $this->container['operation_scrap_in_percent'] = $operation_scrap_in_percent;

        return $this;
    }

    /**
     * Gets is_net_scrap
     *
     * @return bool|null
     */
    public function getIsNetScrap()
    {
        return $this->container['is_net_scrap'];
    }

    /**
     * Sets is_net_scrap
     *
     * @param bool|null $is_net_scrap is_net_scrap
     *
     * @return self
     */
    public function setIsNetScrap($is_net_scrap)
    {
        if (is_null($is_net_scrap)) {
            throw new \InvalidArgumentException('non-nullable is_net_scrap cannot be null');
        }
        $this->container['is_net_scrap'] = $is_net_scrap;

        return $this;
    }

    /**
     * Gets lead_time_offset
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\LeadTimeOffset|null
     */
    public function getLeadTimeOffset()
    {
        return $this->container['lead_time_offset'];
    }

    /**
     * Sets lead_time_offset
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\LeadTimeOffset|null $lead_time_offset lead_time_offset
     *
     * @return self
     */
    public function setLeadTimeOffset($lead_time_offset)
    {
        if (is_null($lead_time_offset)) {
            throw new \InvalidArgumentException('non-nullable lead_time_offset cannot be null');
        }
        $this->container['lead_time_offset'] = $lead_time_offset;

        return $this;
    }

    /**
     * Gets quantity_distribution_key
     *
     * @return string|null
     */
    public function getQuantityDistributionKey()
    {
        return $this->container['quantity_distribution_key'];
    }

    /**
     * Sets quantity_distribution_key
     *
     * @param string|null $quantity_distribution_key MRP Distribution Key
     *
     * @return self
     */
    public function setQuantityDistributionKey($quantity_distribution_key)
    {
        if (is_null($quantity_distribution_key)) {
            throw new \InvalidArgumentException('non-nullable quantity_distribution_key cannot be null');
        }
        if ((mb_strlen($quantity_distribution_key) > 4)) {
            throw new \InvalidArgumentException('invalid length for $quantity_distribution_key when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['quantity_distribution_key'] = $quantity_distribution_key;

        return $this;
    }

    /**
     * Gets formula_key
     *
     * @return string|null
     */
    public function getFormulaKey()
    {
        return $this->container['formula_key'];
    }

    /**
     * Sets formula_key
     *
     * @param string|null $formula_key Formula Key for Variable-Size Items
     *
     * @return self
     */
    public function setFormulaKey($formula_key)
    {
        if (is_null($formula_key)) {
            throw new \InvalidArgumentException('non-nullable formula_key cannot be null');
        }
        if ((mb_strlen($formula_key) > 2)) {
            throw new \InvalidArgumentException('invalid length for $formula_key when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 2.');
        }

        $this->container['formula_key'] = $formula_key;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            throw new \InvalidArgumentException('non-nullable storage_location cannot be null');
        }
        if ((mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets production_supply_area
     *
     * @return string|null
     */
    public function getProductionSupplyArea()
    {
        return $this->container['production_supply_area'];
    }

    /**
     * Sets production_supply_area
     *
     * @param string|null $production_supply_area production_supply_area
     *
     * @return self
     */
    public function setProductionSupplyArea($production_supply_area)
    {
        if (is_null($production_supply_area)) {
            throw new \InvalidArgumentException('non-nullable production_supply_area cannot be null');
        }
        if ((mb_strlen($production_supply_area) > 10)) {
            throw new \InvalidArgumentException('invalid length for $production_supply_area when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 10.');
        }

        $this->container['production_supply_area'] = $production_supply_area;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            throw new \InvalidArgumentException('non-nullable batch cannot be null');
        }
        if ((mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets bom_item_description
     *
     * @return string|null
     */
    public function getBomItemDescription()
    {
        return $this->container['bom_item_description'];
    }

    /**
     * Sets bom_item_description
     *
     * @param string|null $bom_item_description BOM Item Text (Line 1)
     *
     * @return self
     */
    public function setBomItemDescription($bom_item_description)
    {
        if (is_null($bom_item_description)) {
            throw new \InvalidArgumentException('non-nullable bom_item_description cannot be null');
        }
        if ((mb_strlen($bom_item_description) > 40)) {
            throw new \InvalidArgumentException('invalid length for $bom_item_description when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 40.');
        }

        $this->container['bom_item_description'] = $bom_item_description;

        return $this;
    }

    /**
     * Gets bom_item_text2
     *
     * @return string|null
     */
    public function getBomItemText2()
    {
        return $this->container['bom_item_text2'];
    }

    /**
     * Sets bom_item_text2
     *
     * @param string|null $bom_item_text2 BOM Item Text (Line 2)
     *
     * @return self
     */
    public function setBomItemText2($bom_item_text2)
    {
        if (is_null($bom_item_text2)) {
            throw new \InvalidArgumentException('non-nullable bom_item_text2 cannot be null');
        }
        if ((mb_strlen($bom_item_text2) > 40)) {
            throw new \InvalidArgumentException('invalid length for $bom_item_text2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 40.');
        }

        $this->container['bom_item_text2'] = $bom_item_text2;

        return $this;
    }

    /**
     * Gets change_number
     *
     * @return string|null
     */
    public function getChangeNumber()
    {
        return $this->container['change_number'];
    }

    /**
     * Sets change_number
     *
     * @param string|null $change_number change_number
     *
     * @return self
     */
    public function setChangeNumber($change_number)
    {
        if (is_null($change_number)) {
            throw new \InvalidArgumentException('non-nullable change_number cannot be null');
        }
        if ((mb_strlen($change_number) > 12)) {
            throw new \InvalidArgumentException('invalid length for $change_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001POSubcontractingComponentType., must be smaller than or equal to 12.');
        }

        $this->container['change_number'] = $change_number;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['_purchase_order'];
    }

    /**
     * Sets _purchase_order
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|null $_purchase_order _purchase_order
     *
     * @return self
     */
    public function setPurchaseOrder($_purchase_order)
    {
        if (is_null($_purchase_order)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order cannot be null');
        }
        $this->container['_purchase_order'] = $_purchase_order;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|null
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }

    /**
     * Gets _schedule_line
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderScheduleLineType|null
     */
    public function getScheduleLine()
    {
        return $this->container['_schedule_line'];
    }

    /**
     * Sets _schedule_line
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderScheduleLineType|null $_schedule_line _schedule_line
     *
     * @return self
     */
    public function setScheduleLine($_schedule_line)
    {
        if (is_null($_schedule_line)) {
            throw new \InvalidArgumentException('non-nullable _schedule_line cannot be null');
        }
        $this->container['_schedule_line'] = $_schedule_line;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


