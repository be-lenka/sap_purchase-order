<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurchaseOrderItem_Type-update';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order_category' => 'string',
        'document_currency' => 'string',
        'material_group' => 'string',
        'material' => 'string',
        'material_type' => 'string',
        'supplier_material_number' => 'string',
        'supplier_subrange' => 'string',
        'manufacturer_part_nmbr' => 'string',
        'manufacturer' => 'string',
        'manufacturer_material' => 'string',
        'purchase_order_item_text' => 'string',
        'product_type_code' => 'string',
        'company_code' => 'string',
        'plant' => 'string',
        'reference_delivery_address_id' => 'string',
        'customer' => 'string',
        'subcontractor' => 'string',
        'supplier_is_subcontractor' => 'bool',
        'cross_plant_configurable_product' => 'string',
        'article_category' => 'string',
        'plnd_order_replnmt_elmnt_type' => 'string',
        'product_purchase_points_qty_unit' => 'string',
        'product_purchase_points_qty' => '\BeLenka\SAP\PurchaseOrder\Model\Points',
        'storage_location' => 'string',
        'purchase_order_quantity_unit' => 'string',
        'order_item_qty_to_base_qty_nmrtr' => '\BeLenka\SAP\PurchaseOrder\Model\EqualTo',
        'order_item_qty_to_base_qty_dnmntr' => '\BeLenka\SAP\PurchaseOrder\Model\Denominator2',
        'net_price_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\PriceUnit',
        'is_completely_delivered' => 'bool',
        'is_finally_invoiced' => 'bool',
        'goods_receipt_is_expected' => 'bool',
        'invoice_is_expected' => 'bool',
        'is_order_ackn_rqd' => 'bool',
        'invoice_is_goods_receipt_based' => 'bool',
        'purchase_contract' => 'string',
        'purchase_contract_item' => 'string',
        'purchase_requisition' => 'string',
        'purchase_requisition_item' => 'string',
        'requirement_tracking' => 'string',
        'supplier_quotation' => 'string',
        'supplier_quotation_item' => 'string',
        'evald_rcpt_settlmt_is_allowed' => 'bool',
        'unlimited_overdelivery_is_allowed' => 'bool',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => '\BeLenka\SAP\PurchaseOrder\Model\OverdelivTolerance',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => '\BeLenka\SAP\PurchaseOrder\Model\UnderdelTolerance',
        'requisitioner_name' => 'string',
        'planned_delivery_duration_in_days' => '\BeLenka\SAP\PurchaseOrder\Model\PlannedDelivTime',
        'goods_receipt_duration_in_days' => '\BeLenka\SAP\PurchaseOrder\Model\GRProcessingTime',
        'partial_delivery_is_allowed' => 'string',
        'consumption_posting' => 'string',
        'service_performer' => 'string',
        'service_package' => 'string',
        'base_unit' => 'string',
        'purchase_order_item_category' => 'string',
        'profit_center' => 'string',
        'order_price_unit' => 'string',
        'item_volume_unit' => 'string',
        'item_weight_unit' => 'string',
        'multiple_acct_assgmt_distribution' => 'string',
        'partial_invoice_distribution' => 'string',
        'pricing_date_control' => 'string',
        'is_statistical_item' => 'bool',
        'purchasing_parent_item' => 'string',
        'goods_receipt_latest_creation_date' => '\DateTime',
        'is_returns_item' => 'bool',
        'purchasing_order_reason' => 'string',
        'incoterms_classification' => 'string',
        'incoterms_transfer_location' => 'string',
        'incoterms_location1' => 'string',
        'incoterms_location2' => 'string',
        'prior_supplier' => 'string',
        'international_article_number' => 'string',
        'intrastat_service_code' => 'string',
        'commodity_code' => 'string',
        'material_freight_group' => 'string',
        'discount_in_kind_eligibility' => 'string',
        'purg_item_is_blocked_for_delivery' => 'bool',
        'supplier_confirmation_control_key' => 'string',
        'purg_doc_order_ackn_number' => 'string',
        'price_is_to_be_printed' => 'bool',
        'account_assignment_category' => 'string',
        'purchasing_info_record' => 'string',
        'net_amount' => '\BeLenka\SAP\PurchaseOrder\Model\NetOrderValue',
        'gross_amount' => '\BeLenka\SAP\PurchaseOrder\Model\GrossOrderValue',
        'effective_amount' => '\BeLenka\SAP\PurchaseOrder\Model\EffectiveValue',
        'subtotal1_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal1',
        'subtotal2_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal2',
        'subtotal3_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal3',
        'subtotal4_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal4',
        'subtotal5_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal5',
        'subtotal6_amount' => '\BeLenka\SAP\PurchaseOrder\Model\Subtotal6',
        'order_quantity' => '\BeLenka\SAP\PurchaseOrder\Model\OrderQuantity',
        'net_price_amount' => '\BeLenka\SAP\PurchaseOrder\Model\NetOrderPrice',
        'item_volume' => '\BeLenka\SAP\PurchaseOrder\Model\Volume',
        'item_gross_weight' => '\BeLenka\SAP\PurchaseOrder\Model\GrossWeight',
        'item_net_weight' => '\BeLenka\SAP\PurchaseOrder\Model\NetWeight',
        'order_price_unit_to_order_unit_nmrtr' => '\BeLenka\SAP\PurchaseOrder\Model\QuantityConversion',
        'ord_price_unit_to_order_unit_dnmntr' => '\BeLenka\SAP\PurchaseOrder\Model\QuantityConversion1',
        'goods_receipt_is_non_valuated' => 'bool',
        'is_to_be_accepted_at_origin' => 'bool',
        'tax_code' => 'string',
        'tax_jurisdiction' => 'string',
        'tax_country' => 'string',
        'tax_determination_date' => '\DateTime',
        'shipping_instruction' => 'string',
        'non_deductible_input_tax_amount' => '\BeLenka\SAP\PurchaseOrder\Model\NonDeductible',
        'stock_type' => 'string',
        'valuation_type' => 'string',
        'valuation_category' => 'string',
        'item_is_rejected_by_supplier' => 'bool',
        'purg_doc_price_date' => '\DateTime',
        'purchasing_info_record_update_code' => 'string',
        'inventory_special_stock_type' => 'string',
        'delivery_document_type' => 'string',
        'issuing_storage_location' => 'string',
        'allocation_table' => 'string',
        'allocation_table_item' => 'string',
        'retail_promotion' => 'string',
        'purg_configurable_item_number' => 'string',
        'purg_doc_aggrgd_subitem_category' => 'string',
        'purg_external_sort_number' => 'string',
        'batch' => 'string',
        'purchasing_item_is_free_of_charge' => 'bool',
        'down_payment_type' => 'string',
        'down_payment_percentage_of_tot_amt' => '\BeLenka\SAP\PurchaseOrder\Model\DownPayment',
        'down_payment_amount' => '\BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount',
        'down_payment_due_date' => '\DateTime',
        'expected_overall_limit_amount' => '\BeLenka\SAP\PurchaseOrder\Model\ExpectedValue',
        'overall_limit_amount' => '\BeLenka\SAP\PurchaseOrder\Model\OverallLimit',
        'pur_contract_for_overall_limit' => 'string',
        'pur_contract_item_for_overall_limit' => 'string',
        'br_material_origin' => 'string',
        'br_material_usage' => 'string',
        'br_cfop_category' => 'string',
        'br_ncm' => 'string',
        'consumption_tax_ctrl_code' => 'string',
        'br_is_produced_in_house' => 'bool',
        'product_season_year' => 'string',
        'product_season' => 'string',
        'product_collection' => 'string',
        'product_theme' => 'string',
        'season_completeness_status' => 'string',
        'shipping_group_rule' => 'string',
        'shipping_group_number' => 'string',
        'product_characteristic1' => 'string',
        'product_characteristic2' => 'string',
        'product_characteristic3' => 'string',
        'purg_doc_subitem_category' => 'string',
        'diversion_status' => 'string',
        'reference_document_number' => 'string',
        'reference_document_item' => 'string',
        'purchase_order_reference_type' => 'string',
        'item_has_value_added_service' => 'bool',
        'val_added_srvc_parent_itm_number' => 'string',
        'stock_segment' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageUpdate[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order_category' => null,
        'document_currency' => null,
        'material_group' => null,
        'material' => null,
        'material_type' => null,
        'supplier_material_number' => null,
        'supplier_subrange' => null,
        'manufacturer_part_nmbr' => null,
        'manufacturer' => null,
        'manufacturer_material' => null,
        'purchase_order_item_text' => null,
        'product_type_code' => null,
        'company_code' => null,
        'plant' => null,
        'reference_delivery_address_id' => null,
        'customer' => null,
        'subcontractor' => null,
        'supplier_is_subcontractor' => null,
        'cross_plant_configurable_product' => null,
        'article_category' => null,
        'plnd_order_replnmt_elmnt_type' => null,
        'product_purchase_points_qty_unit' => null,
        'product_purchase_points_qty' => null,
        'storage_location' => null,
        'purchase_order_quantity_unit' => null,
        'order_item_qty_to_base_qty_nmrtr' => null,
        'order_item_qty_to_base_qty_dnmntr' => null,
        'net_price_quantity' => null,
        'is_completely_delivered' => null,
        'is_finally_invoiced' => null,
        'goods_receipt_is_expected' => null,
        'invoice_is_expected' => null,
        'is_order_ackn_rqd' => null,
        'invoice_is_goods_receipt_based' => null,
        'purchase_contract' => null,
        'purchase_contract_item' => null,
        'purchase_requisition' => null,
        'purchase_requisition_item' => null,
        'requirement_tracking' => null,
        'supplier_quotation' => null,
        'supplier_quotation_item' => null,
        'evald_rcpt_settlmt_is_allowed' => null,
        'unlimited_overdelivery_is_allowed' => null,
        'overdeliv_tolrtd_lmt_ratio_in_pct' => null,
        'underdeliv_tolrtd_lmt_ratio_in_pct' => null,
        'requisitioner_name' => null,
        'planned_delivery_duration_in_days' => null,
        'goods_receipt_duration_in_days' => null,
        'partial_delivery_is_allowed' => null,
        'consumption_posting' => null,
        'service_performer' => null,
        'service_package' => null,
        'base_unit' => null,
        'purchase_order_item_category' => null,
        'profit_center' => null,
        'order_price_unit' => null,
        'item_volume_unit' => null,
        'item_weight_unit' => null,
        'multiple_acct_assgmt_distribution' => null,
        'partial_invoice_distribution' => null,
        'pricing_date_control' => null,
        'is_statistical_item' => null,
        'purchasing_parent_item' => null,
        'goods_receipt_latest_creation_date' => 'date',
        'is_returns_item' => null,
        'purchasing_order_reason' => null,
        'incoterms_classification' => null,
        'incoterms_transfer_location' => null,
        'incoterms_location1' => null,
        'incoterms_location2' => null,
        'prior_supplier' => null,
        'international_article_number' => null,
        'intrastat_service_code' => null,
        'commodity_code' => null,
        'material_freight_group' => null,
        'discount_in_kind_eligibility' => null,
        'purg_item_is_blocked_for_delivery' => null,
        'supplier_confirmation_control_key' => null,
        'purg_doc_order_ackn_number' => null,
        'price_is_to_be_printed' => null,
        'account_assignment_category' => null,
        'purchasing_info_record' => null,
        'net_amount' => null,
        'gross_amount' => null,
        'effective_amount' => null,
        'subtotal1_amount' => null,
        'subtotal2_amount' => null,
        'subtotal3_amount' => null,
        'subtotal4_amount' => null,
        'subtotal5_amount' => null,
        'subtotal6_amount' => null,
        'order_quantity' => null,
        'net_price_amount' => null,
        'item_volume' => null,
        'item_gross_weight' => null,
        'item_net_weight' => null,
        'order_price_unit_to_order_unit_nmrtr' => null,
        'ord_price_unit_to_order_unit_dnmntr' => null,
        'goods_receipt_is_non_valuated' => null,
        'is_to_be_accepted_at_origin' => null,
        'tax_code' => null,
        'tax_jurisdiction' => null,
        'tax_country' => null,
        'tax_determination_date' => 'date',
        'shipping_instruction' => null,
        'non_deductible_input_tax_amount' => null,
        'stock_type' => null,
        'valuation_type' => null,
        'valuation_category' => null,
        'item_is_rejected_by_supplier' => null,
        'purg_doc_price_date' => 'date',
        'purchasing_info_record_update_code' => null,
        'inventory_special_stock_type' => null,
        'delivery_document_type' => null,
        'issuing_storage_location' => null,
        'allocation_table' => null,
        'allocation_table_item' => null,
        'retail_promotion' => null,
        'purg_configurable_item_number' => null,
        'purg_doc_aggrgd_subitem_category' => null,
        'purg_external_sort_number' => null,
        'batch' => null,
        'purchasing_item_is_free_of_charge' => null,
        'down_payment_type' => null,
        'down_payment_percentage_of_tot_amt' => null,
        'down_payment_amount' => null,
        'down_payment_due_date' => 'date',
        'expected_overall_limit_amount' => null,
        'overall_limit_amount' => null,
        'pur_contract_for_overall_limit' => null,
        'pur_contract_item_for_overall_limit' => null,
        'br_material_origin' => null,
        'br_material_usage' => null,
        'br_cfop_category' => null,
        'br_ncm' => null,
        'consumption_tax_ctrl_code' => null,
        'br_is_produced_in_house' => null,
        'product_season_year' => null,
        'product_season' => null,
        'product_collection' => null,
        'product_theme' => null,
        'season_completeness_status' => null,
        'shipping_group_rule' => null,
        'shipping_group_number' => null,
        'product_characteristic1' => null,
        'product_characteristic2' => null,
        'product_characteristic3' => null,
        'purg_doc_subitem_category' => null,
        'diversion_status' => null,
        'reference_document_number' => null,
        'reference_document_item' => null,
        'purchase_order_reference_type' => null,
        'item_has_value_added_service' => null,
        'val_added_srvc_parent_itm_number' => null,
        'stock_segment' => null,
        'sap__messages' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order_category' => false,
		'document_currency' => false,
		'material_group' => false,
		'material' => false,
		'material_type' => false,
		'supplier_material_number' => false,
		'supplier_subrange' => false,
		'manufacturer_part_nmbr' => false,
		'manufacturer' => false,
		'manufacturer_material' => false,
		'purchase_order_item_text' => false,
		'product_type_code' => false,
		'company_code' => false,
		'plant' => false,
		'reference_delivery_address_id' => false,
		'customer' => false,
		'subcontractor' => false,
		'supplier_is_subcontractor' => false,
		'cross_plant_configurable_product' => false,
		'article_category' => false,
		'plnd_order_replnmt_elmnt_type' => false,
		'product_purchase_points_qty_unit' => false,
		'product_purchase_points_qty' => false,
		'storage_location' => false,
		'purchase_order_quantity_unit' => false,
		'order_item_qty_to_base_qty_nmrtr' => false,
		'order_item_qty_to_base_qty_dnmntr' => false,
		'net_price_quantity' => false,
		'is_completely_delivered' => false,
		'is_finally_invoiced' => false,
		'goods_receipt_is_expected' => false,
		'invoice_is_expected' => false,
		'is_order_ackn_rqd' => false,
		'invoice_is_goods_receipt_based' => false,
		'purchase_contract' => false,
		'purchase_contract_item' => false,
		'purchase_requisition' => false,
		'purchase_requisition_item' => false,
		'requirement_tracking' => false,
		'supplier_quotation' => false,
		'supplier_quotation_item' => false,
		'evald_rcpt_settlmt_is_allowed' => false,
		'unlimited_overdelivery_is_allowed' => false,
		'overdeliv_tolrtd_lmt_ratio_in_pct' => false,
		'underdeliv_tolrtd_lmt_ratio_in_pct' => false,
		'requisitioner_name' => false,
		'planned_delivery_duration_in_days' => false,
		'goods_receipt_duration_in_days' => false,
		'partial_delivery_is_allowed' => false,
		'consumption_posting' => false,
		'service_performer' => false,
		'service_package' => false,
		'base_unit' => false,
		'purchase_order_item_category' => false,
		'profit_center' => false,
		'order_price_unit' => false,
		'item_volume_unit' => false,
		'item_weight_unit' => false,
		'multiple_acct_assgmt_distribution' => false,
		'partial_invoice_distribution' => false,
		'pricing_date_control' => false,
		'is_statistical_item' => false,
		'purchasing_parent_item' => false,
		'goods_receipt_latest_creation_date' => true,
		'is_returns_item' => false,
		'purchasing_order_reason' => false,
		'incoterms_classification' => false,
		'incoterms_transfer_location' => false,
		'incoterms_location1' => false,
		'incoterms_location2' => false,
		'prior_supplier' => false,
		'international_article_number' => false,
		'intrastat_service_code' => false,
		'commodity_code' => false,
		'material_freight_group' => false,
		'discount_in_kind_eligibility' => false,
		'purg_item_is_blocked_for_delivery' => false,
		'supplier_confirmation_control_key' => false,
		'purg_doc_order_ackn_number' => false,
		'price_is_to_be_printed' => false,
		'account_assignment_category' => false,
		'purchasing_info_record' => false,
		'net_amount' => false,
		'gross_amount' => false,
		'effective_amount' => false,
		'subtotal1_amount' => false,
		'subtotal2_amount' => false,
		'subtotal3_amount' => false,
		'subtotal4_amount' => false,
		'subtotal5_amount' => false,
		'subtotal6_amount' => false,
		'order_quantity' => false,
		'net_price_amount' => false,
		'item_volume' => false,
		'item_gross_weight' => false,
		'item_net_weight' => false,
		'order_price_unit_to_order_unit_nmrtr' => false,
		'ord_price_unit_to_order_unit_dnmntr' => false,
		'goods_receipt_is_non_valuated' => false,
		'is_to_be_accepted_at_origin' => false,
		'tax_code' => false,
		'tax_jurisdiction' => false,
		'tax_country' => false,
		'tax_determination_date' => true,
		'shipping_instruction' => false,
		'non_deductible_input_tax_amount' => false,
		'stock_type' => false,
		'valuation_type' => false,
		'valuation_category' => false,
		'item_is_rejected_by_supplier' => false,
		'purg_doc_price_date' => true,
		'purchasing_info_record_update_code' => false,
		'inventory_special_stock_type' => false,
		'delivery_document_type' => false,
		'issuing_storage_location' => false,
		'allocation_table' => false,
		'allocation_table_item' => false,
		'retail_promotion' => false,
		'purg_configurable_item_number' => false,
		'purg_doc_aggrgd_subitem_category' => false,
		'purg_external_sort_number' => false,
		'batch' => false,
		'purchasing_item_is_free_of_charge' => false,
		'down_payment_type' => false,
		'down_payment_percentage_of_tot_amt' => false,
		'down_payment_amount' => false,
		'down_payment_due_date' => true,
		'expected_overall_limit_amount' => false,
		'overall_limit_amount' => false,
		'pur_contract_for_overall_limit' => false,
		'pur_contract_item_for_overall_limit' => false,
		'br_material_origin' => false,
		'br_material_usage' => false,
		'br_cfop_category' => false,
		'br_ncm' => false,
		'consumption_tax_ctrl_code' => false,
		'br_is_produced_in_house' => false,
		'product_season_year' => false,
		'product_season' => false,
		'product_collection' => false,
		'product_theme' => false,
		'season_completeness_status' => false,
		'shipping_group_rule' => false,
		'shipping_group_number' => false,
		'product_characteristic1' => false,
		'product_characteristic2' => false,
		'product_characteristic3' => false,
		'purg_doc_subitem_category' => false,
		'diversion_status' => false,
		'reference_document_number' => false,
		'reference_document_item' => false,
		'purchase_order_reference_type' => false,
		'item_has_value_added_service' => false,
		'val_added_srvc_parent_itm_number' => false,
		'stock_segment' => false,
		'sap__messages' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order_category' => 'PurchaseOrderCategory',
        'document_currency' => 'DocumentCurrency',
        'material_group' => 'MaterialGroup',
        'material' => 'Material',
        'material_type' => 'MaterialType',
        'supplier_material_number' => 'SupplierMaterialNumber',
        'supplier_subrange' => 'SupplierSubrange',
        'manufacturer_part_nmbr' => 'ManufacturerPartNmbr',
        'manufacturer' => 'Manufacturer',
        'manufacturer_material' => 'ManufacturerMaterial',
        'purchase_order_item_text' => 'PurchaseOrderItemText',
        'product_type_code' => 'ProductTypeCode',
        'company_code' => 'CompanyCode',
        'plant' => 'Plant',
        'reference_delivery_address_id' => 'ReferenceDeliveryAddressID',
        'customer' => 'Customer',
        'subcontractor' => 'Subcontractor',
        'supplier_is_subcontractor' => 'SupplierIsSubcontractor',
        'cross_plant_configurable_product' => 'CrossPlantConfigurableProduct',
        'article_category' => 'ArticleCategory',
        'plnd_order_replnmt_elmnt_type' => 'PlndOrderReplnmtElmntType',
        'product_purchase_points_qty_unit' => 'ProductPurchasePointsQtyUnit',
        'product_purchase_points_qty' => 'ProductPurchasePointsQty',
        'storage_location' => 'StorageLocation',
        'purchase_order_quantity_unit' => 'PurchaseOrderQuantityUnit',
        'order_item_qty_to_base_qty_nmrtr' => 'OrderItemQtyToBaseQtyNmrtr',
        'order_item_qty_to_base_qty_dnmntr' => 'OrderItemQtyToBaseQtyDnmntr',
        'net_price_quantity' => 'NetPriceQuantity',
        'is_completely_delivered' => 'IsCompletelyDelivered',
        'is_finally_invoiced' => 'IsFinallyInvoiced',
        'goods_receipt_is_expected' => 'GoodsReceiptIsExpected',
        'invoice_is_expected' => 'InvoiceIsExpected',
        'is_order_ackn_rqd' => 'IsOrderAcknRqd',
        'invoice_is_goods_receipt_based' => 'InvoiceIsGoodsReceiptBased',
        'purchase_contract' => 'PurchaseContract',
        'purchase_contract_item' => 'PurchaseContractItem',
        'purchase_requisition' => 'PurchaseRequisition',
        'purchase_requisition_item' => 'PurchaseRequisitionItem',
        'requirement_tracking' => 'RequirementTracking',
        'supplier_quotation' => 'SupplierQuotation',
        'supplier_quotation_item' => 'SupplierQuotationItem',
        'evald_rcpt_settlmt_is_allowed' => 'EvaldRcptSettlmtIsAllowed',
        'unlimited_overdelivery_is_allowed' => 'UnlimitedOverdeliveryIsAllowed',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'OverdelivTolrtdLmtRatioInPct',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'UnderdelivTolrtdLmtRatioInPct',
        'requisitioner_name' => 'RequisitionerName',
        'planned_delivery_duration_in_days' => 'PlannedDeliveryDurationInDays',
        'goods_receipt_duration_in_days' => 'GoodsReceiptDurationInDays',
        'partial_delivery_is_allowed' => 'PartialDeliveryIsAllowed',
        'consumption_posting' => 'ConsumptionPosting',
        'service_performer' => 'ServicePerformer',
        'service_package' => 'ServicePackage',
        'base_unit' => 'BaseUnit',
        'purchase_order_item_category' => 'PurchaseOrderItemCategory',
        'profit_center' => 'ProfitCenter',
        'order_price_unit' => 'OrderPriceUnit',
        'item_volume_unit' => 'ItemVolumeUnit',
        'item_weight_unit' => 'ItemWeightUnit',
        'multiple_acct_assgmt_distribution' => 'MultipleAcctAssgmtDistribution',
        'partial_invoice_distribution' => 'PartialInvoiceDistribution',
        'pricing_date_control' => 'PricingDateControl',
        'is_statistical_item' => 'IsStatisticalItem',
        'purchasing_parent_item' => 'PurchasingParentItem',
        'goods_receipt_latest_creation_date' => 'GoodsReceiptLatestCreationDate',
        'is_returns_item' => 'IsReturnsItem',
        'purchasing_order_reason' => 'PurchasingOrderReason',
        'incoterms_classification' => 'IncotermsClassification',
        'incoterms_transfer_location' => 'IncotermsTransferLocation',
        'incoterms_location1' => 'IncotermsLocation1',
        'incoterms_location2' => 'IncotermsLocation2',
        'prior_supplier' => 'PriorSupplier',
        'international_article_number' => 'InternationalArticleNumber',
        'intrastat_service_code' => 'IntrastatServiceCode',
        'commodity_code' => 'CommodityCode',
        'material_freight_group' => 'MaterialFreightGroup',
        'discount_in_kind_eligibility' => 'DiscountInKindEligibility',
        'purg_item_is_blocked_for_delivery' => 'PurgItemIsBlockedForDelivery',
        'supplier_confirmation_control_key' => 'SupplierConfirmationControlKey',
        'purg_doc_order_ackn_number' => 'PurgDocOrderAcknNumber',
        'price_is_to_be_printed' => 'PriceIsToBePrinted',
        'account_assignment_category' => 'AccountAssignmentCategory',
        'purchasing_info_record' => 'PurchasingInfoRecord',
        'net_amount' => 'NetAmount',
        'gross_amount' => 'GrossAmount',
        'effective_amount' => 'EffectiveAmount',
        'subtotal1_amount' => 'Subtotal1Amount',
        'subtotal2_amount' => 'Subtotal2Amount',
        'subtotal3_amount' => 'Subtotal3Amount',
        'subtotal4_amount' => 'Subtotal4Amount',
        'subtotal5_amount' => 'Subtotal5Amount',
        'subtotal6_amount' => 'Subtotal6Amount',
        'order_quantity' => 'OrderQuantity',
        'net_price_amount' => 'NetPriceAmount',
        'item_volume' => 'ItemVolume',
        'item_gross_weight' => 'ItemGrossWeight',
        'item_net_weight' => 'ItemNetWeight',
        'order_price_unit_to_order_unit_nmrtr' => 'OrderPriceUnitToOrderUnitNmrtr',
        'ord_price_unit_to_order_unit_dnmntr' => 'OrdPriceUnitToOrderUnitDnmntr',
        'goods_receipt_is_non_valuated' => 'GoodsReceiptIsNonValuated',
        'is_to_be_accepted_at_origin' => 'IsToBeAcceptedAtOrigin',
        'tax_code' => 'TaxCode',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'tax_country' => 'TaxCountry',
        'tax_determination_date' => 'TaxDeterminationDate',
        'shipping_instruction' => 'ShippingInstruction',
        'non_deductible_input_tax_amount' => 'NonDeductibleInputTaxAmount',
        'stock_type' => 'StockType',
        'valuation_type' => 'ValuationType',
        'valuation_category' => 'ValuationCategory',
        'item_is_rejected_by_supplier' => 'ItemIsRejectedBySupplier',
        'purg_doc_price_date' => 'PurgDocPriceDate',
        'purchasing_info_record_update_code' => 'PurchasingInfoRecordUpdateCode',
        'inventory_special_stock_type' => 'InventorySpecialStockType',
        'delivery_document_type' => 'DeliveryDocumentType',
        'issuing_storage_location' => 'IssuingStorageLocation',
        'allocation_table' => 'AllocationTable',
        'allocation_table_item' => 'AllocationTableItem',
        'retail_promotion' => 'RetailPromotion',
        'purg_configurable_item_number' => 'PurgConfigurableItemNumber',
        'purg_doc_aggrgd_subitem_category' => 'PurgDocAggrgdSubitemCategory',
        'purg_external_sort_number' => 'PurgExternalSortNumber',
        'batch' => 'Batch',
        'purchasing_item_is_free_of_charge' => 'PurchasingItemIsFreeOfCharge',
        'down_payment_type' => 'DownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'DownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'DownPaymentAmount',
        'down_payment_due_date' => 'DownPaymentDueDate',
        'expected_overall_limit_amount' => 'ExpectedOverallLimitAmount',
        'overall_limit_amount' => 'OverallLimitAmount',
        'pur_contract_for_overall_limit' => 'PurContractForOverallLimit',
        'pur_contract_item_for_overall_limit' => 'PurContractItemForOverallLimit',
        'br_material_origin' => 'BR_MaterialOrigin',
        'br_material_usage' => 'BR_MaterialUsage',
        'br_cfop_category' => 'BR_CFOPCategory',
        'br_ncm' => 'BR_NCM',
        'consumption_tax_ctrl_code' => 'ConsumptionTaxCtrlCode',
        'br_is_produced_in_house' => 'BR_IsProducedInHouse',
        'product_season_year' => 'ProductSeasonYear',
        'product_season' => 'ProductSeason',
        'product_collection' => 'ProductCollection',
        'product_theme' => 'ProductTheme',
        'season_completeness_status' => 'SeasonCompletenessStatus',
        'shipping_group_rule' => 'ShippingGroupRule',
        'shipping_group_number' => 'ShippingGroupNumber',
        'product_characteristic1' => 'ProductCharacteristic1',
        'product_characteristic2' => 'ProductCharacteristic2',
        'product_characteristic3' => 'ProductCharacteristic3',
        'purg_doc_subitem_category' => 'PurgDocSubitemCategory',
        'diversion_status' => 'DiversionStatus',
        'reference_document_number' => 'ReferenceDocumentNumber',
        'reference_document_item' => 'ReferenceDocumentItem',
        'purchase_order_reference_type' => 'PurchaseOrderReferenceType',
        'item_has_value_added_service' => 'ItemHasValueAddedService',
        'val_added_srvc_parent_itm_number' => 'ValAddedSrvcParentItmNumber',
        'stock_segment' => 'StockSegment',
        'sap__messages' => 'SAP__Messages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order_category' => 'setPurchaseOrderCategory',
        'document_currency' => 'setDocumentCurrency',
        'material_group' => 'setMaterialGroup',
        'material' => 'setMaterial',
        'material_type' => 'setMaterialType',
        'supplier_material_number' => 'setSupplierMaterialNumber',
        'supplier_subrange' => 'setSupplierSubrange',
        'manufacturer_part_nmbr' => 'setManufacturerPartNmbr',
        'manufacturer' => 'setManufacturer',
        'manufacturer_material' => 'setManufacturerMaterial',
        'purchase_order_item_text' => 'setPurchaseOrderItemText',
        'product_type_code' => 'setProductTypeCode',
        'company_code' => 'setCompanyCode',
        'plant' => 'setPlant',
        'reference_delivery_address_id' => 'setReferenceDeliveryAddressId',
        'customer' => 'setCustomer',
        'subcontractor' => 'setSubcontractor',
        'supplier_is_subcontractor' => 'setSupplierIsSubcontractor',
        'cross_plant_configurable_product' => 'setCrossPlantConfigurableProduct',
        'article_category' => 'setArticleCategory',
        'plnd_order_replnmt_elmnt_type' => 'setPlndOrderReplnmtElmntType',
        'product_purchase_points_qty_unit' => 'setProductPurchasePointsQtyUnit',
        'product_purchase_points_qty' => 'setProductPurchasePointsQty',
        'storage_location' => 'setStorageLocation',
        'purchase_order_quantity_unit' => 'setPurchaseOrderQuantityUnit',
        'order_item_qty_to_base_qty_nmrtr' => 'setOrderItemQtyToBaseQtyNmrtr',
        'order_item_qty_to_base_qty_dnmntr' => 'setOrderItemQtyToBaseQtyDnmntr',
        'net_price_quantity' => 'setNetPriceQuantity',
        'is_completely_delivered' => 'setIsCompletelyDelivered',
        'is_finally_invoiced' => 'setIsFinallyInvoiced',
        'goods_receipt_is_expected' => 'setGoodsReceiptIsExpected',
        'invoice_is_expected' => 'setInvoiceIsExpected',
        'is_order_ackn_rqd' => 'setIsOrderAcknRqd',
        'invoice_is_goods_receipt_based' => 'setInvoiceIsGoodsReceiptBased',
        'purchase_contract' => 'setPurchaseContract',
        'purchase_contract_item' => 'setPurchaseContractItem',
        'purchase_requisition' => 'setPurchaseRequisition',
        'purchase_requisition_item' => 'setPurchaseRequisitionItem',
        'requirement_tracking' => 'setRequirementTracking',
        'supplier_quotation' => 'setSupplierQuotation',
        'supplier_quotation_item' => 'setSupplierQuotationItem',
        'evald_rcpt_settlmt_is_allowed' => 'setEvaldRcptSettlmtIsAllowed',
        'unlimited_overdelivery_is_allowed' => 'setUnlimitedOverdeliveryIsAllowed',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'setOverdelivTolrtdLmtRatioInPct',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'setUnderdelivTolrtdLmtRatioInPct',
        'requisitioner_name' => 'setRequisitionerName',
        'planned_delivery_duration_in_days' => 'setPlannedDeliveryDurationInDays',
        'goods_receipt_duration_in_days' => 'setGoodsReceiptDurationInDays',
        'partial_delivery_is_allowed' => 'setPartialDeliveryIsAllowed',
        'consumption_posting' => 'setConsumptionPosting',
        'service_performer' => 'setServicePerformer',
        'service_package' => 'setServicePackage',
        'base_unit' => 'setBaseUnit',
        'purchase_order_item_category' => 'setPurchaseOrderItemCategory',
        'profit_center' => 'setProfitCenter',
        'order_price_unit' => 'setOrderPriceUnit',
        'item_volume_unit' => 'setItemVolumeUnit',
        'item_weight_unit' => 'setItemWeightUnit',
        'multiple_acct_assgmt_distribution' => 'setMultipleAcctAssgmtDistribution',
        'partial_invoice_distribution' => 'setPartialInvoiceDistribution',
        'pricing_date_control' => 'setPricingDateControl',
        'is_statistical_item' => 'setIsStatisticalItem',
        'purchasing_parent_item' => 'setPurchasingParentItem',
        'goods_receipt_latest_creation_date' => 'setGoodsReceiptLatestCreationDate',
        'is_returns_item' => 'setIsReturnsItem',
        'purchasing_order_reason' => 'setPurchasingOrderReason',
        'incoterms_classification' => 'setIncotermsClassification',
        'incoterms_transfer_location' => 'setIncotermsTransferLocation',
        'incoterms_location1' => 'setIncotermsLocation1',
        'incoterms_location2' => 'setIncotermsLocation2',
        'prior_supplier' => 'setPriorSupplier',
        'international_article_number' => 'setInternationalArticleNumber',
        'intrastat_service_code' => 'setIntrastatServiceCode',
        'commodity_code' => 'setCommodityCode',
        'material_freight_group' => 'setMaterialFreightGroup',
        'discount_in_kind_eligibility' => 'setDiscountInKindEligibility',
        'purg_item_is_blocked_for_delivery' => 'setPurgItemIsBlockedForDelivery',
        'supplier_confirmation_control_key' => 'setSupplierConfirmationControlKey',
        'purg_doc_order_ackn_number' => 'setPurgDocOrderAcknNumber',
        'price_is_to_be_printed' => 'setPriceIsToBePrinted',
        'account_assignment_category' => 'setAccountAssignmentCategory',
        'purchasing_info_record' => 'setPurchasingInfoRecord',
        'net_amount' => 'setNetAmount',
        'gross_amount' => 'setGrossAmount',
        'effective_amount' => 'setEffectiveAmount',
        'subtotal1_amount' => 'setSubtotal1Amount',
        'subtotal2_amount' => 'setSubtotal2Amount',
        'subtotal3_amount' => 'setSubtotal3Amount',
        'subtotal4_amount' => 'setSubtotal4Amount',
        'subtotal5_amount' => 'setSubtotal5Amount',
        'subtotal6_amount' => 'setSubtotal6Amount',
        'order_quantity' => 'setOrderQuantity',
        'net_price_amount' => 'setNetPriceAmount',
        'item_volume' => 'setItemVolume',
        'item_gross_weight' => 'setItemGrossWeight',
        'item_net_weight' => 'setItemNetWeight',
        'order_price_unit_to_order_unit_nmrtr' => 'setOrderPriceUnitToOrderUnitNmrtr',
        'ord_price_unit_to_order_unit_dnmntr' => 'setOrdPriceUnitToOrderUnitDnmntr',
        'goods_receipt_is_non_valuated' => 'setGoodsReceiptIsNonValuated',
        'is_to_be_accepted_at_origin' => 'setIsToBeAcceptedAtOrigin',
        'tax_code' => 'setTaxCode',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'tax_country' => 'setTaxCountry',
        'tax_determination_date' => 'setTaxDeterminationDate',
        'shipping_instruction' => 'setShippingInstruction',
        'non_deductible_input_tax_amount' => 'setNonDeductibleInputTaxAmount',
        'stock_type' => 'setStockType',
        'valuation_type' => 'setValuationType',
        'valuation_category' => 'setValuationCategory',
        'item_is_rejected_by_supplier' => 'setItemIsRejectedBySupplier',
        'purg_doc_price_date' => 'setPurgDocPriceDate',
        'purchasing_info_record_update_code' => 'setPurchasingInfoRecordUpdateCode',
        'inventory_special_stock_type' => 'setInventorySpecialStockType',
        'delivery_document_type' => 'setDeliveryDocumentType',
        'issuing_storage_location' => 'setIssuingStorageLocation',
        'allocation_table' => 'setAllocationTable',
        'allocation_table_item' => 'setAllocationTableItem',
        'retail_promotion' => 'setRetailPromotion',
        'purg_configurable_item_number' => 'setPurgConfigurableItemNumber',
        'purg_doc_aggrgd_subitem_category' => 'setPurgDocAggrgdSubitemCategory',
        'purg_external_sort_number' => 'setPurgExternalSortNumber',
        'batch' => 'setBatch',
        'purchasing_item_is_free_of_charge' => 'setPurchasingItemIsFreeOfCharge',
        'down_payment_type' => 'setDownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'setDownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'setDownPaymentAmount',
        'down_payment_due_date' => 'setDownPaymentDueDate',
        'expected_overall_limit_amount' => 'setExpectedOverallLimitAmount',
        'overall_limit_amount' => 'setOverallLimitAmount',
        'pur_contract_for_overall_limit' => 'setPurContractForOverallLimit',
        'pur_contract_item_for_overall_limit' => 'setPurContractItemForOverallLimit',
        'br_material_origin' => 'setBrMaterialOrigin',
        'br_material_usage' => 'setBrMaterialUsage',
        'br_cfop_category' => 'setBrCfopCategory',
        'br_ncm' => 'setBrNcm',
        'consumption_tax_ctrl_code' => 'setConsumptionTaxCtrlCode',
        'br_is_produced_in_house' => 'setBrIsProducedInHouse',
        'product_season_year' => 'setProductSeasonYear',
        'product_season' => 'setProductSeason',
        'product_collection' => 'setProductCollection',
        'product_theme' => 'setProductTheme',
        'season_completeness_status' => 'setSeasonCompletenessStatus',
        'shipping_group_rule' => 'setShippingGroupRule',
        'shipping_group_number' => 'setShippingGroupNumber',
        'product_characteristic1' => 'setProductCharacteristic1',
        'product_characteristic2' => 'setProductCharacteristic2',
        'product_characteristic3' => 'setProductCharacteristic3',
        'purg_doc_subitem_category' => 'setPurgDocSubitemCategory',
        'diversion_status' => 'setDiversionStatus',
        'reference_document_number' => 'setReferenceDocumentNumber',
        'reference_document_item' => 'setReferenceDocumentItem',
        'purchase_order_reference_type' => 'setPurchaseOrderReferenceType',
        'item_has_value_added_service' => 'setItemHasValueAddedService',
        'val_added_srvc_parent_itm_number' => 'setValAddedSrvcParentItmNumber',
        'stock_segment' => 'setStockSegment',
        'sap__messages' => 'setSapMessages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order_category' => 'getPurchaseOrderCategory',
        'document_currency' => 'getDocumentCurrency',
        'material_group' => 'getMaterialGroup',
        'material' => 'getMaterial',
        'material_type' => 'getMaterialType',
        'supplier_material_number' => 'getSupplierMaterialNumber',
        'supplier_subrange' => 'getSupplierSubrange',
        'manufacturer_part_nmbr' => 'getManufacturerPartNmbr',
        'manufacturer' => 'getManufacturer',
        'manufacturer_material' => 'getManufacturerMaterial',
        'purchase_order_item_text' => 'getPurchaseOrderItemText',
        'product_type_code' => 'getProductTypeCode',
        'company_code' => 'getCompanyCode',
        'plant' => 'getPlant',
        'reference_delivery_address_id' => 'getReferenceDeliveryAddressId',
        'customer' => 'getCustomer',
        'subcontractor' => 'getSubcontractor',
        'supplier_is_subcontractor' => 'getSupplierIsSubcontractor',
        'cross_plant_configurable_product' => 'getCrossPlantConfigurableProduct',
        'article_category' => 'getArticleCategory',
        'plnd_order_replnmt_elmnt_type' => 'getPlndOrderReplnmtElmntType',
        'product_purchase_points_qty_unit' => 'getProductPurchasePointsQtyUnit',
        'product_purchase_points_qty' => 'getProductPurchasePointsQty',
        'storage_location' => 'getStorageLocation',
        'purchase_order_quantity_unit' => 'getPurchaseOrderQuantityUnit',
        'order_item_qty_to_base_qty_nmrtr' => 'getOrderItemQtyToBaseQtyNmrtr',
        'order_item_qty_to_base_qty_dnmntr' => 'getOrderItemQtyToBaseQtyDnmntr',
        'net_price_quantity' => 'getNetPriceQuantity',
        'is_completely_delivered' => 'getIsCompletelyDelivered',
        'is_finally_invoiced' => 'getIsFinallyInvoiced',
        'goods_receipt_is_expected' => 'getGoodsReceiptIsExpected',
        'invoice_is_expected' => 'getInvoiceIsExpected',
        'is_order_ackn_rqd' => 'getIsOrderAcknRqd',
        'invoice_is_goods_receipt_based' => 'getInvoiceIsGoodsReceiptBased',
        'purchase_contract' => 'getPurchaseContract',
        'purchase_contract_item' => 'getPurchaseContractItem',
        'purchase_requisition' => 'getPurchaseRequisition',
        'purchase_requisition_item' => 'getPurchaseRequisitionItem',
        'requirement_tracking' => 'getRequirementTracking',
        'supplier_quotation' => 'getSupplierQuotation',
        'supplier_quotation_item' => 'getSupplierQuotationItem',
        'evald_rcpt_settlmt_is_allowed' => 'getEvaldRcptSettlmtIsAllowed',
        'unlimited_overdelivery_is_allowed' => 'getUnlimitedOverdeliveryIsAllowed',
        'overdeliv_tolrtd_lmt_ratio_in_pct' => 'getOverdelivTolrtdLmtRatioInPct',
        'underdeliv_tolrtd_lmt_ratio_in_pct' => 'getUnderdelivTolrtdLmtRatioInPct',
        'requisitioner_name' => 'getRequisitionerName',
        'planned_delivery_duration_in_days' => 'getPlannedDeliveryDurationInDays',
        'goods_receipt_duration_in_days' => 'getGoodsReceiptDurationInDays',
        'partial_delivery_is_allowed' => 'getPartialDeliveryIsAllowed',
        'consumption_posting' => 'getConsumptionPosting',
        'service_performer' => 'getServicePerformer',
        'service_package' => 'getServicePackage',
        'base_unit' => 'getBaseUnit',
        'purchase_order_item_category' => 'getPurchaseOrderItemCategory',
        'profit_center' => 'getProfitCenter',
        'order_price_unit' => 'getOrderPriceUnit',
        'item_volume_unit' => 'getItemVolumeUnit',
        'item_weight_unit' => 'getItemWeightUnit',
        'multiple_acct_assgmt_distribution' => 'getMultipleAcctAssgmtDistribution',
        'partial_invoice_distribution' => 'getPartialInvoiceDistribution',
        'pricing_date_control' => 'getPricingDateControl',
        'is_statistical_item' => 'getIsStatisticalItem',
        'purchasing_parent_item' => 'getPurchasingParentItem',
        'goods_receipt_latest_creation_date' => 'getGoodsReceiptLatestCreationDate',
        'is_returns_item' => 'getIsReturnsItem',
        'purchasing_order_reason' => 'getPurchasingOrderReason',
        'incoterms_classification' => 'getIncotermsClassification',
        'incoterms_transfer_location' => 'getIncotermsTransferLocation',
        'incoterms_location1' => 'getIncotermsLocation1',
        'incoterms_location2' => 'getIncotermsLocation2',
        'prior_supplier' => 'getPriorSupplier',
        'international_article_number' => 'getInternationalArticleNumber',
        'intrastat_service_code' => 'getIntrastatServiceCode',
        'commodity_code' => 'getCommodityCode',
        'material_freight_group' => 'getMaterialFreightGroup',
        'discount_in_kind_eligibility' => 'getDiscountInKindEligibility',
        'purg_item_is_blocked_for_delivery' => 'getPurgItemIsBlockedForDelivery',
        'supplier_confirmation_control_key' => 'getSupplierConfirmationControlKey',
        'purg_doc_order_ackn_number' => 'getPurgDocOrderAcknNumber',
        'price_is_to_be_printed' => 'getPriceIsToBePrinted',
        'account_assignment_category' => 'getAccountAssignmentCategory',
        'purchasing_info_record' => 'getPurchasingInfoRecord',
        'net_amount' => 'getNetAmount',
        'gross_amount' => 'getGrossAmount',
        'effective_amount' => 'getEffectiveAmount',
        'subtotal1_amount' => 'getSubtotal1Amount',
        'subtotal2_amount' => 'getSubtotal2Amount',
        'subtotal3_amount' => 'getSubtotal3Amount',
        'subtotal4_amount' => 'getSubtotal4Amount',
        'subtotal5_amount' => 'getSubtotal5Amount',
        'subtotal6_amount' => 'getSubtotal6Amount',
        'order_quantity' => 'getOrderQuantity',
        'net_price_amount' => 'getNetPriceAmount',
        'item_volume' => 'getItemVolume',
        'item_gross_weight' => 'getItemGrossWeight',
        'item_net_weight' => 'getItemNetWeight',
        'order_price_unit_to_order_unit_nmrtr' => 'getOrderPriceUnitToOrderUnitNmrtr',
        'ord_price_unit_to_order_unit_dnmntr' => 'getOrdPriceUnitToOrderUnitDnmntr',
        'goods_receipt_is_non_valuated' => 'getGoodsReceiptIsNonValuated',
        'is_to_be_accepted_at_origin' => 'getIsToBeAcceptedAtOrigin',
        'tax_code' => 'getTaxCode',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'tax_country' => 'getTaxCountry',
        'tax_determination_date' => 'getTaxDeterminationDate',
        'shipping_instruction' => 'getShippingInstruction',
        'non_deductible_input_tax_amount' => 'getNonDeductibleInputTaxAmount',
        'stock_type' => 'getStockType',
        'valuation_type' => 'getValuationType',
        'valuation_category' => 'getValuationCategory',
        'item_is_rejected_by_supplier' => 'getItemIsRejectedBySupplier',
        'purg_doc_price_date' => 'getPurgDocPriceDate',
        'purchasing_info_record_update_code' => 'getPurchasingInfoRecordUpdateCode',
        'inventory_special_stock_type' => 'getInventorySpecialStockType',
        'delivery_document_type' => 'getDeliveryDocumentType',
        'issuing_storage_location' => 'getIssuingStorageLocation',
        'allocation_table' => 'getAllocationTable',
        'allocation_table_item' => 'getAllocationTableItem',
        'retail_promotion' => 'getRetailPromotion',
        'purg_configurable_item_number' => 'getPurgConfigurableItemNumber',
        'purg_doc_aggrgd_subitem_category' => 'getPurgDocAggrgdSubitemCategory',
        'purg_external_sort_number' => 'getPurgExternalSortNumber',
        'batch' => 'getBatch',
        'purchasing_item_is_free_of_charge' => 'getPurchasingItemIsFreeOfCharge',
        'down_payment_type' => 'getDownPaymentType',
        'down_payment_percentage_of_tot_amt' => 'getDownPaymentPercentageOfTotAmt',
        'down_payment_amount' => 'getDownPaymentAmount',
        'down_payment_due_date' => 'getDownPaymentDueDate',
        'expected_overall_limit_amount' => 'getExpectedOverallLimitAmount',
        'overall_limit_amount' => 'getOverallLimitAmount',
        'pur_contract_for_overall_limit' => 'getPurContractForOverallLimit',
        'pur_contract_item_for_overall_limit' => 'getPurContractItemForOverallLimit',
        'br_material_origin' => 'getBrMaterialOrigin',
        'br_material_usage' => 'getBrMaterialUsage',
        'br_cfop_category' => 'getBrCfopCategory',
        'br_ncm' => 'getBrNcm',
        'consumption_tax_ctrl_code' => 'getConsumptionTaxCtrlCode',
        'br_is_produced_in_house' => 'getBrIsProducedInHouse',
        'product_season_year' => 'getProductSeasonYear',
        'product_season' => 'getProductSeason',
        'product_collection' => 'getProductCollection',
        'product_theme' => 'getProductTheme',
        'season_completeness_status' => 'getSeasonCompletenessStatus',
        'shipping_group_rule' => 'getShippingGroupRule',
        'shipping_group_number' => 'getShippingGroupNumber',
        'product_characteristic1' => 'getProductCharacteristic1',
        'product_characteristic2' => 'getProductCharacteristic2',
        'product_characteristic3' => 'getProductCharacteristic3',
        'purg_doc_subitem_category' => 'getPurgDocSubitemCategory',
        'diversion_status' => 'getDiversionStatus',
        'reference_document_number' => 'getReferenceDocumentNumber',
        'reference_document_item' => 'getReferenceDocumentItem',
        'purchase_order_reference_type' => 'getPurchaseOrderReferenceType',
        'item_has_value_added_service' => 'getItemHasValueAddedService',
        'val_added_srvc_parent_itm_number' => 'getValAddedSrvcParentItmNumber',
        'stock_segment' => 'getStockSegment',
        'sap__messages' => 'getSapMessages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order_category', $data ?? [], null);
        $this->setIfExists('document_currency', $data ?? [], null);
        $this->setIfExists('material_group', $data ?? [], null);
        $this->setIfExists('material', $data ?? [], null);
        $this->setIfExists('material_type', $data ?? [], null);
        $this->setIfExists('supplier_material_number', $data ?? [], null);
        $this->setIfExists('supplier_subrange', $data ?? [], null);
        $this->setIfExists('manufacturer_part_nmbr', $data ?? [], null);
        $this->setIfExists('manufacturer', $data ?? [], null);
        $this->setIfExists('manufacturer_material', $data ?? [], null);
        $this->setIfExists('purchase_order_item_text', $data ?? [], null);
        $this->setIfExists('product_type_code', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('plant', $data ?? [], null);
        $this->setIfExists('reference_delivery_address_id', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('subcontractor', $data ?? [], null);
        $this->setIfExists('supplier_is_subcontractor', $data ?? [], null);
        $this->setIfExists('cross_plant_configurable_product', $data ?? [], null);
        $this->setIfExists('article_category', $data ?? [], null);
        $this->setIfExists('plnd_order_replnmt_elmnt_type', $data ?? [], null);
        $this->setIfExists('product_purchase_points_qty_unit', $data ?? [], null);
        $this->setIfExists('product_purchase_points_qty', $data ?? [], null);
        $this->setIfExists('storage_location', $data ?? [], null);
        $this->setIfExists('purchase_order_quantity_unit', $data ?? [], null);
        $this->setIfExists('order_item_qty_to_base_qty_nmrtr', $data ?? [], null);
        $this->setIfExists('order_item_qty_to_base_qty_dnmntr', $data ?? [], null);
        $this->setIfExists('net_price_quantity', $data ?? [], null);
        $this->setIfExists('is_completely_delivered', $data ?? [], null);
        $this->setIfExists('is_finally_invoiced', $data ?? [], null);
        $this->setIfExists('goods_receipt_is_expected', $data ?? [], null);
        $this->setIfExists('invoice_is_expected', $data ?? [], null);
        $this->setIfExists('is_order_ackn_rqd', $data ?? [], null);
        $this->setIfExists('invoice_is_goods_receipt_based', $data ?? [], null);
        $this->setIfExists('purchase_contract', $data ?? [], null);
        $this->setIfExists('purchase_contract_item', $data ?? [], null);
        $this->setIfExists('purchase_requisition', $data ?? [], null);
        $this->setIfExists('purchase_requisition_item', $data ?? [], null);
        $this->setIfExists('requirement_tracking', $data ?? [], null);
        $this->setIfExists('supplier_quotation', $data ?? [], null);
        $this->setIfExists('supplier_quotation_item', $data ?? [], null);
        $this->setIfExists('evald_rcpt_settlmt_is_allowed', $data ?? [], null);
        $this->setIfExists('unlimited_overdelivery_is_allowed', $data ?? [], null);
        $this->setIfExists('overdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('underdeliv_tolrtd_lmt_ratio_in_pct', $data ?? [], null);
        $this->setIfExists('requisitioner_name', $data ?? [], null);
        $this->setIfExists('planned_delivery_duration_in_days', $data ?? [], null);
        $this->setIfExists('goods_receipt_duration_in_days', $data ?? [], null);
        $this->setIfExists('partial_delivery_is_allowed', $data ?? [], null);
        $this->setIfExists('consumption_posting', $data ?? [], null);
        $this->setIfExists('service_performer', $data ?? [], null);
        $this->setIfExists('service_package', $data ?? [], null);
        $this->setIfExists('base_unit', $data ?? [], null);
        $this->setIfExists('purchase_order_item_category', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('order_price_unit', $data ?? [], null);
        $this->setIfExists('item_volume_unit', $data ?? [], null);
        $this->setIfExists('item_weight_unit', $data ?? [], null);
        $this->setIfExists('multiple_acct_assgmt_distribution', $data ?? [], null);
        $this->setIfExists('partial_invoice_distribution', $data ?? [], null);
        $this->setIfExists('pricing_date_control', $data ?? [], null);
        $this->setIfExists('is_statistical_item', $data ?? [], null);
        $this->setIfExists('purchasing_parent_item', $data ?? [], null);
        $this->setIfExists('goods_receipt_latest_creation_date', $data ?? [], null);
        $this->setIfExists('is_returns_item', $data ?? [], null);
        $this->setIfExists('purchasing_order_reason', $data ?? [], null);
        $this->setIfExists('incoterms_classification', $data ?? [], null);
        $this->setIfExists('incoterms_transfer_location', $data ?? [], null);
        $this->setIfExists('incoterms_location1', $data ?? [], null);
        $this->setIfExists('incoterms_location2', $data ?? [], null);
        $this->setIfExists('prior_supplier', $data ?? [], null);
        $this->setIfExists('international_article_number', $data ?? [], null);
        $this->setIfExists('intrastat_service_code', $data ?? [], null);
        $this->setIfExists('commodity_code', $data ?? [], null);
        $this->setIfExists('material_freight_group', $data ?? [], null);
        $this->setIfExists('discount_in_kind_eligibility', $data ?? [], null);
        $this->setIfExists('purg_item_is_blocked_for_delivery', $data ?? [], null);
        $this->setIfExists('supplier_confirmation_control_key', $data ?? [], null);
        $this->setIfExists('purg_doc_order_ackn_number', $data ?? [], null);
        $this->setIfExists('price_is_to_be_printed', $data ?? [], null);
        $this->setIfExists('account_assignment_category', $data ?? [], null);
        $this->setIfExists('purchasing_info_record', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('effective_amount', $data ?? [], null);
        $this->setIfExists('subtotal1_amount', $data ?? [], null);
        $this->setIfExists('subtotal2_amount', $data ?? [], null);
        $this->setIfExists('subtotal3_amount', $data ?? [], null);
        $this->setIfExists('subtotal4_amount', $data ?? [], null);
        $this->setIfExists('subtotal5_amount', $data ?? [], null);
        $this->setIfExists('subtotal6_amount', $data ?? [], null);
        $this->setIfExists('order_quantity', $data ?? [], null);
        $this->setIfExists('net_price_amount', $data ?? [], null);
        $this->setIfExists('item_volume', $data ?? [], null);
        $this->setIfExists('item_gross_weight', $data ?? [], null);
        $this->setIfExists('item_net_weight', $data ?? [], null);
        $this->setIfExists('order_price_unit_to_order_unit_nmrtr', $data ?? [], null);
        $this->setIfExists('ord_price_unit_to_order_unit_dnmntr', $data ?? [], null);
        $this->setIfExists('goods_receipt_is_non_valuated', $data ?? [], null);
        $this->setIfExists('is_to_be_accepted_at_origin', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('tax_country', $data ?? [], null);
        $this->setIfExists('tax_determination_date', $data ?? [], null);
        $this->setIfExists('shipping_instruction', $data ?? [], null);
        $this->setIfExists('non_deductible_input_tax_amount', $data ?? [], null);
        $this->setIfExists('stock_type', $data ?? [], null);
        $this->setIfExists('valuation_type', $data ?? [], null);
        $this->setIfExists('valuation_category', $data ?? [], null);
        $this->setIfExists('item_is_rejected_by_supplier', $data ?? [], null);
        $this->setIfExists('purg_doc_price_date', $data ?? [], null);
        $this->setIfExists('purchasing_info_record_update_code', $data ?? [], null);
        $this->setIfExists('inventory_special_stock_type', $data ?? [], null);
        $this->setIfExists('delivery_document_type', $data ?? [], null);
        $this->setIfExists('issuing_storage_location', $data ?? [], null);
        $this->setIfExists('allocation_table', $data ?? [], null);
        $this->setIfExists('allocation_table_item', $data ?? [], null);
        $this->setIfExists('retail_promotion', $data ?? [], null);
        $this->setIfExists('purg_configurable_item_number', $data ?? [], null);
        $this->setIfExists('purg_doc_aggrgd_subitem_category', $data ?? [], null);
        $this->setIfExists('purg_external_sort_number', $data ?? [], null);
        $this->setIfExists('batch', $data ?? [], null);
        $this->setIfExists('purchasing_item_is_free_of_charge', $data ?? [], null);
        $this->setIfExists('down_payment_type', $data ?? [], null);
        $this->setIfExists('down_payment_percentage_of_tot_amt', $data ?? [], null);
        $this->setIfExists('down_payment_amount', $data ?? [], null);
        $this->setIfExists('down_payment_due_date', $data ?? [], null);
        $this->setIfExists('expected_overall_limit_amount', $data ?? [], null);
        $this->setIfExists('overall_limit_amount', $data ?? [], null);
        $this->setIfExists('pur_contract_for_overall_limit', $data ?? [], null);
        $this->setIfExists('pur_contract_item_for_overall_limit', $data ?? [], null);
        $this->setIfExists('br_material_origin', $data ?? [], null);
        $this->setIfExists('br_material_usage', $data ?? [], null);
        $this->setIfExists('br_cfop_category', $data ?? [], null);
        $this->setIfExists('br_ncm', $data ?? [], null);
        $this->setIfExists('consumption_tax_ctrl_code', $data ?? [], null);
        $this->setIfExists('br_is_produced_in_house', $data ?? [], null);
        $this->setIfExists('product_season_year', $data ?? [], null);
        $this->setIfExists('product_season', $data ?? [], null);
        $this->setIfExists('product_collection', $data ?? [], null);
        $this->setIfExists('product_theme', $data ?? [], null);
        $this->setIfExists('season_completeness_status', $data ?? [], null);
        $this->setIfExists('shipping_group_rule', $data ?? [], null);
        $this->setIfExists('shipping_group_number', $data ?? [], null);
        $this->setIfExists('product_characteristic1', $data ?? [], null);
        $this->setIfExists('product_characteristic2', $data ?? [], null);
        $this->setIfExists('product_characteristic3', $data ?? [], null);
        $this->setIfExists('purg_doc_subitem_category', $data ?? [], null);
        $this->setIfExists('diversion_status', $data ?? [], null);
        $this->setIfExists('reference_document_number', $data ?? [], null);
        $this->setIfExists('reference_document_item', $data ?? [], null);
        $this->setIfExists('purchase_order_reference_type', $data ?? [], null);
        $this->setIfExists('item_has_value_added_service', $data ?? [], null);
        $this->setIfExists('val_added_srvc_parent_itm_number', $data ?? [], null);
        $this->setIfExists('stock_segment', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['purchase_order_category']) && (mb_strlen($this->container['purchase_order_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'purchase_order_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['document_currency']) && (mb_strlen($this->container['document_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'document_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['material_group']) && (mb_strlen($this->container['material_group']) > 9)) {
            $invalidProperties[] = "invalid value for 'material_group', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['material']) && (mb_strlen($this->container['material']) > 18)) {
            $invalidProperties[] = "invalid value for 'material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['material_type']) && (mb_strlen($this->container['material_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'material_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['supplier_material_number']) && (mb_strlen($this->container['supplier_material_number']) > 35)) {
            $invalidProperties[] = "invalid value for 'supplier_material_number', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['supplier_subrange']) && (mb_strlen($this->container['supplier_subrange']) > 6)) {
            $invalidProperties[] = "invalid value for 'supplier_subrange', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['manufacturer_part_nmbr']) && (mb_strlen($this->container['manufacturer_part_nmbr']) > 40)) {
            $invalidProperties[] = "invalid value for 'manufacturer_part_nmbr', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['manufacturer']) && (mb_strlen($this->container['manufacturer']) > 10)) {
            $invalidProperties[] = "invalid value for 'manufacturer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['manufacturer_material']) && (mb_strlen($this->container['manufacturer_material']) > 18)) {
            $invalidProperties[] = "invalid value for 'manufacturer_material', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['purchase_order_item_text']) && (mb_strlen($this->container['purchase_order_item_text']) > 40)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item_text', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['product_type_code']) && (mb_strlen($this->container['product_type_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'product_type_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['plant']) && (mb_strlen($this->container['plant']) > 4)) {
            $invalidProperties[] = "invalid value for 'plant', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['reference_delivery_address_id']) && (mb_strlen($this->container['reference_delivery_address_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_delivery_address_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['customer']) && (mb_strlen($this->container['customer']) > 10)) {
            $invalidProperties[] = "invalid value for 'customer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['subcontractor']) && (mb_strlen($this->container['subcontractor']) > 10)) {
            $invalidProperties[] = "invalid value for 'subcontractor', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['cross_plant_configurable_product']) && (mb_strlen($this->container['cross_plant_configurable_product']) > 18)) {
            $invalidProperties[] = "invalid value for 'cross_plant_configurable_product', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['article_category']) && (mb_strlen($this->container['article_category']) > 2)) {
            $invalidProperties[] = "invalid value for 'article_category', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['plnd_order_replnmt_elmnt_type']) && (mb_strlen($this->container['plnd_order_replnmt_elmnt_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'plnd_order_replnmt_elmnt_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['product_purchase_points_qty_unit']) && (mb_strlen($this->container['product_purchase_points_qty_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'product_purchase_points_qty_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['storage_location']) && (mb_strlen($this->container['storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purchase_order_quantity_unit']) && (mb_strlen($this->container['purchase_order_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchase_order_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchase_contract']) && (mb_strlen($this->container['purchase_contract']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_contract', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_contract_item']) && (mb_strlen($this->container['purchase_contract_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_contract_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['purchase_requisition']) && (mb_strlen($this->container['purchase_requisition']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_requisition', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_requisition_item']) && (mb_strlen($this->container['purchase_requisition_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_requisition_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['requirement_tracking']) && (mb_strlen($this->container['requirement_tracking']) > 10)) {
            $invalidProperties[] = "invalid value for 'requirement_tracking', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_quotation']) && (mb_strlen($this->container['supplier_quotation']) > 10)) {
            $invalidProperties[] = "invalid value for 'supplier_quotation', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['supplier_quotation_item']) && (mb_strlen($this->container['supplier_quotation_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'supplier_quotation_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['requisitioner_name']) && (mb_strlen($this->container['requisitioner_name']) > 12)) {
            $invalidProperties[] = "invalid value for 'requisitioner_name', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['partial_delivery_is_allowed']) && (mb_strlen($this->container['partial_delivery_is_allowed']) > 1)) {
            $invalidProperties[] = "invalid value for 'partial_delivery_is_allowed', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['consumption_posting']) && (mb_strlen($this->container['consumption_posting']) > 1)) {
            $invalidProperties[] = "invalid value for 'consumption_posting', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['service_performer']) && (mb_strlen($this->container['service_performer']) > 10)) {
            $invalidProperties[] = "invalid value for 'service_performer', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['service_package']) && (mb_strlen($this->container['service_package']) > 10)) {
            $invalidProperties[] = "invalid value for 'service_package', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['base_unit']) && (mb_strlen($this->container['base_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'base_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['purchase_order_item_category']) && (mb_strlen($this->container['purchase_order_item_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['order_price_unit']) && (mb_strlen($this->container['order_price_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'order_price_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_volume_unit']) && (mb_strlen($this->container['item_volume_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_volume_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['item_weight_unit']) && (mb_strlen($this->container['item_weight_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'item_weight_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['multiple_acct_assgmt_distribution']) && (mb_strlen($this->container['multiple_acct_assgmt_distribution']) > 1)) {
            $invalidProperties[] = "invalid value for 'multiple_acct_assgmt_distribution', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['partial_invoice_distribution']) && (mb_strlen($this->container['partial_invoice_distribution']) > 1)) {
            $invalidProperties[] = "invalid value for 'partial_invoice_distribution', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['pricing_date_control']) && (mb_strlen($this->container['pricing_date_control']) > 1)) {
            $invalidProperties[] = "invalid value for 'pricing_date_control', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purchasing_parent_item']) && (mb_strlen($this->container['purchasing_parent_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchasing_parent_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['purchasing_order_reason']) && (mb_strlen($this->container['purchasing_order_reason']) > 3)) {
            $invalidProperties[] = "invalid value for 'purchasing_order_reason', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_classification']) && (mb_strlen($this->container['incoterms_classification']) > 3)) {
            $invalidProperties[] = "invalid value for 'incoterms_classification', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['incoterms_transfer_location']) && (mb_strlen($this->container['incoterms_transfer_location']) > 28)) {
            $invalidProperties[] = "invalid value for 'incoterms_transfer_location', the character length must be smaller than or equal to 28.";
        }

        if (!is_null($this->container['incoterms_location1']) && (mb_strlen($this->container['incoterms_location1']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location1', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['incoterms_location2']) && (mb_strlen($this->container['incoterms_location2']) > 70)) {
            $invalidProperties[] = "invalid value for 'incoterms_location2', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['prior_supplier']) && (mb_strlen($this->container['prior_supplier']) > 10)) {
            $invalidProperties[] = "invalid value for 'prior_supplier', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['international_article_number']) && (mb_strlen($this->container['international_article_number']) > 18)) {
            $invalidProperties[] = "invalid value for 'international_article_number', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['intrastat_service_code']) && (mb_strlen($this->container['intrastat_service_code']) > 30)) {
            $invalidProperties[] = "invalid value for 'intrastat_service_code', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['commodity_code']) && (mb_strlen($this->container['commodity_code']) > 30)) {
            $invalidProperties[] = "invalid value for 'commodity_code', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['material_freight_group']) && (mb_strlen($this->container['material_freight_group']) > 8)) {
            $invalidProperties[] = "invalid value for 'material_freight_group', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['discount_in_kind_eligibility']) && (mb_strlen($this->container['discount_in_kind_eligibility']) > 1)) {
            $invalidProperties[] = "invalid value for 'discount_in_kind_eligibility', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['supplier_confirmation_control_key']) && (mb_strlen($this->container['supplier_confirmation_control_key']) > 4)) {
            $invalidProperties[] = "invalid value for 'supplier_confirmation_control_key', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['purg_doc_order_ackn_number']) && (mb_strlen($this->container['purg_doc_order_ackn_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'purg_doc_order_ackn_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['account_assignment_category']) && (mb_strlen($this->container['account_assignment_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'account_assignment_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purchasing_info_record']) && (mb_strlen($this->container['purchasing_info_record']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchasing_info_record', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['tax_country']) && (mb_strlen($this->container['tax_country']) > 3)) {
            $invalidProperties[] = "invalid value for 'tax_country', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['shipping_instruction']) && (mb_strlen($this->container['shipping_instruction']) > 2)) {
            $invalidProperties[] = "invalid value for 'shipping_instruction', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['stock_type']) && (mb_strlen($this->container['stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['valuation_type']) && (mb_strlen($this->container['valuation_type']) > 10)) {
            $invalidProperties[] = "invalid value for 'valuation_type', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['valuation_category']) && (mb_strlen($this->container['valuation_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'valuation_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purchasing_info_record_update_code']) && (mb_strlen($this->container['purchasing_info_record_update_code']) > 1)) {
            $invalidProperties[] = "invalid value for 'purchasing_info_record_update_code', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['inventory_special_stock_type']) && (mb_strlen($this->container['inventory_special_stock_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'inventory_special_stock_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['delivery_document_type']) && (mb_strlen($this->container['delivery_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'delivery_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['issuing_storage_location']) && (mb_strlen($this->container['issuing_storage_location']) > 4)) {
            $invalidProperties[] = "invalid value for 'issuing_storage_location', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['allocation_table']) && (mb_strlen($this->container['allocation_table']) > 10)) {
            $invalidProperties[] = "invalid value for 'allocation_table', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['allocation_table_item']) && (mb_strlen($this->container['allocation_table_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'allocation_table_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['retail_promotion']) && (mb_strlen($this->container['retail_promotion']) > 10)) {
            $invalidProperties[] = "invalid value for 'retail_promotion', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purg_configurable_item_number']) && (mb_strlen($this->container['purg_configurable_item_number']) > 40)) {
            $invalidProperties[] = "invalid value for 'purg_configurable_item_number', the character length must be smaller than or equal to 40.";
        }

        if (!is_null($this->container['purg_doc_aggrgd_subitem_category']) && (mb_strlen($this->container['purg_doc_aggrgd_subitem_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'purg_doc_aggrgd_subitem_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['purg_external_sort_number']) && (mb_strlen($this->container['purg_external_sort_number']) > 5)) {
            $invalidProperties[] = "invalid value for 'purg_external_sort_number', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['batch']) && (mb_strlen($this->container['batch']) > 10)) {
            $invalidProperties[] = "invalid value for 'batch', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['down_payment_type']) && (mb_strlen($this->container['down_payment_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'down_payment_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['pur_contract_for_overall_limit']) && (mb_strlen($this->container['pur_contract_for_overall_limit']) > 10)) {
            $invalidProperties[] = "invalid value for 'pur_contract_for_overall_limit', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['pur_contract_item_for_overall_limit']) && (mb_strlen($this->container['pur_contract_item_for_overall_limit']) > 5)) {
            $invalidProperties[] = "invalid value for 'pur_contract_item_for_overall_limit', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['br_material_origin']) && (mb_strlen($this->container['br_material_origin']) > 1)) {
            $invalidProperties[] = "invalid value for 'br_material_origin', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['br_material_usage']) && (mb_strlen($this->container['br_material_usage']) > 1)) {
            $invalidProperties[] = "invalid value for 'br_material_usage', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['br_cfop_category']) && (mb_strlen($this->container['br_cfop_category']) > 2)) {
            $invalidProperties[] = "invalid value for 'br_cfop_category', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['br_ncm']) && (mb_strlen($this->container['br_ncm']) > 16)) {
            $invalidProperties[] = "invalid value for 'br_ncm', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['consumption_tax_ctrl_code']) && (mb_strlen($this->container['consumption_tax_ctrl_code']) > 16)) {
            $invalidProperties[] = "invalid value for 'consumption_tax_ctrl_code', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['product_season_year']) && (mb_strlen($this->container['product_season_year']) > 4)) {
            $invalidProperties[] = "invalid value for 'product_season_year', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['product_season']) && (mb_strlen($this->container['product_season']) > 10)) {
            $invalidProperties[] = "invalid value for 'product_season', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_collection']) && (mb_strlen($this->container['product_collection']) > 10)) {
            $invalidProperties[] = "invalid value for 'product_collection', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_theme']) && (mb_strlen($this->container['product_theme']) > 10)) {
            $invalidProperties[] = "invalid value for 'product_theme', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['season_completeness_status']) && (mb_strlen($this->container['season_completeness_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'season_completeness_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['shipping_group_rule']) && (mb_strlen($this->container['shipping_group_rule']) > 4)) {
            $invalidProperties[] = "invalid value for 'shipping_group_rule', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['shipping_group_number']) && (mb_strlen($this->container['shipping_group_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'shipping_group_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_characteristic1']) && (mb_strlen($this->container['product_characteristic1']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_characteristic1', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['product_characteristic2']) && (mb_strlen($this->container['product_characteristic2']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_characteristic2', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['product_characteristic3']) && (mb_strlen($this->container['product_characteristic3']) > 18)) {
            $invalidProperties[] = "invalid value for 'product_characteristic3', the character length must be smaller than or equal to 18.";
        }

        if (!is_null($this->container['purg_doc_subitem_category']) && (mb_strlen($this->container['purg_doc_subitem_category']) > 1)) {
            $invalidProperties[] = "invalid value for 'purg_doc_subitem_category', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['diversion_status']) && (mb_strlen($this->container['diversion_status']) > 1)) {
            $invalidProperties[] = "invalid value for 'diversion_status', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['reference_document_number']) && (mb_strlen($this->container['reference_document_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'reference_document_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['reference_document_item']) && (mb_strlen($this->container['reference_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'reference_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['purchase_order_reference_type']) && (mb_strlen($this->container['purchase_order_reference_type']) > 1)) {
            $invalidProperties[] = "invalid value for 'purchase_order_reference_type', the character length must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['val_added_srvc_parent_itm_number']) && (mb_strlen($this->container['val_added_srvc_parent_itm_number']) > 5)) {
            $invalidProperties[] = "invalid value for 'val_added_srvc_parent_itm_number', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['stock_segment']) && (mb_strlen($this->container['stock_segment']) > 40)) {
            $invalidProperties[] = "invalid value for 'stock_segment', the character length must be smaller than or equal to 40.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order_category
     *
     * @return string|null
     */
    public function getPurchaseOrderCategory()
    {
        return $this->container['purchase_order_category'];
    }

    /**
     * Sets purchase_order_category
     *
     * @param string|null $purchase_order_category Purchasing Document Category
     *
     * @return self
     */
    public function setPurchaseOrderCategory($purchase_order_category)
    {
        if (is_null($purchase_order_category)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_category cannot be null');
        }
        if ((mb_strlen($purchase_order_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purchase_order_category'] = $purchase_order_category;

        return $this;
    }

    /**
     * Gets document_currency
     *
     * @return string|null
     */
    public function getDocumentCurrency()
    {
        return $this->container['document_currency'];
    }

    /**
     * Sets document_currency
     *
     * @param string|null $document_currency Currency Key
     *
     * @return self
     */
    public function setDocumentCurrency($document_currency)
    {
        if (is_null($document_currency)) {
            throw new \InvalidArgumentException('non-nullable document_currency cannot be null');
        }
        if ((mb_strlen($document_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $document_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['document_currency'] = $document_currency;

        return $this;
    }

    /**
     * Gets material_group
     *
     * @return string|null
     */
    public function getMaterialGroup()
    {
        return $this->container['material_group'];
    }

    /**
     * Sets material_group
     *
     * @param string|null $material_group material_group
     *
     * @return self
     */
    public function setMaterialGroup($material_group)
    {
        if (is_null($material_group)) {
            throw new \InvalidArgumentException('non-nullable material_group cannot be null');
        }
        if ((mb_strlen($material_group) > 9)) {
            throw new \InvalidArgumentException('invalid length for $material_group when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 9.');
        }

        $this->container['material_group'] = $material_group;

        return $this;
    }

    /**
     * Gets material
     *
     * @return string|null
     */
    public function getMaterial()
    {
        return $this->container['material'];
    }

    /**
     * Sets material
     *
     * @param string|null $material Material Number
     *
     * @return self
     */
    public function setMaterial($material)
    {
        if (is_null($material)) {
            throw new \InvalidArgumentException('non-nullable material cannot be null');
        }
        if ((mb_strlen($material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $material when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['material'] = $material;

        return $this;
    }

    /**
     * Gets material_type
     *
     * @return string|null
     */
    public function getMaterialType()
    {
        return $this->container['material_type'];
    }

    /**
     * Sets material_type
     *
     * @param string|null $material_type material_type
     *
     * @return self
     */
    public function setMaterialType($material_type)
    {
        if (is_null($material_type)) {
            throw new \InvalidArgumentException('non-nullable material_type cannot be null');
        }
        if ((mb_strlen($material_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $material_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['material_type'] = $material_type;

        return $this;
    }

    /**
     * Gets supplier_material_number
     *
     * @return string|null
     */
    public function getSupplierMaterialNumber()
    {
        return $this->container['supplier_material_number'];
    }

    /**
     * Sets supplier_material_number
     *
     * @param string|null $supplier_material_number Material Number Used by Supplier
     *
     * @return self
     */
    public function setSupplierMaterialNumber($supplier_material_number)
    {
        if (is_null($supplier_material_number)) {
            throw new \InvalidArgumentException('non-nullable supplier_material_number cannot be null');
        }
        if ((mb_strlen($supplier_material_number) > 35)) {
            throw new \InvalidArgumentException('invalid length for $supplier_material_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 35.');
        }

        $this->container['supplier_material_number'] = $supplier_material_number;

        return $this;
    }

    /**
     * Gets supplier_subrange
     *
     * @return string|null
     */
    public function getSupplierSubrange()
    {
        return $this->container['supplier_subrange'];
    }

    /**
     * Sets supplier_subrange
     *
     * @param string|null $supplier_subrange supplier_subrange
     *
     * @return self
     */
    public function setSupplierSubrange($supplier_subrange)
    {
        if (is_null($supplier_subrange)) {
            throw new \InvalidArgumentException('non-nullable supplier_subrange cannot be null');
        }
        if ((mb_strlen($supplier_subrange) > 6)) {
            throw new \InvalidArgumentException('invalid length for $supplier_subrange when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['supplier_subrange'] = $supplier_subrange;

        return $this;
    }

    /**
     * Gets manufacturer_part_nmbr
     *
     * @return string|null
     */
    public function getManufacturerPartNmbr()
    {
        return $this->container['manufacturer_part_nmbr'];
    }

    /**
     * Sets manufacturer_part_nmbr
     *
     * @param string|null $manufacturer_part_nmbr Manufacturer Part Number
     *
     * @return self
     */
    public function setManufacturerPartNmbr($manufacturer_part_nmbr)
    {
        if (is_null($manufacturer_part_nmbr)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_part_nmbr cannot be null');
        }
        if ((mb_strlen($manufacturer_part_nmbr) > 40)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_part_nmbr when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['manufacturer_part_nmbr'] = $manufacturer_part_nmbr;

        return $this;
    }

    /**
     * Gets manufacturer
     *
     * @return string|null
     */
    public function getManufacturer()
    {
        return $this->container['manufacturer'];
    }

    /**
     * Sets manufacturer
     *
     * @param string|null $manufacturer Number of a Manufacturer
     *
     * @return self
     */
    public function setManufacturer($manufacturer)
    {
        if (is_null($manufacturer)) {
            throw new \InvalidArgumentException('non-nullable manufacturer cannot be null');
        }
        if ((mb_strlen($manufacturer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['manufacturer'] = $manufacturer;

        return $this;
    }

    /**
     * Gets manufacturer_material
     *
     * @return string|null
     */
    public function getManufacturerMaterial()
    {
        return $this->container['manufacturer_material'];
    }

    /**
     * Sets manufacturer_material
     *
     * @param string|null $manufacturer_material Material number
     *
     * @return self
     */
    public function setManufacturerMaterial($manufacturer_material)
    {
        if (is_null($manufacturer_material)) {
            throw new \InvalidArgumentException('non-nullable manufacturer_material cannot be null');
        }
        if ((mb_strlen($manufacturer_material) > 18)) {
            throw new \InvalidArgumentException('invalid length for $manufacturer_material when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['manufacturer_material'] = $manufacturer_material;

        return $this;
    }

    /**
     * Gets purchase_order_item_text
     *
     * @return string|null
     */
    public function getPurchaseOrderItemText()
    {
        return $this->container['purchase_order_item_text'];
    }

    /**
     * Sets purchase_order_item_text
     *
     * @param string|null $purchase_order_item_text purchase_order_item_text
     *
     * @return self
     */
    public function setPurchaseOrderItemText($purchase_order_item_text)
    {
        if (is_null($purchase_order_item_text)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item_text cannot be null');
        }
        if ((mb_strlen($purchase_order_item_text) > 40)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item_text when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['purchase_order_item_text'] = $purchase_order_item_text;

        return $this;
    }

    /**
     * Gets product_type_code
     *
     * @return string|null
     */
    public function getProductTypeCode()
    {
        return $this->container['product_type_code'];
    }

    /**
     * Sets product_type_code
     *
     * @param string|null $product_type_code product_type_code
     *
     * @return self
     */
    public function setProductTypeCode($product_type_code)
    {
        if (is_null($product_type_code)) {
            throw new \InvalidArgumentException('non-nullable product_type_code cannot be null');
        }
        if ((mb_strlen($product_type_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $product_type_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['product_type_code'] = $product_type_code;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string|null $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            throw new \InvalidArgumentException('non-nullable company_code cannot be null');
        }
        if ((mb_strlen($company_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets plant
     *
     * @return string|null
     */
    public function getPlant()
    {
        return $this->container['plant'];
    }

    /**
     * Sets plant
     *
     * @param string|null $plant plant
     *
     * @return self
     */
    public function setPlant($plant)
    {
        if (is_null($plant)) {
            throw new \InvalidArgumentException('non-nullable plant cannot be null');
        }
        if ((mb_strlen($plant) > 4)) {
            throw new \InvalidArgumentException('invalid length for $plant when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['plant'] = $plant;

        return $this;
    }

    /**
     * Gets reference_delivery_address_id
     *
     * @return string|null
     */
    public function getReferenceDeliveryAddressId()
    {
        return $this->container['reference_delivery_address_id'];
    }

    /**
     * Sets reference_delivery_address_id
     *
     * @param string|null $reference_delivery_address_id Number of delivery address
     *
     * @return self
     */
    public function setReferenceDeliveryAddressId($reference_delivery_address_id)
    {
        if (is_null($reference_delivery_address_id)) {
            throw new \InvalidArgumentException('non-nullable reference_delivery_address_id cannot be null');
        }
        if ((mb_strlen($reference_delivery_address_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_delivery_address_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reference_delivery_address_id'] = $reference_delivery_address_id;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        if ((mb_strlen($customer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $customer when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets subcontractor
     *
     * @return string|null
     */
    public function getSubcontractor()
    {
        return $this->container['subcontractor'];
    }

    /**
     * Sets subcontractor
     *
     * @param string|null $subcontractor Supplier to be Supplied/Who is to Receive Delivery
     *
     * @return self
     */
    public function setSubcontractor($subcontractor)
    {
        if (is_null($subcontractor)) {
            throw new \InvalidArgumentException('non-nullable subcontractor cannot be null');
        }
        if ((mb_strlen($subcontractor) > 10)) {
            throw new \InvalidArgumentException('invalid length for $subcontractor when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['subcontractor'] = $subcontractor;

        return $this;
    }

    /**
     * Gets supplier_is_subcontractor
     *
     * @return bool|null
     */
    public function getSupplierIsSubcontractor()
    {
        return $this->container['supplier_is_subcontractor'];
    }

    /**
     * Sets supplier_is_subcontractor
     *
     * @param bool|null $supplier_is_subcontractor Subcontracting Supplier
     *
     * @return self
     */
    public function setSupplierIsSubcontractor($supplier_is_subcontractor)
    {
        if (is_null($supplier_is_subcontractor)) {
            throw new \InvalidArgumentException('non-nullable supplier_is_subcontractor cannot be null');
        }
        $this->container['supplier_is_subcontractor'] = $supplier_is_subcontractor;

        return $this;
    }

    /**
     * Gets cross_plant_configurable_product
     *
     * @return string|null
     */
    public function getCrossPlantConfigurableProduct()
    {
        return $this->container['cross_plant_configurable_product'];
    }

    /**
     * Sets cross_plant_configurable_product
     *
     * @param string|null $cross_plant_configurable_product Cross-Plant Configurable Material
     *
     * @return self
     */
    public function setCrossPlantConfigurableProduct($cross_plant_configurable_product)
    {
        if (is_null($cross_plant_configurable_product)) {
            throw new \InvalidArgumentException('non-nullable cross_plant_configurable_product cannot be null');
        }
        if ((mb_strlen($cross_plant_configurable_product) > 18)) {
            throw new \InvalidArgumentException('invalid length for $cross_plant_configurable_product when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['cross_plant_configurable_product'] = $cross_plant_configurable_product;

        return $this;
    }

    /**
     * Gets article_category
     *
     * @return string|null
     */
    public function getArticleCategory()
    {
        return $this->container['article_category'];
    }

    /**
     * Sets article_category
     *
     * @param string|null $article_category article_category
     *
     * @return self
     */
    public function setArticleCategory($article_category)
    {
        if (is_null($article_category)) {
            throw new \InvalidArgumentException('non-nullable article_category cannot be null');
        }
        if ((mb_strlen($article_category) > 2)) {
            throw new \InvalidArgumentException('invalid length for $article_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['article_category'] = $article_category;

        return $this;
    }

    /**
     * Gets plnd_order_replnmt_elmnt_type
     *
     * @return string|null
     */
    public function getPlndOrderReplnmtElmntType()
    {
        return $this->container['plnd_order_replnmt_elmnt_type'];
    }

    /**
     * Sets plnd_order_replnmt_elmnt_type
     *
     * @param string|null $plnd_order_replnmt_elmnt_type plnd_order_replnmt_elmnt_type
     *
     * @return self
     */
    public function setPlndOrderReplnmtElmntType($plnd_order_replnmt_elmnt_type)
    {
        if (is_null($plnd_order_replnmt_elmnt_type)) {
            throw new \InvalidArgumentException('non-nullable plnd_order_replnmt_elmnt_type cannot be null');
        }
        if ((mb_strlen($plnd_order_replnmt_elmnt_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $plnd_order_replnmt_elmnt_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['plnd_order_replnmt_elmnt_type'] = $plnd_order_replnmt_elmnt_type;

        return $this;
    }

    /**
     * Gets product_purchase_points_qty_unit
     *
     * @return string|null
     */
    public function getProductPurchasePointsQtyUnit()
    {
        return $this->container['product_purchase_points_qty_unit'];
    }

    /**
     * Sets product_purchase_points_qty_unit
     *
     * @param string|null $product_purchase_points_qty_unit product_purchase_points_qty_unit
     *
     * @return self
     */
    public function setProductPurchasePointsQtyUnit($product_purchase_points_qty_unit)
    {
        if (is_null($product_purchase_points_qty_unit)) {
            throw new \InvalidArgumentException('non-nullable product_purchase_points_qty_unit cannot be null');
        }
        if ((mb_strlen($product_purchase_points_qty_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $product_purchase_points_qty_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['product_purchase_points_qty_unit'] = $product_purchase_points_qty_unit;

        return $this;
    }

    /**
     * Gets product_purchase_points_qty
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Points|null
     */
    public function getProductPurchasePointsQty()
    {
        return $this->container['product_purchase_points_qty'];
    }

    /**
     * Sets product_purchase_points_qty
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Points|null $product_purchase_points_qty product_purchase_points_qty
     *
     * @return self
     */
    public function setProductPurchasePointsQty($product_purchase_points_qty)
    {
        if (is_null($product_purchase_points_qty)) {
            throw new \InvalidArgumentException('non-nullable product_purchase_points_qty cannot be null');
        }
        $this->container['product_purchase_points_qty'] = $product_purchase_points_qty;

        return $this;
    }

    /**
     * Gets storage_location
     *
     * @return string|null
     */
    public function getStorageLocation()
    {
        return $this->container['storage_location'];
    }

    /**
     * Sets storage_location
     *
     * @param string|null $storage_location storage_location
     *
     * @return self
     */
    public function setStorageLocation($storage_location)
    {
        if (is_null($storage_location)) {
            throw new \InvalidArgumentException('non-nullable storage_location cannot be null');
        }
        if ((mb_strlen($storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $storage_location when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['storage_location'] = $storage_location;

        return $this;
    }

    /**
     * Gets purchase_order_quantity_unit
     *
     * @return string|null
     */
    public function getPurchaseOrderQuantityUnit()
    {
        return $this->container['purchase_order_quantity_unit'];
    }

    /**
     * Sets purchase_order_quantity_unit
     *
     * @param string|null $purchase_order_quantity_unit Purchase Order Unit of Measure
     *
     * @return self
     */
    public function setPurchaseOrderQuantityUnit($purchase_order_quantity_unit)
    {
        if (is_null($purchase_order_quantity_unit)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_quantity_unit cannot be null');
        }
        if ((mb_strlen($purchase_order_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_quantity_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['purchase_order_quantity_unit'] = $purchase_order_quantity_unit;

        return $this;
    }

    /**
     * Gets order_item_qty_to_base_qty_nmrtr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\EqualTo|null
     */
    public function getOrderItemQtyToBaseQtyNmrtr()
    {
        return $this->container['order_item_qty_to_base_qty_nmrtr'];
    }

    /**
     * Sets order_item_qty_to_base_qty_nmrtr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\EqualTo|null $order_item_qty_to_base_qty_nmrtr order_item_qty_to_base_qty_nmrtr
     *
     * @return self
     */
    public function setOrderItemQtyToBaseQtyNmrtr($order_item_qty_to_base_qty_nmrtr)
    {
        if (is_null($order_item_qty_to_base_qty_nmrtr)) {
            throw new \InvalidArgumentException('non-nullable order_item_qty_to_base_qty_nmrtr cannot be null');
        }
        $this->container['order_item_qty_to_base_qty_nmrtr'] = $order_item_qty_to_base_qty_nmrtr;

        return $this;
    }

    /**
     * Gets order_item_qty_to_base_qty_dnmntr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Denominator2|null
     */
    public function getOrderItemQtyToBaseQtyDnmntr()
    {
        return $this->container['order_item_qty_to_base_qty_dnmntr'];
    }

    /**
     * Sets order_item_qty_to_base_qty_dnmntr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Denominator2|null $order_item_qty_to_base_qty_dnmntr order_item_qty_to_base_qty_dnmntr
     *
     * @return self
     */
    public function setOrderItemQtyToBaseQtyDnmntr($order_item_qty_to_base_qty_dnmntr)
    {
        if (is_null($order_item_qty_to_base_qty_dnmntr)) {
            throw new \InvalidArgumentException('non-nullable order_item_qty_to_base_qty_dnmntr cannot be null');
        }
        $this->container['order_item_qty_to_base_qty_dnmntr'] = $order_item_qty_to_base_qty_dnmntr;

        return $this;
    }

    /**
     * Gets net_price_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\PriceUnit|null
     */
    public function getNetPriceQuantity()
    {
        return $this->container['net_price_quantity'];
    }

    /**
     * Sets net_price_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\PriceUnit|null $net_price_quantity net_price_quantity
     *
     * @return self
     */
    public function setNetPriceQuantity($net_price_quantity)
    {
        if (is_null($net_price_quantity)) {
            throw new \InvalidArgumentException('non-nullable net_price_quantity cannot be null');
        }
        $this->container['net_price_quantity'] = $net_price_quantity;

        return $this;
    }

    /**
     * Gets is_completely_delivered
     *
     * @return bool|null
     */
    public function getIsCompletelyDelivered()
    {
        return $this->container['is_completely_delivered'];
    }

    /**
     * Sets is_completely_delivered
     *
     * @param bool|null $is_completely_delivered \"Delivery Completed\" Indicator
     *
     * @return self
     */
    public function setIsCompletelyDelivered($is_completely_delivered)
    {
        if (is_null($is_completely_delivered)) {
            throw new \InvalidArgumentException('non-nullable is_completely_delivered cannot be null');
        }
        $this->container['is_completely_delivered'] = $is_completely_delivered;

        return $this;
    }

    /**
     * Gets is_finally_invoiced
     *
     * @return bool|null
     */
    public function getIsFinallyInvoiced()
    {
        return $this->container['is_finally_invoiced'];
    }

    /**
     * Sets is_finally_invoiced
     *
     * @param bool|null $is_finally_invoiced Final Invoice Indicator
     *
     * @return self
     */
    public function setIsFinallyInvoiced($is_finally_invoiced)
    {
        if (is_null($is_finally_invoiced)) {
            throw new \InvalidArgumentException('non-nullable is_finally_invoiced cannot be null');
        }
        $this->container['is_finally_invoiced'] = $is_finally_invoiced;

        return $this;
    }

    /**
     * Gets goods_receipt_is_expected
     *
     * @return bool|null
     */
    public function getGoodsReceiptIsExpected()
    {
        return $this->container['goods_receipt_is_expected'];
    }

    /**
     * Sets goods_receipt_is_expected
     *
     * @param bool|null $goods_receipt_is_expected Goods Receipt Indicator
     *
     * @return self
     */
    public function setGoodsReceiptIsExpected($goods_receipt_is_expected)
    {
        if (is_null($goods_receipt_is_expected)) {
            throw new \InvalidArgumentException('non-nullable goods_receipt_is_expected cannot be null');
        }
        $this->container['goods_receipt_is_expected'] = $goods_receipt_is_expected;

        return $this;
    }

    /**
     * Gets invoice_is_expected
     *
     * @return bool|null
     */
    public function getInvoiceIsExpected()
    {
        return $this->container['invoice_is_expected'];
    }

    /**
     * Sets invoice_is_expected
     *
     * @param bool|null $invoice_is_expected Invoice Receipt Indicator
     *
     * @return self
     */
    public function setInvoiceIsExpected($invoice_is_expected)
    {
        if (is_null($invoice_is_expected)) {
            throw new \InvalidArgumentException('non-nullable invoice_is_expected cannot be null');
        }
        $this->container['invoice_is_expected'] = $invoice_is_expected;

        return $this;
    }

    /**
     * Gets is_order_ackn_rqd
     *
     * @return bool|null
     */
    public function getIsOrderAcknRqd()
    {
        return $this->container['is_order_ackn_rqd'];
    }

    /**
     * Sets is_order_ackn_rqd
     *
     * @param bool|null $is_order_ackn_rqd Order Acknowledgment Requirement
     *
     * @return self
     */
    public function setIsOrderAcknRqd($is_order_ackn_rqd)
    {
        if (is_null($is_order_ackn_rqd)) {
            throw new \InvalidArgumentException('non-nullable is_order_ackn_rqd cannot be null');
        }
        $this->container['is_order_ackn_rqd'] = $is_order_ackn_rqd;

        return $this;
    }

    /**
     * Gets invoice_is_goods_receipt_based
     *
     * @return bool|null
     */
    public function getInvoiceIsGoodsReceiptBased()
    {
        return $this->container['invoice_is_goods_receipt_based'];
    }

    /**
     * Sets invoice_is_goods_receipt_based
     *
     * @param bool|null $invoice_is_goods_receipt_based Indicator: GR-Based Invoice Verification
     *
     * @return self
     */
    public function setInvoiceIsGoodsReceiptBased($invoice_is_goods_receipt_based)
    {
        if (is_null($invoice_is_goods_receipt_based)) {
            throw new \InvalidArgumentException('non-nullable invoice_is_goods_receipt_based cannot be null');
        }
        $this->container['invoice_is_goods_receipt_based'] = $invoice_is_goods_receipt_based;

        return $this;
    }

    /**
     * Gets purchase_contract
     *
     * @return string|null
     */
    public function getPurchaseContract()
    {
        return $this->container['purchase_contract'];
    }

    /**
     * Sets purchase_contract
     *
     * @param string|null $purchase_contract Number of principal purchase agreement
     *
     * @return self
     */
    public function setPurchaseContract($purchase_contract)
    {
        if (is_null($purchase_contract)) {
            throw new \InvalidArgumentException('non-nullable purchase_contract cannot be null');
        }
        if ((mb_strlen($purchase_contract) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_contract when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_contract'] = $purchase_contract;

        return $this;
    }

    /**
     * Gets purchase_contract_item
     *
     * @return string|null
     */
    public function getPurchaseContractItem()
    {
        return $this->container['purchase_contract_item'];
    }

    /**
     * Sets purchase_contract_item
     *
     * @param string|null $purchase_contract_item Item Number of Principal Purchase Agreement
     *
     * @return self
     */
    public function setPurchaseContractItem($purchase_contract_item)
    {
        if (is_null($purchase_contract_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_contract_item cannot be null');
        }
        if ((mb_strlen($purchase_contract_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_contract_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_contract_item'] = $purchase_contract_item;

        return $this;
    }

    /**
     * Gets purchase_requisition
     *
     * @return string|null
     */
    public function getPurchaseRequisition()
    {
        return $this->container['purchase_requisition'];
    }

    /**
     * Sets purchase_requisition
     *
     * @param string|null $purchase_requisition Purchase Requisition Number
     *
     * @return self
     */
    public function setPurchaseRequisition($purchase_requisition)
    {
        if (is_null($purchase_requisition)) {
            throw new \InvalidArgumentException('non-nullable purchase_requisition cannot be null');
        }
        if ((mb_strlen($purchase_requisition) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_requisition when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['purchase_requisition'] = $purchase_requisition;

        return $this;
    }

    /**
     * Gets purchase_requisition_item
     *
     * @return string|null
     */
    public function getPurchaseRequisitionItem()
    {
        return $this->container['purchase_requisition_item'];
    }

    /**
     * Sets purchase_requisition_item
     *
     * @param string|null $purchase_requisition_item Item Number of Purchase Requisition
     *
     * @return self
     */
    public function setPurchaseRequisitionItem($purchase_requisition_item)
    {
        if (is_null($purchase_requisition_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_requisition_item cannot be null');
        }
        if ((mb_strlen($purchase_requisition_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_requisition_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['purchase_requisition_item'] = $purchase_requisition_item;

        return $this;
    }

    /**
     * Gets requirement_tracking
     *
     * @return string|null
     */
    public function getRequirementTracking()
    {
        return $this->container['requirement_tracking'];
    }

    /**
     * Sets requirement_tracking
     *
     * @param string|null $requirement_tracking Requirement Tracking Number
     *
     * @return self
     */
    public function setRequirementTracking($requirement_tracking)
    {
        if (is_null($requirement_tracking)) {
            throw new \InvalidArgumentException('non-nullable requirement_tracking cannot be null');
        }
        if ((mb_strlen($requirement_tracking) > 10)) {
            throw new \InvalidArgumentException('invalid length for $requirement_tracking when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['requirement_tracking'] = $requirement_tracking;

        return $this;
    }

    /**
     * Gets supplier_quotation
     *
     * @return string|null
     */
    public function getSupplierQuotation()
    {
        return $this->container['supplier_quotation'];
    }

    /**
     * Sets supplier_quotation
     *
     * @param string|null $supplier_quotation RFQ Number
     *
     * @return self
     */
    public function setSupplierQuotation($supplier_quotation)
    {
        if (is_null($supplier_quotation)) {
            throw new \InvalidArgumentException('non-nullable supplier_quotation cannot be null');
        }
        if ((mb_strlen($supplier_quotation) > 10)) {
            throw new \InvalidArgumentException('invalid length for $supplier_quotation when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['supplier_quotation'] = $supplier_quotation;

        return $this;
    }

    /**
     * Gets supplier_quotation_item
     *
     * @return string|null
     */
    public function getSupplierQuotationItem()
    {
        return $this->container['supplier_quotation_item'];
    }

    /**
     * Sets supplier_quotation_item
     *
     * @param string|null $supplier_quotation_item Item Number of RFQ
     *
     * @return self
     */
    public function setSupplierQuotationItem($supplier_quotation_item)
    {
        if (is_null($supplier_quotation_item)) {
            throw new \InvalidArgumentException('non-nullable supplier_quotation_item cannot be null');
        }
        if ((mb_strlen($supplier_quotation_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $supplier_quotation_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['supplier_quotation_item'] = $supplier_quotation_item;

        return $this;
    }

    /**
     * Gets evald_rcpt_settlmt_is_allowed
     *
     * @return bool|null
     */
    public function getEvaldRcptSettlmtIsAllowed()
    {
        return $this->container['evald_rcpt_settlmt_is_allowed'];
    }

    /**
     * Sets evald_rcpt_settlmt_is_allowed
     *
     * @param bool|null $evald_rcpt_settlmt_is_allowed Evaluated Receipt Settlement (ERS)
     *
     * @return self
     */
    public function setEvaldRcptSettlmtIsAllowed($evald_rcpt_settlmt_is_allowed)
    {
        if (is_null($evald_rcpt_settlmt_is_allowed)) {
            throw new \InvalidArgumentException('non-nullable evald_rcpt_settlmt_is_allowed cannot be null');
        }
        $this->container['evald_rcpt_settlmt_is_allowed'] = $evald_rcpt_settlmt_is_allowed;

        return $this;
    }

    /**
     * Gets unlimited_overdelivery_is_allowed
     *
     * @return bool|null
     */
    public function getUnlimitedOverdeliveryIsAllowed()
    {
        return $this->container['unlimited_overdelivery_is_allowed'];
    }

    /**
     * Sets unlimited_overdelivery_is_allowed
     *
     * @param bool|null $unlimited_overdelivery_is_allowed Unlimited Overdelivery Allowed
     *
     * @return self
     */
    public function setUnlimitedOverdeliveryIsAllowed($unlimited_overdelivery_is_allowed)
    {
        if (is_null($unlimited_overdelivery_is_allowed)) {
            throw new \InvalidArgumentException('non-nullable unlimited_overdelivery_is_allowed cannot be null');
        }
        $this->container['unlimited_overdelivery_is_allowed'] = $unlimited_overdelivery_is_allowed;

        return $this;
    }

    /**
     * Gets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\OverdelivTolerance|null
     */
    public function getOverdelivTolrtdLmtRatioInPct()
    {
        return $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\OverdelivTolerance|null $overdeliv_tolrtd_lmt_ratio_in_pct overdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return self
     */
    public function setOverdelivTolrtdLmtRatioInPct($overdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($overdeliv_tolrtd_lmt_ratio_in_pct)) {
            throw new \InvalidArgumentException('non-nullable overdeliv_tolrtd_lmt_ratio_in_pct cannot be null');
        }
        $this->container['overdeliv_tolrtd_lmt_ratio_in_pct'] = $overdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\UnderdelTolerance|null
     */
    public function getUnderdelivTolrtdLmtRatioInPct()
    {
        return $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'];
    }

    /**
     * Sets underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\UnderdelTolerance|null $underdeliv_tolrtd_lmt_ratio_in_pct underdeliv_tolrtd_lmt_ratio_in_pct
     *
     * @return self
     */
    public function setUnderdelivTolrtdLmtRatioInPct($underdeliv_tolrtd_lmt_ratio_in_pct)
    {
        if (is_null($underdeliv_tolrtd_lmt_ratio_in_pct)) {
            throw new \InvalidArgumentException('non-nullable underdeliv_tolrtd_lmt_ratio_in_pct cannot be null');
        }
        $this->container['underdeliv_tolrtd_lmt_ratio_in_pct'] = $underdeliv_tolrtd_lmt_ratio_in_pct;

        return $this;
    }

    /**
     * Gets requisitioner_name
     *
     * @return string|null
     */
    public function getRequisitionerName()
    {
        return $this->container['requisitioner_name'];
    }

    /**
     * Sets requisitioner_name
     *
     * @param string|null $requisitioner_name Name of requisitioner/requester
     *
     * @return self
     */
    public function setRequisitionerName($requisitioner_name)
    {
        if (is_null($requisitioner_name)) {
            throw new \InvalidArgumentException('non-nullable requisitioner_name cannot be null');
        }
        if ((mb_strlen($requisitioner_name) > 12)) {
            throw new \InvalidArgumentException('invalid length for $requisitioner_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 12.');
        }

        $this->container['requisitioner_name'] = $requisitioner_name;

        return $this;
    }

    /**
     * Gets planned_delivery_duration_in_days
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\PlannedDelivTime|null
     */
    public function getPlannedDeliveryDurationInDays()
    {
        return $this->container['planned_delivery_duration_in_days'];
    }

    /**
     * Sets planned_delivery_duration_in_days
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\PlannedDelivTime|null $planned_delivery_duration_in_days planned_delivery_duration_in_days
     *
     * @return self
     */
    public function setPlannedDeliveryDurationInDays($planned_delivery_duration_in_days)
    {
        if (is_null($planned_delivery_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable planned_delivery_duration_in_days cannot be null');
        }
        $this->container['planned_delivery_duration_in_days'] = $planned_delivery_duration_in_days;

        return $this;
    }

    /**
     * Gets goods_receipt_duration_in_days
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\GRProcessingTime|null
     */
    public function getGoodsReceiptDurationInDays()
    {
        return $this->container['goods_receipt_duration_in_days'];
    }

    /**
     * Sets goods_receipt_duration_in_days
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\GRProcessingTime|null $goods_receipt_duration_in_days goods_receipt_duration_in_days
     *
     * @return self
     */
    public function setGoodsReceiptDurationInDays($goods_receipt_duration_in_days)
    {
        if (is_null($goods_receipt_duration_in_days)) {
            throw new \InvalidArgumentException('non-nullable goods_receipt_duration_in_days cannot be null');
        }
        $this->container['goods_receipt_duration_in_days'] = $goods_receipt_duration_in_days;

        return $this;
    }

    /**
     * Gets partial_delivery_is_allowed
     *
     * @return string|null
     */
    public function getPartialDeliveryIsAllowed()
    {
        return $this->container['partial_delivery_is_allowed'];
    }

    /**
     * Sets partial_delivery_is_allowed
     *
     * @param string|null $partial_delivery_is_allowed Partial Delivery at Item Level (Stock Transfer)
     *
     * @return self
     */
    public function setPartialDeliveryIsAllowed($partial_delivery_is_allowed)
    {
        if (is_null($partial_delivery_is_allowed)) {
            throw new \InvalidArgumentException('non-nullable partial_delivery_is_allowed cannot be null');
        }
        if ((mb_strlen($partial_delivery_is_allowed) > 1)) {
            throw new \InvalidArgumentException('invalid length for $partial_delivery_is_allowed when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['partial_delivery_is_allowed'] = $partial_delivery_is_allowed;

        return $this;
    }

    /**
     * Gets consumption_posting
     *
     * @return string|null
     */
    public function getConsumptionPosting()
    {
        return $this->container['consumption_posting'];
    }

    /**
     * Sets consumption_posting
     *
     * @param string|null $consumption_posting Consumption posting
     *
     * @return self
     */
    public function setConsumptionPosting($consumption_posting)
    {
        if (is_null($consumption_posting)) {
            throw new \InvalidArgumentException('non-nullable consumption_posting cannot be null');
        }
        if ((mb_strlen($consumption_posting) > 1)) {
            throw new \InvalidArgumentException('invalid length for $consumption_posting when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['consumption_posting'] = $consumption_posting;

        return $this;
    }

    /**
     * Gets service_performer
     *
     * @return string|null
     */
    public function getServicePerformer()
    {
        return $this->container['service_performer'];
    }

    /**
     * Sets service_performer
     *
     * @param string|null $service_performer service_performer
     *
     * @return self
     */
    public function setServicePerformer($service_performer)
    {
        if (is_null($service_performer)) {
            throw new \InvalidArgumentException('non-nullable service_performer cannot be null');
        }
        if ((mb_strlen($service_performer) > 10)) {
            throw new \InvalidArgumentException('invalid length for $service_performer when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['service_performer'] = $service_performer;

        return $this;
    }

    /**
     * Gets service_package
     *
     * @return string|null
     */
    public function getServicePackage()
    {
        return $this->container['service_package'];
    }

    /**
     * Sets service_package
     *
     * @param string|null $service_package service_package
     *
     * @return self
     */
    public function setServicePackage($service_package)
    {
        if (is_null($service_package)) {
            throw new \InvalidArgumentException('non-nullable service_package cannot be null');
        }
        if ((mb_strlen($service_package) > 10)) {
            throw new \InvalidArgumentException('invalid length for $service_package when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['service_package'] = $service_package;

        return $this;
    }

    /**
     * Gets base_unit
     *
     * @return string|null
     */
    public function getBaseUnit()
    {
        return $this->container['base_unit'];
    }

    /**
     * Sets base_unit
     *
     * @param string|null $base_unit base_unit
     *
     * @return self
     */
    public function setBaseUnit($base_unit)
    {
        if (is_null($base_unit)) {
            throw new \InvalidArgumentException('non-nullable base_unit cannot be null');
        }
        if ((mb_strlen($base_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $base_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['base_unit'] = $base_unit;

        return $this;
    }

    /**
     * Gets purchase_order_item_category
     *
     * @return string|null
     */
    public function getPurchaseOrderItemCategory()
    {
        return $this->container['purchase_order_item_category'];
    }

    /**
     * Sets purchase_order_item_category
     *
     * @param string|null $purchase_order_item_category Item category in purchasing document
     *
     * @return self
     */
    public function setPurchaseOrderItemCategory($purchase_order_item_category)
    {
        if (is_null($purchase_order_item_category)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item_category cannot be null');
        }
        if ((mb_strlen($purchase_order_item_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purchase_order_item_category'] = $purchase_order_item_category;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            throw new \InvalidArgumentException('non-nullable profit_center cannot be null');
        }
        if ((mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets order_price_unit
     *
     * @return string|null
     */
    public function getOrderPriceUnit()
    {
        return $this->container['order_price_unit'];
    }

    /**
     * Sets order_price_unit
     *
     * @param string|null $order_price_unit Order Price Unit (Purchasing)
     *
     * @return self
     */
    public function setOrderPriceUnit($order_price_unit)
    {
        if (is_null($order_price_unit)) {
            throw new \InvalidArgumentException('non-nullable order_price_unit cannot be null');
        }
        if ((mb_strlen($order_price_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $order_price_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['order_price_unit'] = $order_price_unit;

        return $this;
    }

    /**
     * Gets item_volume_unit
     *
     * @return string|null
     */
    public function getItemVolumeUnit()
    {
        return $this->container['item_volume_unit'];
    }

    /**
     * Sets item_volume_unit
     *
     * @param string|null $item_volume_unit item_volume_unit
     *
     * @return self
     */
    public function setItemVolumeUnit($item_volume_unit)
    {
        if (is_null($item_volume_unit)) {
            throw new \InvalidArgumentException('non-nullable item_volume_unit cannot be null');
        }
        if ((mb_strlen($item_volume_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_volume_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['item_volume_unit'] = $item_volume_unit;

        return $this;
    }

    /**
     * Gets item_weight_unit
     *
     * @return string|null
     */
    public function getItemWeightUnit()
    {
        return $this->container['item_weight_unit'];
    }

    /**
     * Sets item_weight_unit
     *
     * @param string|null $item_weight_unit item_weight_unit
     *
     * @return self
     */
    public function setItemWeightUnit($item_weight_unit)
    {
        if (is_null($item_weight_unit)) {
            throw new \InvalidArgumentException('non-nullable item_weight_unit cannot be null');
        }
        if ((mb_strlen($item_weight_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $item_weight_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['item_weight_unit'] = $item_weight_unit;

        return $this;
    }

    /**
     * Gets multiple_acct_assgmt_distribution
     *
     * @return string|null
     */
    public function getMultipleAcctAssgmtDistribution()
    {
        return $this->container['multiple_acct_assgmt_distribution'];
    }

    /**
     * Sets multiple_acct_assgmt_distribution
     *
     * @param string|null $multiple_acct_assgmt_distribution Distribution Indicator for Multiple Account Assignment
     *
     * @return self
     */
    public function setMultipleAcctAssgmtDistribution($multiple_acct_assgmt_distribution)
    {
        if (is_null($multiple_acct_assgmt_distribution)) {
            throw new \InvalidArgumentException('non-nullable multiple_acct_assgmt_distribution cannot be null');
        }
        if ((mb_strlen($multiple_acct_assgmt_distribution) > 1)) {
            throw new \InvalidArgumentException('invalid length for $multiple_acct_assgmt_distribution when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['multiple_acct_assgmt_distribution'] = $multiple_acct_assgmt_distribution;

        return $this;
    }

    /**
     * Gets partial_invoice_distribution
     *
     * @return string|null
     */
    public function getPartialInvoiceDistribution()
    {
        return $this->container['partial_invoice_distribution'];
    }

    /**
     * Sets partial_invoice_distribution
     *
     * @param string|null $partial_invoice_distribution Partial invoice indicator
     *
     * @return self
     */
    public function setPartialInvoiceDistribution($partial_invoice_distribution)
    {
        if (is_null($partial_invoice_distribution)) {
            throw new \InvalidArgumentException('non-nullable partial_invoice_distribution cannot be null');
        }
        if ((mb_strlen($partial_invoice_distribution) > 1)) {
            throw new \InvalidArgumentException('invalid length for $partial_invoice_distribution when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['partial_invoice_distribution'] = $partial_invoice_distribution;

        return $this;
    }

    /**
     * Gets pricing_date_control
     *
     * @return string|null
     */
    public function getPricingDateControl()
    {
        return $this->container['pricing_date_control'];
    }

    /**
     * Sets pricing_date_control
     *
     * @param string|null $pricing_date_control Price Determination (Pricing) Date Control
     *
     * @return self
     */
    public function setPricingDateControl($pricing_date_control)
    {
        if (is_null($pricing_date_control)) {
            throw new \InvalidArgumentException('non-nullable pricing_date_control cannot be null');
        }
        if ((mb_strlen($pricing_date_control) > 1)) {
            throw new \InvalidArgumentException('invalid length for $pricing_date_control when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['pricing_date_control'] = $pricing_date_control;

        return $this;
    }

    /**
     * Gets is_statistical_item
     *
     * @return bool|null
     */
    public function getIsStatisticalItem()
    {
        return $this->container['is_statistical_item'];
    }

    /**
     * Sets is_statistical_item
     *
     * @param bool|null $is_statistical_item Item is statistical
     *
     * @return self
     */
    public function setIsStatisticalItem($is_statistical_item)
    {
        if (is_null($is_statistical_item)) {
            throw new \InvalidArgumentException('non-nullable is_statistical_item cannot be null');
        }
        $this->container['is_statistical_item'] = $is_statistical_item;

        return $this;
    }

    /**
     * Gets purchasing_parent_item
     *
     * @return string|null
     */
    public function getPurchasingParentItem()
    {
        return $this->container['purchasing_parent_item'];
    }

    /**
     * Sets purchasing_parent_item
     *
     * @param string|null $purchasing_parent_item Higher-Level Item in Purchasing Documents
     *
     * @return self
     */
    public function setPurchasingParentItem($purchasing_parent_item)
    {
        if (is_null($purchasing_parent_item)) {
            throw new \InvalidArgumentException('non-nullable purchasing_parent_item cannot be null');
        }
        if ((mb_strlen($purchasing_parent_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_parent_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['purchasing_parent_item'] = $purchasing_parent_item;

        return $this;
    }

    /**
     * Gets goods_receipt_latest_creation_date
     *
     * @return \DateTime|null
     */
    public function getGoodsReceiptLatestCreationDate()
    {
        return $this->container['goods_receipt_latest_creation_date'];
    }

    /**
     * Sets goods_receipt_latest_creation_date
     *
     * @param \DateTime|null $goods_receipt_latest_creation_date Latest Possible Goods Receipt
     *
     * @return self
     */
    public function setGoodsReceiptLatestCreationDate($goods_receipt_latest_creation_date)
    {
        if (is_null($goods_receipt_latest_creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'goods_receipt_latest_creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('goods_receipt_latest_creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['goods_receipt_latest_creation_date'] = $goods_receipt_latest_creation_date;

        return $this;
    }

    /**
     * Gets is_returns_item
     *
     * @return bool|null
     */
    public function getIsReturnsItem()
    {
        return $this->container['is_returns_item'];
    }

    /**
     * Sets is_returns_item
     *
     * @param bool|null $is_returns_item is_returns_item
     *
     * @return self
     */
    public function setIsReturnsItem($is_returns_item)
    {
        if (is_null($is_returns_item)) {
            throw new \InvalidArgumentException('non-nullable is_returns_item cannot be null');
        }
        $this->container['is_returns_item'] = $is_returns_item;

        return $this;
    }

    /**
     * Gets purchasing_order_reason
     *
     * @return string|null
     */
    public function getPurchasingOrderReason()
    {
        return $this->container['purchasing_order_reason'];
    }

    /**
     * Sets purchasing_order_reason
     *
     * @param string|null $purchasing_order_reason purchasing_order_reason
     *
     * @return self
     */
    public function setPurchasingOrderReason($purchasing_order_reason)
    {
        if (is_null($purchasing_order_reason)) {
            throw new \InvalidArgumentException('non-nullable purchasing_order_reason cannot be null');
        }
        if ((mb_strlen($purchasing_order_reason) > 3)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_order_reason when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['purchasing_order_reason'] = $purchasing_order_reason;

        return $this;
    }

    /**
     * Gets incoterms_classification
     *
     * @return string|null
     */
    public function getIncotermsClassification()
    {
        return $this->container['incoterms_classification'];
    }

    /**
     * Sets incoterms_classification
     *
     * @param string|null $incoterms_classification Incoterms (Part 1)
     *
     * @return self
     */
    public function setIncotermsClassification($incoterms_classification)
    {
        if (is_null($incoterms_classification)) {
            throw new \InvalidArgumentException('non-nullable incoterms_classification cannot be null');
        }
        if ((mb_strlen($incoterms_classification) > 3)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_classification when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['incoterms_classification'] = $incoterms_classification;

        return $this;
    }

    /**
     * Gets incoterms_transfer_location
     *
     * @return string|null
     */
    public function getIncotermsTransferLocation()
    {
        return $this->container['incoterms_transfer_location'];
    }

    /**
     * Sets incoterms_transfer_location
     *
     * @param string|null $incoterms_transfer_location incoterms_transfer_location
     *
     * @return self
     */
    public function setIncotermsTransferLocation($incoterms_transfer_location)
    {
        if (is_null($incoterms_transfer_location)) {
            throw new \InvalidArgumentException('non-nullable incoterms_transfer_location cannot be null');
        }
        if ((mb_strlen($incoterms_transfer_location) > 28)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_transfer_location when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 28.');
        }

        $this->container['incoterms_transfer_location'] = $incoterms_transfer_location;

        return $this;
    }

    /**
     * Gets incoterms_location1
     *
     * @return string|null
     */
    public function getIncotermsLocation1()
    {
        return $this->container['incoterms_location1'];
    }

    /**
     * Sets incoterms_location1
     *
     * @param string|null $incoterms_location1 incoterms_location1
     *
     * @return self
     */
    public function setIncotermsLocation1($incoterms_location1)
    {
        if (is_null($incoterms_location1)) {
            throw new \InvalidArgumentException('non-nullable incoterms_location1 cannot be null');
        }
        if ((mb_strlen($incoterms_location1) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location1'] = $incoterms_location1;

        return $this;
    }

    /**
     * Gets incoterms_location2
     *
     * @return string|null
     */
    public function getIncotermsLocation2()
    {
        return $this->container['incoterms_location2'];
    }

    /**
     * Sets incoterms_location2
     *
     * @param string|null $incoterms_location2 incoterms_location2
     *
     * @return self
     */
    public function setIncotermsLocation2($incoterms_location2)
    {
        if (is_null($incoterms_location2)) {
            throw new \InvalidArgumentException('non-nullable incoterms_location2 cannot be null');
        }
        if ((mb_strlen($incoterms_location2) > 70)) {
            throw new \InvalidArgumentException('invalid length for $incoterms_location2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 70.');
        }

        $this->container['incoterms_location2'] = $incoterms_location2;

        return $this;
    }

    /**
     * Gets prior_supplier
     *
     * @return string|null
     */
    public function getPriorSupplier()
    {
        return $this->container['prior_supplier'];
    }

    /**
     * Sets prior_supplier
     *
     * @param string|null $prior_supplier prior_supplier
     *
     * @return self
     */
    public function setPriorSupplier($prior_supplier)
    {
        if (is_null($prior_supplier)) {
            throw new \InvalidArgumentException('non-nullable prior_supplier cannot be null');
        }
        if ((mb_strlen($prior_supplier) > 10)) {
            throw new \InvalidArgumentException('invalid length for $prior_supplier when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['prior_supplier'] = $prior_supplier;

        return $this;
    }

    /**
     * Gets international_article_number
     *
     * @return string|null
     */
    public function getInternationalArticleNumber()
    {
        return $this->container['international_article_number'];
    }

    /**
     * Sets international_article_number
     *
     * @param string|null $international_article_number International Article Number (EAN/UPC)
     *
     * @return self
     */
    public function setInternationalArticleNumber($international_article_number)
    {
        if (is_null($international_article_number)) {
            throw new \InvalidArgumentException('non-nullable international_article_number cannot be null');
        }
        if ((mb_strlen($international_article_number) > 18)) {
            throw new \InvalidArgumentException('invalid length for $international_article_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['international_article_number'] = $international_article_number;

        return $this;
    }

    /**
     * Gets intrastat_service_code
     *
     * @return string|null
     */
    public function getIntrastatServiceCode()
    {
        return $this->container['intrastat_service_code'];
    }

    /**
     * Sets intrastat_service_code
     *
     * @param string|null $intrastat_service_code Intrastat Service Code
     *
     * @return self
     */
    public function setIntrastatServiceCode($intrastat_service_code)
    {
        if (is_null($intrastat_service_code)) {
            throw new \InvalidArgumentException('non-nullable intrastat_service_code cannot be null');
        }
        if ((mb_strlen($intrastat_service_code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $intrastat_service_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['intrastat_service_code'] = $intrastat_service_code;

        return $this;
    }

    /**
     * Gets commodity_code
     *
     * @return string|null
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param string|null $commodity_code commodity_code
     *
     * @return self
     */
    public function setCommodityCode($commodity_code)
    {
        if (is_null($commodity_code)) {
            throw new \InvalidArgumentException('non-nullable commodity_code cannot be null');
        }
        if ((mb_strlen($commodity_code) > 30)) {
            throw new \InvalidArgumentException('invalid length for $commodity_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 30.');
        }

        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets material_freight_group
     *
     * @return string|null
     */
    public function getMaterialFreightGroup()
    {
        return $this->container['material_freight_group'];
    }

    /**
     * Sets material_freight_group
     *
     * @param string|null $material_freight_group Material Freight Group
     *
     * @return self
     */
    public function setMaterialFreightGroup($material_freight_group)
    {
        if (is_null($material_freight_group)) {
            throw new \InvalidArgumentException('non-nullable material_freight_group cannot be null');
        }
        if ((mb_strlen($material_freight_group) > 8)) {
            throw new \InvalidArgumentException('invalid length for $material_freight_group when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 8.');
        }

        $this->container['material_freight_group'] = $material_freight_group;

        return $this;
    }

    /**
     * Gets discount_in_kind_eligibility
     *
     * @return string|null
     */
    public function getDiscountInKindEligibility()
    {
        return $this->container['discount_in_kind_eligibility'];
    }

    /**
     * Sets discount_in_kind_eligibility
     *
     * @param string|null $discount_in_kind_eligibility Material qualifies for discount in kind
     *
     * @return self
     */
    public function setDiscountInKindEligibility($discount_in_kind_eligibility)
    {
        if (is_null($discount_in_kind_eligibility)) {
            throw new \InvalidArgumentException('non-nullable discount_in_kind_eligibility cannot be null');
        }
        if ((mb_strlen($discount_in_kind_eligibility) > 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_in_kind_eligibility when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['discount_in_kind_eligibility'] = $discount_in_kind_eligibility;

        return $this;
    }

    /**
     * Gets purg_item_is_blocked_for_delivery
     *
     * @return bool|null
     */
    public function getPurgItemIsBlockedForDelivery()
    {
        return $this->container['purg_item_is_blocked_for_delivery'];
    }

    /**
     * Sets purg_item_is_blocked_for_delivery
     *
     * @param bool|null $purg_item_is_blocked_for_delivery Item blocked for SD delivery
     *
     * @return self
     */
    public function setPurgItemIsBlockedForDelivery($purg_item_is_blocked_for_delivery)
    {
        if (is_null($purg_item_is_blocked_for_delivery)) {
            throw new \InvalidArgumentException('non-nullable purg_item_is_blocked_for_delivery cannot be null');
        }
        $this->container['purg_item_is_blocked_for_delivery'] = $purg_item_is_blocked_for_delivery;

        return $this;
    }

    /**
     * Gets supplier_confirmation_control_key
     *
     * @return string|null
     */
    public function getSupplierConfirmationControlKey()
    {
        return $this->container['supplier_confirmation_control_key'];
    }

    /**
     * Sets supplier_confirmation_control_key
     *
     * @param string|null $supplier_confirmation_control_key Confirmation Control Key
     *
     * @return self
     */
    public function setSupplierConfirmationControlKey($supplier_confirmation_control_key)
    {
        if (is_null($supplier_confirmation_control_key)) {
            throw new \InvalidArgumentException('non-nullable supplier_confirmation_control_key cannot be null');
        }
        if ((mb_strlen($supplier_confirmation_control_key) > 4)) {
            throw new \InvalidArgumentException('invalid length for $supplier_confirmation_control_key when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['supplier_confirmation_control_key'] = $supplier_confirmation_control_key;

        return $this;
    }

    /**
     * Gets purg_doc_order_ackn_number
     *
     * @return string|null
     */
    public function getPurgDocOrderAcknNumber()
    {
        return $this->container['purg_doc_order_ackn_number'];
    }

    /**
     * Sets purg_doc_order_ackn_number
     *
     * @param string|null $purg_doc_order_ackn_number Order Acknowledgment Number
     *
     * @return self
     */
    public function setPurgDocOrderAcknNumber($purg_doc_order_ackn_number)
    {
        if (is_null($purg_doc_order_ackn_number)) {
            throw new \InvalidArgumentException('non-nullable purg_doc_order_ackn_number cannot be null');
        }
        if ((mb_strlen($purg_doc_order_ackn_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $purg_doc_order_ackn_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 20.');
        }

        $this->container['purg_doc_order_ackn_number'] = $purg_doc_order_ackn_number;

        return $this;
    }

    /**
     * Gets price_is_to_be_printed
     *
     * @return bool|null
     */
    public function getPriceIsToBePrinted()
    {
        return $this->container['price_is_to_be_printed'];
    }

    /**
     * Sets price_is_to_be_printed
     *
     * @param bool|null $price_is_to_be_printed Price Printout
     *
     * @return self
     */
    public function setPriceIsToBePrinted($price_is_to_be_printed)
    {
        if (is_null($price_is_to_be_printed)) {
            throw new \InvalidArgumentException('non-nullable price_is_to_be_printed cannot be null');
        }
        $this->container['price_is_to_be_printed'] = $price_is_to_be_printed;

        return $this;
    }

    /**
     * Gets account_assignment_category
     *
     * @return string|null
     */
    public function getAccountAssignmentCategory()
    {
        return $this->container['account_assignment_category'];
    }

    /**
     * Sets account_assignment_category
     *
     * @param string|null $account_assignment_category Account Assignment Category
     *
     * @return self
     */
    public function setAccountAssignmentCategory($account_assignment_category)
    {
        if (is_null($account_assignment_category)) {
            throw new \InvalidArgumentException('non-nullable account_assignment_category cannot be null');
        }
        if ((mb_strlen($account_assignment_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $account_assignment_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['account_assignment_category'] = $account_assignment_category;

        return $this;
    }

    /**
     * Gets purchasing_info_record
     *
     * @return string|null
     */
    public function getPurchasingInfoRecord()
    {
        return $this->container['purchasing_info_record'];
    }

    /**
     * Sets purchasing_info_record
     *
     * @param string|null $purchasing_info_record Purchasing Info Record Number
     *
     * @return self
     */
    public function setPurchasingInfoRecord($purchasing_info_record)
    {
        if (is_null($purchasing_info_record)) {
            throw new \InvalidArgumentException('non-nullable purchasing_info_record cannot be null');
        }
        if ((mb_strlen($purchasing_info_record) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_info_record when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['purchasing_info_record'] = $purchasing_info_record;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NetOrderValue|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NetOrderValue|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\GrossOrderValue|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\GrossOrderValue|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets effective_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\EffectiveValue|null
     */
    public function getEffectiveAmount()
    {
        return $this->container['effective_amount'];
    }

    /**
     * Sets effective_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\EffectiveValue|null $effective_amount effective_amount
     *
     * @return self
     */
    public function setEffectiveAmount($effective_amount)
    {
        if (is_null($effective_amount)) {
            throw new \InvalidArgumentException('non-nullable effective_amount cannot be null');
        }
        $this->container['effective_amount'] = $effective_amount;

        return $this;
    }

    /**
     * Gets subtotal1_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal1|null
     */
    public function getSubtotal1Amount()
    {
        return $this->container['subtotal1_amount'];
    }

    /**
     * Sets subtotal1_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal1|null $subtotal1_amount subtotal1_amount
     *
     * @return self
     */
    public function setSubtotal1Amount($subtotal1_amount)
    {
        if (is_null($subtotal1_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal1_amount cannot be null');
        }
        $this->container['subtotal1_amount'] = $subtotal1_amount;

        return $this;
    }

    /**
     * Gets subtotal2_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal2|null
     */
    public function getSubtotal2Amount()
    {
        return $this->container['subtotal2_amount'];
    }

    /**
     * Sets subtotal2_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal2|null $subtotal2_amount subtotal2_amount
     *
     * @return self
     */
    public function setSubtotal2Amount($subtotal2_amount)
    {
        if (is_null($subtotal2_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal2_amount cannot be null');
        }
        $this->container['subtotal2_amount'] = $subtotal2_amount;

        return $this;
    }

    /**
     * Gets subtotal3_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal3|null
     */
    public function getSubtotal3Amount()
    {
        return $this->container['subtotal3_amount'];
    }

    /**
     * Sets subtotal3_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal3|null $subtotal3_amount subtotal3_amount
     *
     * @return self
     */
    public function setSubtotal3Amount($subtotal3_amount)
    {
        if (is_null($subtotal3_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal3_amount cannot be null');
        }
        $this->container['subtotal3_amount'] = $subtotal3_amount;

        return $this;
    }

    /**
     * Gets subtotal4_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal4|null
     */
    public function getSubtotal4Amount()
    {
        return $this->container['subtotal4_amount'];
    }

    /**
     * Sets subtotal4_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal4|null $subtotal4_amount subtotal4_amount
     *
     * @return self
     */
    public function setSubtotal4Amount($subtotal4_amount)
    {
        if (is_null($subtotal4_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal4_amount cannot be null');
        }
        $this->container['subtotal4_amount'] = $subtotal4_amount;

        return $this;
    }

    /**
     * Gets subtotal5_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal5|null
     */
    public function getSubtotal5Amount()
    {
        return $this->container['subtotal5_amount'];
    }

    /**
     * Sets subtotal5_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal5|null $subtotal5_amount subtotal5_amount
     *
     * @return self
     */
    public function setSubtotal5Amount($subtotal5_amount)
    {
        if (is_null($subtotal5_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal5_amount cannot be null');
        }
        $this->container['subtotal5_amount'] = $subtotal5_amount;

        return $this;
    }

    /**
     * Gets subtotal6_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Subtotal6|null
     */
    public function getSubtotal6Amount()
    {
        return $this->container['subtotal6_amount'];
    }

    /**
     * Sets subtotal6_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Subtotal6|null $subtotal6_amount subtotal6_amount
     *
     * @return self
     */
    public function setSubtotal6Amount($subtotal6_amount)
    {
        if (is_null($subtotal6_amount)) {
            throw new \InvalidArgumentException('non-nullable subtotal6_amount cannot be null');
        }
        $this->container['subtotal6_amount'] = $subtotal6_amount;

        return $this;
    }

    /**
     * Gets order_quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\OrderQuantity|null
     */
    public function getOrderQuantity()
    {
        return $this->container['order_quantity'];
    }

    /**
     * Sets order_quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\OrderQuantity|null $order_quantity order_quantity
     *
     * @return self
     */
    public function setOrderQuantity($order_quantity)
    {
        if (is_null($order_quantity)) {
            throw new \InvalidArgumentException('non-nullable order_quantity cannot be null');
        }
        $this->container['order_quantity'] = $order_quantity;

        return $this;
    }

    /**
     * Gets net_price_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NetOrderPrice|null
     */
    public function getNetPriceAmount()
    {
        return $this->container['net_price_amount'];
    }

    /**
     * Sets net_price_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NetOrderPrice|null $net_price_amount net_price_amount
     *
     * @return self
     */
    public function setNetPriceAmount($net_price_amount)
    {
        if (is_null($net_price_amount)) {
            throw new \InvalidArgumentException('non-nullable net_price_amount cannot be null');
        }
        $this->container['net_price_amount'] = $net_price_amount;

        return $this;
    }

    /**
     * Gets item_volume
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Volume|null
     */
    public function getItemVolume()
    {
        return $this->container['item_volume'];
    }

    /**
     * Sets item_volume
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Volume|null $item_volume item_volume
     *
     * @return self
     */
    public function setItemVolume($item_volume)
    {
        if (is_null($item_volume)) {
            throw new \InvalidArgumentException('non-nullable item_volume cannot be null');
        }
        $this->container['item_volume'] = $item_volume;

        return $this;
    }

    /**
     * Gets item_gross_weight
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\GrossWeight|null
     */
    public function getItemGrossWeight()
    {
        return $this->container['item_gross_weight'];
    }

    /**
     * Sets item_gross_weight
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\GrossWeight|null $item_gross_weight item_gross_weight
     *
     * @return self
     */
    public function setItemGrossWeight($item_gross_weight)
    {
        if (is_null($item_gross_weight)) {
            throw new \InvalidArgumentException('non-nullable item_gross_weight cannot be null');
        }
        $this->container['item_gross_weight'] = $item_gross_weight;

        return $this;
    }

    /**
     * Gets item_net_weight
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NetWeight|null
     */
    public function getItemNetWeight()
    {
        return $this->container['item_net_weight'];
    }

    /**
     * Sets item_net_weight
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NetWeight|null $item_net_weight item_net_weight
     *
     * @return self
     */
    public function setItemNetWeight($item_net_weight)
    {
        if (is_null($item_net_weight)) {
            throw new \InvalidArgumentException('non-nullable item_net_weight cannot be null');
        }
        $this->container['item_net_weight'] = $item_net_weight;

        return $this;
    }

    /**
     * Gets order_price_unit_to_order_unit_nmrtr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\QuantityConversion|null
     */
    public function getOrderPriceUnitToOrderUnitNmrtr()
    {
        return $this->container['order_price_unit_to_order_unit_nmrtr'];
    }

    /**
     * Sets order_price_unit_to_order_unit_nmrtr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\QuantityConversion|null $order_price_unit_to_order_unit_nmrtr order_price_unit_to_order_unit_nmrtr
     *
     * @return self
     */
    public function setOrderPriceUnitToOrderUnitNmrtr($order_price_unit_to_order_unit_nmrtr)
    {
        if (is_null($order_price_unit_to_order_unit_nmrtr)) {
            throw new \InvalidArgumentException('non-nullable order_price_unit_to_order_unit_nmrtr cannot be null');
        }
        $this->container['order_price_unit_to_order_unit_nmrtr'] = $order_price_unit_to_order_unit_nmrtr;

        return $this;
    }

    /**
     * Gets ord_price_unit_to_order_unit_dnmntr
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\QuantityConversion1|null
     */
    public function getOrdPriceUnitToOrderUnitDnmntr()
    {
        return $this->container['ord_price_unit_to_order_unit_dnmntr'];
    }

    /**
     * Sets ord_price_unit_to_order_unit_dnmntr
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\QuantityConversion1|null $ord_price_unit_to_order_unit_dnmntr ord_price_unit_to_order_unit_dnmntr
     *
     * @return self
     */
    public function setOrdPriceUnitToOrderUnitDnmntr($ord_price_unit_to_order_unit_dnmntr)
    {
        if (is_null($ord_price_unit_to_order_unit_dnmntr)) {
            throw new \InvalidArgumentException('non-nullable ord_price_unit_to_order_unit_dnmntr cannot be null');
        }
        $this->container['ord_price_unit_to_order_unit_dnmntr'] = $ord_price_unit_to_order_unit_dnmntr;

        return $this;
    }

    /**
     * Gets goods_receipt_is_non_valuated
     *
     * @return bool|null
     */
    public function getGoodsReceiptIsNonValuated()
    {
        return $this->container['goods_receipt_is_non_valuated'];
    }

    /**
     * Sets goods_receipt_is_non_valuated
     *
     * @param bool|null $goods_receipt_is_non_valuated Goods Receipt, Non-Valuated
     *
     * @return self
     */
    public function setGoodsReceiptIsNonValuated($goods_receipt_is_non_valuated)
    {
        if (is_null($goods_receipt_is_non_valuated)) {
            throw new \InvalidArgumentException('non-nullable goods_receipt_is_non_valuated cannot be null');
        }
        $this->container['goods_receipt_is_non_valuated'] = $goods_receipt_is_non_valuated;

        return $this;
    }

    /**
     * Gets is_to_be_accepted_at_origin
     *
     * @return bool|null
     */
    public function getIsToBeAcceptedAtOrigin()
    {
        return $this->container['is_to_be_accepted_at_origin'];
    }

    /**
     * Sets is_to_be_accepted_at_origin
     *
     * @param bool|null $is_to_be_accepted_at_origin Acceptance At Origin
     *
     * @return self
     */
    public function setIsToBeAcceptedAtOrigin($is_to_be_accepted_at_origin)
    {
        if (is_null($is_to_be_accepted_at_origin)) {
            throw new \InvalidArgumentException('non-nullable is_to_be_accepted_at_origin cannot be null');
        }
        $this->container['is_to_be_accepted_at_origin'] = $is_to_be_accepted_at_origin;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Tax on Sales/Purchases Code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        if ((mb_strlen($tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable tax_jurisdiction cannot be null');
        }
        if ((mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets tax_country
     *
     * @return string|null
     */
    public function getTaxCountry()
    {
        return $this->container['tax_country'];
    }

    /**
     * Sets tax_country
     *
     * @param string|null $tax_country Tax Reporting Country/Region
     *
     * @return self
     */
    public function setTaxCountry($tax_country)
    {
        if (is_null($tax_country)) {
            throw new \InvalidArgumentException('non-nullable tax_country cannot be null');
        }
        if ((mb_strlen($tax_country) > 3)) {
            throw new \InvalidArgumentException('invalid length for $tax_country when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 3.');
        }

        $this->container['tax_country'] = $tax_country;

        return $this;
    }

    /**
     * Gets tax_determination_date
     *
     * @return \DateTime|null
     */
    public function getTaxDeterminationDate()
    {
        return $this->container['tax_determination_date'];
    }

    /**
     * Sets tax_determination_date
     *
     * @param \DateTime|null $tax_determination_date Date for Determining Tax Rates
     *
     * @return self
     */
    public function setTaxDeterminationDate($tax_determination_date)
    {
        if (is_null($tax_determination_date)) {
            array_push($this->openAPINullablesSetToNull, 'tax_determination_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tax_determination_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tax_determination_date'] = $tax_determination_date;

        return $this;
    }

    /**
     * Gets shipping_instruction
     *
     * @return string|null
     */
    public function getShippingInstruction()
    {
        return $this->container['shipping_instruction'];
    }

    /**
     * Sets shipping_instruction
     *
     * @param string|null $shipping_instruction Shipping Instructions
     *
     * @return self
     */
    public function setShippingInstruction($shipping_instruction)
    {
        if (is_null($shipping_instruction)) {
            throw new \InvalidArgumentException('non-nullable shipping_instruction cannot be null');
        }
        if ((mb_strlen($shipping_instruction) > 2)) {
            throw new \InvalidArgumentException('invalid length for $shipping_instruction when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['shipping_instruction'] = $shipping_instruction;

        return $this;
    }

    /**
     * Gets non_deductible_input_tax_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NonDeductible|null
     */
    public function getNonDeductibleInputTaxAmount()
    {
        return $this->container['non_deductible_input_tax_amount'];
    }

    /**
     * Sets non_deductible_input_tax_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NonDeductible|null $non_deductible_input_tax_amount non_deductible_input_tax_amount
     *
     * @return self
     */
    public function setNonDeductibleInputTaxAmount($non_deductible_input_tax_amount)
    {
        if (is_null($non_deductible_input_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable non_deductible_input_tax_amount cannot be null');
        }
        $this->container['non_deductible_input_tax_amount'] = $non_deductible_input_tax_amount;

        return $this;
    }

    /**
     * Gets stock_type
     *
     * @return string|null
     */
    public function getStockType()
    {
        return $this->container['stock_type'];
    }

    /**
     * Sets stock_type
     *
     * @param string|null $stock_type stock_type
     *
     * @return self
     */
    public function setStockType($stock_type)
    {
        if (is_null($stock_type)) {
            throw new \InvalidArgumentException('non-nullable stock_type cannot be null');
        }
        if ((mb_strlen($stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $stock_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['stock_type'] = $stock_type;

        return $this;
    }

    /**
     * Gets valuation_type
     *
     * @return string|null
     */
    public function getValuationType()
    {
        return $this->container['valuation_type'];
    }

    /**
     * Sets valuation_type
     *
     * @param string|null $valuation_type valuation_type
     *
     * @return self
     */
    public function setValuationType($valuation_type)
    {
        if (is_null($valuation_type)) {
            throw new \InvalidArgumentException('non-nullable valuation_type cannot be null');
        }
        if ((mb_strlen($valuation_type) > 10)) {
            throw new \InvalidArgumentException('invalid length for $valuation_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['valuation_type'] = $valuation_type;

        return $this;
    }

    /**
     * Gets valuation_category
     *
     * @return string|null
     */
    public function getValuationCategory()
    {
        return $this->container['valuation_category'];
    }

    /**
     * Sets valuation_category
     *
     * @param string|null $valuation_category valuation_category
     *
     * @return self
     */
    public function setValuationCategory($valuation_category)
    {
        if (is_null($valuation_category)) {
            throw new \InvalidArgumentException('non-nullable valuation_category cannot be null');
        }
        if ((mb_strlen($valuation_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $valuation_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['valuation_category'] = $valuation_category;

        return $this;
    }

    /**
     * Gets item_is_rejected_by_supplier
     *
     * @return bool|null
     */
    public function getItemIsRejectedBySupplier()
    {
        return $this->container['item_is_rejected_by_supplier'];
    }

    /**
     * Sets item_is_rejected_by_supplier
     *
     * @param bool|null $item_is_rejected_by_supplier item_is_rejected_by_supplier
     *
     * @return self
     */
    public function setItemIsRejectedBySupplier($item_is_rejected_by_supplier)
    {
        if (is_null($item_is_rejected_by_supplier)) {
            throw new \InvalidArgumentException('non-nullable item_is_rejected_by_supplier cannot be null');
        }
        $this->container['item_is_rejected_by_supplier'] = $item_is_rejected_by_supplier;

        return $this;
    }

    /**
     * Gets purg_doc_price_date
     *
     * @return \DateTime|null
     */
    public function getPurgDocPriceDate()
    {
        return $this->container['purg_doc_price_date'];
    }

    /**
     * Sets purg_doc_price_date
     *
     * @param \DateTime|null $purg_doc_price_date Date of Price Determination
     *
     * @return self
     */
    public function setPurgDocPriceDate($purg_doc_price_date)
    {
        if (is_null($purg_doc_price_date)) {
            array_push($this->openAPINullablesSetToNull, 'purg_doc_price_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purg_doc_price_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purg_doc_price_date'] = $purg_doc_price_date;

        return $this;
    }

    /**
     * Gets purchasing_info_record_update_code
     *
     * @return string|null
     */
    public function getPurchasingInfoRecordUpdateCode()
    {
        return $this->container['purchasing_info_record_update_code'];
    }

    /**
     * Sets purchasing_info_record_update_code
     *
     * @param string|null $purchasing_info_record_update_code Indicator: Update Info Record
     *
     * @return self
     */
    public function setPurchasingInfoRecordUpdateCode($purchasing_info_record_update_code)
    {
        if (is_null($purchasing_info_record_update_code)) {
            throw new \InvalidArgumentException('non-nullable purchasing_info_record_update_code cannot be null');
        }
        if ((mb_strlen($purchasing_info_record_update_code) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purchasing_info_record_update_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purchasing_info_record_update_code'] = $purchasing_info_record_update_code;

        return $this;
    }

    /**
     * Gets inventory_special_stock_type
     *
     * @return string|null
     */
    public function getInventorySpecialStockType()
    {
        return $this->container['inventory_special_stock_type'];
    }

    /**
     * Sets inventory_special_stock_type
     *
     * @param string|null $inventory_special_stock_type Special Stock Indicator
     *
     * @return self
     */
    public function setInventorySpecialStockType($inventory_special_stock_type)
    {
        if (is_null($inventory_special_stock_type)) {
            throw new \InvalidArgumentException('non-nullable inventory_special_stock_type cannot be null');
        }
        if ((mb_strlen($inventory_special_stock_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_special_stock_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['inventory_special_stock_type'] = $inventory_special_stock_type;

        return $this;
    }

    /**
     * Gets delivery_document_type
     *
     * @return string|null
     */
    public function getDeliveryDocumentType()
    {
        return $this->container['delivery_document_type'];
    }

    /**
     * Sets delivery_document_type
     *
     * @param string|null $delivery_document_type Delivery Type for Returns to Supplier
     *
     * @return self
     */
    public function setDeliveryDocumentType($delivery_document_type)
    {
        if (is_null($delivery_document_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_document_type cannot be null');
        }
        if ((mb_strlen($delivery_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $delivery_document_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['delivery_document_type'] = $delivery_document_type;

        return $this;
    }

    /**
     * Gets issuing_storage_location
     *
     * @return string|null
     */
    public function getIssuingStorageLocation()
    {
        return $this->container['issuing_storage_location'];
    }

    /**
     * Sets issuing_storage_location
     *
     * @param string|null $issuing_storage_location Issuing Storage Location for Stock Transport Order
     *
     * @return self
     */
    public function setIssuingStorageLocation($issuing_storage_location)
    {
        if (is_null($issuing_storage_location)) {
            throw new \InvalidArgumentException('non-nullable issuing_storage_location cannot be null');
        }
        if ((mb_strlen($issuing_storage_location) > 4)) {
            throw new \InvalidArgumentException('invalid length for $issuing_storage_location when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['issuing_storage_location'] = $issuing_storage_location;

        return $this;
    }

    /**
     * Gets allocation_table
     *
     * @return string|null
     */
    public function getAllocationTable()
    {
        return $this->container['allocation_table'];
    }

    /**
     * Sets allocation_table
     *
     * @param string|null $allocation_table allocation_table
     *
     * @return self
     */
    public function setAllocationTable($allocation_table)
    {
        if (is_null($allocation_table)) {
            throw new \InvalidArgumentException('non-nullable allocation_table cannot be null');
        }
        if ((mb_strlen($allocation_table) > 10)) {
            throw new \InvalidArgumentException('invalid length for $allocation_table when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['allocation_table'] = $allocation_table;

        return $this;
    }

    /**
     * Gets allocation_table_item
     *
     * @return string|null
     */
    public function getAllocationTableItem()
    {
        return $this->container['allocation_table_item'];
    }

    /**
     * Sets allocation_table_item
     *
     * @param string|null $allocation_table_item Allocation Table Item
     *
     * @return self
     */
    public function setAllocationTableItem($allocation_table_item)
    {
        if (is_null($allocation_table_item)) {
            throw new \InvalidArgumentException('non-nullable allocation_table_item cannot be null');
        }
        if ((mb_strlen($allocation_table_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $allocation_table_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['allocation_table_item'] = $allocation_table_item;

        return $this;
    }

    /**
     * Gets retail_promotion
     *
     * @return string|null
     */
    public function getRetailPromotion()
    {
        return $this->container['retail_promotion'];
    }

    /**
     * Sets retail_promotion
     *
     * @param string|null $retail_promotion retail_promotion
     *
     * @return self
     */
    public function setRetailPromotion($retail_promotion)
    {
        if (is_null($retail_promotion)) {
            throw new \InvalidArgumentException('non-nullable retail_promotion cannot be null');
        }
        if ((mb_strlen($retail_promotion) > 10)) {
            throw new \InvalidArgumentException('invalid length for $retail_promotion when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['retail_promotion'] = $retail_promotion;

        return $this;
    }

    /**
     * Gets purg_configurable_item_number
     *
     * @return string|null
     */
    public function getPurgConfigurableItemNumber()
    {
        return $this->container['purg_configurable_item_number'];
    }

    /**
     * Sets purg_configurable_item_number
     *
     * @param string|null $purg_configurable_item_number purg_configurable_item_number
     *
     * @return self
     */
    public function setPurgConfigurableItemNumber($purg_configurable_item_number)
    {
        if (is_null($purg_configurable_item_number)) {
            throw new \InvalidArgumentException('non-nullable purg_configurable_item_number cannot be null');
        }
        if ((mb_strlen($purg_configurable_item_number) > 40)) {
            throw new \InvalidArgumentException('invalid length for $purg_configurable_item_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['purg_configurable_item_number'] = $purg_configurable_item_number;

        return $this;
    }

    /**
     * Gets purg_doc_aggrgd_subitem_category
     *
     * @return string|null
     */
    public function getPurgDocAggrgdSubitemCategory()
    {
        return $this->container['purg_doc_aggrgd_subitem_category'];
    }

    /**
     * Sets purg_doc_aggrgd_subitem_category
     *
     * @param string|null $purg_doc_aggrgd_subitem_category Subitems Exist
     *
     * @return self
     */
    public function setPurgDocAggrgdSubitemCategory($purg_doc_aggrgd_subitem_category)
    {
        if (is_null($purg_doc_aggrgd_subitem_category)) {
            throw new \InvalidArgumentException('non-nullable purg_doc_aggrgd_subitem_category cannot be null');
        }
        if ((mb_strlen($purg_doc_aggrgd_subitem_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purg_doc_aggrgd_subitem_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purg_doc_aggrgd_subitem_category'] = $purg_doc_aggrgd_subitem_category;

        return $this;
    }

    /**
     * Gets purg_external_sort_number
     *
     * @return string|null
     */
    public function getPurgExternalSortNumber()
    {
        return $this->container['purg_external_sort_number'];
    }

    /**
     * Sets purg_external_sort_number
     *
     * @param string|null $purg_external_sort_number External Sort Number
     *
     * @return self
     */
    public function setPurgExternalSortNumber($purg_external_sort_number)
    {
        if (is_null($purg_external_sort_number)) {
            throw new \InvalidArgumentException('non-nullable purg_external_sort_number cannot be null');
        }
        if ((mb_strlen($purg_external_sort_number) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purg_external_sort_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['purg_external_sort_number'] = $purg_external_sort_number;

        return $this;
    }

    /**
     * Gets batch
     *
     * @return string|null
     */
    public function getBatch()
    {
        return $this->container['batch'];
    }

    /**
     * Sets batch
     *
     * @param string|null $batch Batch Number
     *
     * @return self
     */
    public function setBatch($batch)
    {
        if (is_null($batch)) {
            throw new \InvalidArgumentException('non-nullable batch cannot be null');
        }
        if ((mb_strlen($batch) > 10)) {
            throw new \InvalidArgumentException('invalid length for $batch when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['batch'] = $batch;

        return $this;
    }

    /**
     * Gets purchasing_item_is_free_of_charge
     *
     * @return bool|null
     */
    public function getPurchasingItemIsFreeOfCharge()
    {
        return $this->container['purchasing_item_is_free_of_charge'];
    }

    /**
     * Sets purchasing_item_is_free_of_charge
     *
     * @param bool|null $purchasing_item_is_free_of_charge Free Item
     *
     * @return self
     */
    public function setPurchasingItemIsFreeOfCharge($purchasing_item_is_free_of_charge)
    {
        if (is_null($purchasing_item_is_free_of_charge)) {
            throw new \InvalidArgumentException('non-nullable purchasing_item_is_free_of_charge cannot be null');
        }
        $this->container['purchasing_item_is_free_of_charge'] = $purchasing_item_is_free_of_charge;

        return $this;
    }

    /**
     * Gets down_payment_type
     *
     * @return string|null
     */
    public function getDownPaymentType()
    {
        return $this->container['down_payment_type'];
    }

    /**
     * Sets down_payment_type
     *
     * @param string|null $down_payment_type Down Payment Indicator
     *
     * @return self
     */
    public function setDownPaymentType($down_payment_type)
    {
        if (is_null($down_payment_type)) {
            throw new \InvalidArgumentException('non-nullable down_payment_type cannot be null');
        }
        if ((mb_strlen($down_payment_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $down_payment_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['down_payment_type'] = $down_payment_type;

        return $this;
    }

    /**
     * Gets down_payment_percentage_of_tot_amt
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\DownPayment|null
     */
    public function getDownPaymentPercentageOfTotAmt()
    {
        return $this->container['down_payment_percentage_of_tot_amt'];
    }

    /**
     * Sets down_payment_percentage_of_tot_amt
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\DownPayment|null $down_payment_percentage_of_tot_amt down_payment_percentage_of_tot_amt
     *
     * @return self
     */
    public function setDownPaymentPercentageOfTotAmt($down_payment_percentage_of_tot_amt)
    {
        if (is_null($down_payment_percentage_of_tot_amt)) {
            throw new \InvalidArgumentException('non-nullable down_payment_percentage_of_tot_amt cannot be null');
        }
        $this->container['down_payment_percentage_of_tot_amt'] = $down_payment_percentage_of_tot_amt;

        return $this;
    }

    /**
     * Gets down_payment_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount|null
     */
    public function getDownPaymentAmount()
    {
        return $this->container['down_payment_amount'];
    }

    /**
     * Sets down_payment_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\DownPaymentAmount|null $down_payment_amount down_payment_amount
     *
     * @return self
     */
    public function setDownPaymentAmount($down_payment_amount)
    {
        if (is_null($down_payment_amount)) {
            throw new \InvalidArgumentException('non-nullable down_payment_amount cannot be null');
        }
        $this->container['down_payment_amount'] = $down_payment_amount;

        return $this;
    }

    /**
     * Gets down_payment_due_date
     *
     * @return \DateTime|null
     */
    public function getDownPaymentDueDate()
    {
        return $this->container['down_payment_due_date'];
    }

    /**
     * Sets down_payment_due_date
     *
     * @param \DateTime|null $down_payment_due_date Due Date for Down Payment
     *
     * @return self
     */
    public function setDownPaymentDueDate($down_payment_due_date)
    {
        if (is_null($down_payment_due_date)) {
            array_push($this->openAPINullablesSetToNull, 'down_payment_due_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('down_payment_due_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['down_payment_due_date'] = $down_payment_due_date;

        return $this;
    }

    /**
     * Gets expected_overall_limit_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ExpectedValue|null
     */
    public function getExpectedOverallLimitAmount()
    {
        return $this->container['expected_overall_limit_amount'];
    }

    /**
     * Sets expected_overall_limit_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ExpectedValue|null $expected_overall_limit_amount expected_overall_limit_amount
     *
     * @return self
     */
    public function setExpectedOverallLimitAmount($expected_overall_limit_amount)
    {
        if (is_null($expected_overall_limit_amount)) {
            throw new \InvalidArgumentException('non-nullable expected_overall_limit_amount cannot be null');
        }
        $this->container['expected_overall_limit_amount'] = $expected_overall_limit_amount;

        return $this;
    }

    /**
     * Gets overall_limit_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\OverallLimit|null
     */
    public function getOverallLimitAmount()
    {
        return $this->container['overall_limit_amount'];
    }

    /**
     * Sets overall_limit_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\OverallLimit|null $overall_limit_amount overall_limit_amount
     *
     * @return self
     */
    public function setOverallLimitAmount($overall_limit_amount)
    {
        if (is_null($overall_limit_amount)) {
            throw new \InvalidArgumentException('non-nullable overall_limit_amount cannot be null');
        }
        $this->container['overall_limit_amount'] = $overall_limit_amount;

        return $this;
    }

    /**
     * Gets pur_contract_for_overall_limit
     *
     * @return string|null
     */
    public function getPurContractForOverallLimit()
    {
        return $this->container['pur_contract_for_overall_limit'];
    }

    /**
     * Sets pur_contract_for_overall_limit
     *
     * @param string|null $pur_contract_for_overall_limit Purchase Contract for Enhanced Limit
     *
     * @return self
     */
    public function setPurContractForOverallLimit($pur_contract_for_overall_limit)
    {
        if (is_null($pur_contract_for_overall_limit)) {
            throw new \InvalidArgumentException('non-nullable pur_contract_for_overall_limit cannot be null');
        }
        if ((mb_strlen($pur_contract_for_overall_limit) > 10)) {
            throw new \InvalidArgumentException('invalid length for $pur_contract_for_overall_limit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['pur_contract_for_overall_limit'] = $pur_contract_for_overall_limit;

        return $this;
    }

    /**
     * Gets pur_contract_item_for_overall_limit
     *
     * @return string|null
     */
    public function getPurContractItemForOverallLimit()
    {
        return $this->container['pur_contract_item_for_overall_limit'];
    }

    /**
     * Sets pur_contract_item_for_overall_limit
     *
     * @param string|null $pur_contract_item_for_overall_limit Purchase Contract Reference Item for Enhanced Limit Item
     *
     * @return self
     */
    public function setPurContractItemForOverallLimit($pur_contract_item_for_overall_limit)
    {
        if (is_null($pur_contract_item_for_overall_limit)) {
            throw new \InvalidArgumentException('non-nullable pur_contract_item_for_overall_limit cannot be null');
        }
        if ((mb_strlen($pur_contract_item_for_overall_limit) > 5)) {
            throw new \InvalidArgumentException('invalid length for $pur_contract_item_for_overall_limit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['pur_contract_item_for_overall_limit'] = $pur_contract_item_for_overall_limit;

        return $this;
    }

    /**
     * Gets br_material_origin
     *
     * @return string|null
     */
    public function getBrMaterialOrigin()
    {
        return $this->container['br_material_origin'];
    }

    /**
     * Sets br_material_origin
     *
     * @param string|null $br_material_origin Origin of the material
     *
     * @return self
     */
    public function setBrMaterialOrigin($br_material_origin)
    {
        if (is_null($br_material_origin)) {
            throw new \InvalidArgumentException('non-nullable br_material_origin cannot be null');
        }
        if ((mb_strlen($br_material_origin) > 1)) {
            throw new \InvalidArgumentException('invalid length for $br_material_origin when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['br_material_origin'] = $br_material_origin;

        return $this;
    }

    /**
     * Gets br_material_usage
     *
     * @return string|null
     */
    public function getBrMaterialUsage()
    {
        return $this->container['br_material_usage'];
    }

    /**
     * Sets br_material_usage
     *
     * @param string|null $br_material_usage Usage of the material
     *
     * @return self
     */
    public function setBrMaterialUsage($br_material_usage)
    {
        if (is_null($br_material_usage)) {
            throw new \InvalidArgumentException('non-nullable br_material_usage cannot be null');
        }
        if ((mb_strlen($br_material_usage) > 1)) {
            throw new \InvalidArgumentException('invalid length for $br_material_usage when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['br_material_usage'] = $br_material_usage;

        return $this;
    }

    /**
     * Gets br_cfop_category
     *
     * @return string|null
     */
    public function getBrCfopCategory()
    {
        return $this->container['br_cfop_category'];
    }

    /**
     * Sets br_cfop_category
     *
     * @param string|null $br_cfop_category Material CFOP category
     *
     * @return self
     */
    public function setBrCfopCategory($br_cfop_category)
    {
        if (is_null($br_cfop_category)) {
            throw new \InvalidArgumentException('non-nullable br_cfop_category cannot be null');
        }
        if ((mb_strlen($br_cfop_category) > 2)) {
            throw new \InvalidArgumentException('invalid length for $br_cfop_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 2.');
        }

        $this->container['br_cfop_category'] = $br_cfop_category;

        return $this;
    }

    /**
     * Gets br_ncm
     *
     * @return string|null
     */
    public function getBrNcm()
    {
        return $this->container['br_ncm'];
    }

    /**
     * Sets br_ncm
     *
     * @param string|null $br_ncm Brazilian NCM Code
     *
     * @return self
     */
    public function setBrNcm($br_ncm)
    {
        if (is_null($br_ncm)) {
            throw new \InvalidArgumentException('non-nullable br_ncm cannot be null');
        }
        if ((mb_strlen($br_ncm) > 16)) {
            throw new \InvalidArgumentException('invalid length for $br_ncm when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 16.');
        }

        $this->container['br_ncm'] = $br_ncm;

        return $this;
    }

    /**
     * Gets consumption_tax_ctrl_code
     *
     * @return string|null
     */
    public function getConsumptionTaxCtrlCode()
    {
        return $this->container['consumption_tax_ctrl_code'];
    }

    /**
     * Sets consumption_tax_ctrl_code
     *
     * @param string|null $consumption_tax_ctrl_code HSN or SAC Code
     *
     * @return self
     */
    public function setConsumptionTaxCtrlCode($consumption_tax_ctrl_code)
    {
        if (is_null($consumption_tax_ctrl_code)) {
            throw new \InvalidArgumentException('non-nullable consumption_tax_ctrl_code cannot be null');
        }
        if ((mb_strlen($consumption_tax_ctrl_code) > 16)) {
            throw new \InvalidArgumentException('invalid length for $consumption_tax_ctrl_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 16.');
        }

        $this->container['consumption_tax_ctrl_code'] = $consumption_tax_ctrl_code;

        return $this;
    }

    /**
     * Gets br_is_produced_in_house
     *
     * @return bool|null
     */
    public function getBrIsProducedInHouse()
    {
        return $this->container['br_is_produced_in_house'];
    }

    /**
     * Sets br_is_produced_in_house
     *
     * @param bool|null $br_is_produced_in_house br_is_produced_in_house
     *
     * @return self
     */
    public function setBrIsProducedInHouse($br_is_produced_in_house)
    {
        if (is_null($br_is_produced_in_house)) {
            throw new \InvalidArgumentException('non-nullable br_is_produced_in_house cannot be null');
        }
        $this->container['br_is_produced_in_house'] = $br_is_produced_in_house;

        return $this;
    }

    /**
     * Gets product_season_year
     *
     * @return string|null
     */
    public function getProductSeasonYear()
    {
        return $this->container['product_season_year'];
    }

    /**
     * Sets product_season_year
     *
     * @param string|null $product_season_year product_season_year
     *
     * @return self
     */
    public function setProductSeasonYear($product_season_year)
    {
        if (is_null($product_season_year)) {
            throw new \InvalidArgumentException('non-nullable product_season_year cannot be null');
        }
        if ((mb_strlen($product_season_year) > 4)) {
            throw new \InvalidArgumentException('invalid length for $product_season_year when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['product_season_year'] = $product_season_year;

        return $this;
    }

    /**
     * Gets product_season
     *
     * @return string|null
     */
    public function getProductSeason()
    {
        return $this->container['product_season'];
    }

    /**
     * Sets product_season
     *
     * @param string|null $product_season product_season
     *
     * @return self
     */
    public function setProductSeason($product_season)
    {
        if (is_null($product_season)) {
            throw new \InvalidArgumentException('non-nullable product_season cannot be null');
        }
        if ((mb_strlen($product_season) > 10)) {
            throw new \InvalidArgumentException('invalid length for $product_season when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['product_season'] = $product_season;

        return $this;
    }

    /**
     * Gets product_collection
     *
     * @return string|null
     */
    public function getProductCollection()
    {
        return $this->container['product_collection'];
    }

    /**
     * Sets product_collection
     *
     * @param string|null $product_collection Fashion Collection
     *
     * @return self
     */
    public function setProductCollection($product_collection)
    {
        if (is_null($product_collection)) {
            throw new \InvalidArgumentException('non-nullable product_collection cannot be null');
        }
        if ((mb_strlen($product_collection) > 10)) {
            throw new \InvalidArgumentException('invalid length for $product_collection when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['product_collection'] = $product_collection;

        return $this;
    }

    /**
     * Gets product_theme
     *
     * @return string|null
     */
    public function getProductTheme()
    {
        return $this->container['product_theme'];
    }

    /**
     * Sets product_theme
     *
     * @param string|null $product_theme Fashion Theme
     *
     * @return self
     */
    public function setProductTheme($product_theme)
    {
        if (is_null($product_theme)) {
            throw new \InvalidArgumentException('non-nullable product_theme cannot be null');
        }
        if ((mb_strlen($product_theme) > 10)) {
            throw new \InvalidArgumentException('invalid length for $product_theme when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['product_theme'] = $product_theme;

        return $this;
    }

    /**
     * Gets season_completeness_status
     *
     * @return string|null
     */
    public function getSeasonCompletenessStatus()
    {
        return $this->container['season_completeness_status'];
    }

    /**
     * Sets season_completeness_status
     *
     * @param string|null $season_completeness_status Season Completeness Indicator
     *
     * @return self
     */
    public function setSeasonCompletenessStatus($season_completeness_status)
    {
        if (is_null($season_completeness_status)) {
            throw new \InvalidArgumentException('non-nullable season_completeness_status cannot be null');
        }
        if ((mb_strlen($season_completeness_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $season_completeness_status when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['season_completeness_status'] = $season_completeness_status;

        return $this;
    }

    /**
     * Gets shipping_group_rule
     *
     * @return string|null
     */
    public function getShippingGroupRule()
    {
        return $this->container['shipping_group_rule'];
    }

    /**
     * Sets shipping_group_rule
     *
     * @param string|null $shipping_group_rule shipping_group_rule
     *
     * @return self
     */
    public function setShippingGroupRule($shipping_group_rule)
    {
        if (is_null($shipping_group_rule)) {
            throw new \InvalidArgumentException('non-nullable shipping_group_rule cannot be null');
        }
        if ((mb_strlen($shipping_group_rule) > 4)) {
            throw new \InvalidArgumentException('invalid length for $shipping_group_rule when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 4.');
        }

        $this->container['shipping_group_rule'] = $shipping_group_rule;

        return $this;
    }

    /**
     * Gets shipping_group_number
     *
     * @return string|null
     */
    public function getShippingGroupNumber()
    {
        return $this->container['shipping_group_number'];
    }

    /**
     * Sets shipping_group_number
     *
     * @param string|null $shipping_group_number shipping_group_number
     *
     * @return self
     */
    public function setShippingGroupNumber($shipping_group_number)
    {
        if (is_null($shipping_group_number)) {
            throw new \InvalidArgumentException('non-nullable shipping_group_number cannot be null');
        }
        if ((mb_strlen($shipping_group_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $shipping_group_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['shipping_group_number'] = $shipping_group_number;

        return $this;
    }

    /**
     * Gets product_characteristic1
     *
     * @return string|null
     */
    public function getProductCharacteristic1()
    {
        return $this->container['product_characteristic1'];
    }

    /**
     * Sets product_characteristic1
     *
     * @param string|null $product_characteristic1 Characteristic Value 1
     *
     * @return self
     */
    public function setProductCharacteristic1($product_characteristic1)
    {
        if (is_null($product_characteristic1)) {
            throw new \InvalidArgumentException('non-nullable product_characteristic1 cannot be null');
        }
        if ((mb_strlen($product_characteristic1) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_characteristic1 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['product_characteristic1'] = $product_characteristic1;

        return $this;
    }

    /**
     * Gets product_characteristic2
     *
     * @return string|null
     */
    public function getProductCharacteristic2()
    {
        return $this->container['product_characteristic2'];
    }

    /**
     * Sets product_characteristic2
     *
     * @param string|null $product_characteristic2 Characteristic Value 2
     *
     * @return self
     */
    public function setProductCharacteristic2($product_characteristic2)
    {
        if (is_null($product_characteristic2)) {
            throw new \InvalidArgumentException('non-nullable product_characteristic2 cannot be null');
        }
        if ((mb_strlen($product_characteristic2) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_characteristic2 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['product_characteristic2'] = $product_characteristic2;

        return $this;
    }

    /**
     * Gets product_characteristic3
     *
     * @return string|null
     */
    public function getProductCharacteristic3()
    {
        return $this->container['product_characteristic3'];
    }

    /**
     * Sets product_characteristic3
     *
     * @param string|null $product_characteristic3 Characteristic Value 3
     *
     * @return self
     */
    public function setProductCharacteristic3($product_characteristic3)
    {
        if (is_null($product_characteristic3)) {
            throw new \InvalidArgumentException('non-nullable product_characteristic3 cannot be null');
        }
        if ((mb_strlen($product_characteristic3) > 18)) {
            throw new \InvalidArgumentException('invalid length for $product_characteristic3 when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 18.');
        }

        $this->container['product_characteristic3'] = $product_characteristic3;

        return $this;
    }

    /**
     * Gets purg_doc_subitem_category
     *
     * @return string|null
     */
    public function getPurgDocSubitemCategory()
    {
        return $this->container['purg_doc_subitem_category'];
    }

    /**
     * Sets purg_doc_subitem_category
     *
     * @param string|null $purg_doc_subitem_category Subitem Category, Purchasing Document
     *
     * @return self
     */
    public function setPurgDocSubitemCategory($purg_doc_subitem_category)
    {
        if (is_null($purg_doc_subitem_category)) {
            throw new \InvalidArgumentException('non-nullable purg_doc_subitem_category cannot be null');
        }
        if ((mb_strlen($purg_doc_subitem_category) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purg_doc_subitem_category when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purg_doc_subitem_category'] = $purg_doc_subitem_category;

        return $this;
    }

    /**
     * Gets diversion_status
     *
     * @return string|null
     */
    public function getDiversionStatus()
    {
        return $this->container['diversion_status'];
    }

    /**
     * Sets diversion_status
     *
     * @param string|null $diversion_status Status of Diversion process
     *
     * @return self
     */
    public function setDiversionStatus($diversion_status)
    {
        if (is_null($diversion_status)) {
            throw new \InvalidArgumentException('non-nullable diversion_status cannot be null');
        }
        if ((mb_strlen($diversion_status) > 1)) {
            throw new \InvalidArgumentException('invalid length for $diversion_status when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['diversion_status'] = $diversion_status;

        return $this;
    }

    /**
     * Gets reference_document_number
     *
     * @return string|null
     */
    public function getReferenceDocumentNumber()
    {
        return $this->container['reference_document_number'];
    }

    /**
     * Sets reference_document_number
     *
     * @param string|null $reference_document_number Reference Document number for PO Traceability
     *
     * @return self
     */
    public function setReferenceDocumentNumber($reference_document_number)
    {
        if (is_null($reference_document_number)) {
            throw new \InvalidArgumentException('non-nullable reference_document_number cannot be null');
        }
        if ((mb_strlen($reference_document_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $reference_document_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 10.');
        }

        $this->container['reference_document_number'] = $reference_document_number;

        return $this;
    }

    /**
     * Gets reference_document_item
     *
     * @return string|null
     */
    public function getReferenceDocumentItem()
    {
        return $this->container['reference_document_item'];
    }

    /**
     * Sets reference_document_item
     *
     * @param string|null $reference_document_item Reference Item number for PO Traceability
     *
     * @return self
     */
    public function setReferenceDocumentItem($reference_document_item)
    {
        if (is_null($reference_document_item)) {
            throw new \InvalidArgumentException('non-nullable reference_document_item cannot be null');
        }
        if ((mb_strlen($reference_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $reference_document_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 6.');
        }

        $this->container['reference_document_item'] = $reference_document_item;

        return $this;
    }

    /**
     * Gets purchase_order_reference_type
     *
     * @return string|null
     */
    public function getPurchaseOrderReferenceType()
    {
        return $this->container['purchase_order_reference_type'];
    }

    /**
     * Sets purchase_order_reference_type
     *
     * @param string|null $purchase_order_reference_type Action for Traceability in  PO
     *
     * @return self
     */
    public function setPurchaseOrderReferenceType($purchase_order_reference_type)
    {
        if (is_null($purchase_order_reference_type)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_reference_type cannot be null');
        }
        if ((mb_strlen($purchase_order_reference_type) > 1)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_reference_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 1.');
        }

        $this->container['purchase_order_reference_type'] = $purchase_order_reference_type;

        return $this;
    }

    /**
     * Gets item_has_value_added_service
     *
     * @return bool|null
     */
    public function getItemHasValueAddedService()
    {
        return $this->container['item_has_value_added_service'];
    }

    /**
     * Sets item_has_value_added_service
     *
     * @param bool|null $item_has_value_added_service item_has_value_added_service
     *
     * @return self
     */
    public function setItemHasValueAddedService($item_has_value_added_service)
    {
        if (is_null($item_has_value_added_service)) {
            throw new \InvalidArgumentException('non-nullable item_has_value_added_service cannot be null');
        }
        $this->container['item_has_value_added_service'] = $item_has_value_added_service;

        return $this;
    }

    /**
     * Gets val_added_srvc_parent_itm_number
     *
     * @return string|null
     */
    public function getValAddedSrvcParentItmNumber()
    {
        return $this->container['val_added_srvc_parent_itm_number'];
    }

    /**
     * Sets val_added_srvc_parent_itm_number
     *
     * @param string|null $val_added_srvc_parent_itm_number Item Number of Purchasing Document
     *
     * @return self
     */
    public function setValAddedSrvcParentItmNumber($val_added_srvc_parent_itm_number)
    {
        if (is_null($val_added_srvc_parent_itm_number)) {
            throw new \InvalidArgumentException('non-nullable val_added_srvc_parent_itm_number cannot be null');
        }
        if ((mb_strlen($val_added_srvc_parent_itm_number) > 5)) {
            throw new \InvalidArgumentException('invalid length for $val_added_srvc_parent_itm_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 5.');
        }

        $this->container['val_added_srvc_parent_itm_number'] = $val_added_srvc_parent_itm_number;

        return $this;
    }

    /**
     * Gets stock_segment
     *
     * @return string|null
     */
    public function getStockSegment()
    {
        return $this->container['stock_segment'];
    }

    /**
     * Sets stock_segment
     *
     * @param string|null $stock_segment stock_segment
     *
     * @return self
     */
    public function setStockSegment($stock_segment)
    {
        if (is_null($stock_segment)) {
            throw new \InvalidArgumentException('non-nullable stock_segment cannot be null');
        }
        if ((mb_strlen($stock_segment) > 40)) {
            throw new \InvalidArgumentException('invalid length for $stock_segment when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemTypeUpdate., must be smaller than or equal to 40.');
        }

        $this->container['stock_segment'] = $stock_segment;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageUpdate[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessageUpdate[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


