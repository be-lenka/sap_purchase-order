<?php
/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Purchase Order
 *
 * This service enables you to create purchase orders through an API call from a source system outside SAP S/4HANA Cloud. Furthermore, the service enables you to read, update or delete existing purchase orders from the SAP S/4HANA Cloud system. The service is based on the OData protocol.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BeLenka\SAP\PurchaseOrder\Model;

use \ArrayAccess;
use \BeLenka\SAP\PurchaseOrder\ObjectSerializer;

/**
 * ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType Class Doc Comment
 *
 * @category Class
 * @package  BeLenka\SAP\PurchaseOrder
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'com.sap.gateway.srvd_a2x.api_purchaseorder_2.v0001.PurchaseOrderAccountAssignment_Type';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'purchase_order' => 'string',
        'purchase_order_item' => 'string',
        'account_assignment_number' => 'string',
        'cost_center' => 'string',
        'master_fixed_asset' => 'string',
        'project_network' => 'string',
        'network_activity' => 'string',
        'order_quantity_unit' => 'string',
        'quantity' => '\BeLenka\SAP\PurchaseOrder\Model\Quantity',
        'multiple_acct_assgmt_distr_percent' => '\BeLenka\SAP\PurchaseOrder\Model\Distribution',
        'document_currency' => 'string',
        'purg_doc_net_amount' => '\BeLenka\SAP\PurchaseOrder\Model\NetOrderValue',
        'is_deleted' => 'bool',
        'gl_account' => 'string',
        'business_area' => 'string',
        'sales_order' => 'string',
        'sales_order_item' => 'string',
        'sales_order_schedule_line' => 'string',
        'fixed_asset' => 'string',
        'order_id' => 'string',
        'unloading_point_name' => 'string',
        'controlling_area' => 'string',
        'cost_object' => 'string',
        'profit_center' => 'string',
        'wbs_element_internal_id' => 'string',
        'wbs_element_external_id' => 'string',
        'project_network_internal_id' => 'string',
        'commitment_item_short_id' => 'string',
        'funds_center' => 'string',
        'fund' => 'string',
        'functional_area' => 'string',
        'goods_recipient_name' => 'string',
        'is_finally_invoiced' => 'bool',
        'network_activity_internal_id' => 'string',
        'partner_account_number' => 'string',
        'joint_venture_recovery_code' => 'string',
        'settlement_reference_date' => '\DateTime',
        'order_internal_id' => 'string',
        'order_int_bill_of_operations_item' => 'string',
        'tax_code' => 'string',
        'tax_jurisdiction' => 'string',
        'non_deductible_input_tax_amount' => '\BeLenka\SAP\PurchaseOrder\Model\NonDeductible',
        'cost_ctr_activity_type' => 'string',
        'business_process' => 'string',
        'grant_id' => 'string',
        'budget_period' => 'string',
        'earmarked_funds_document' => 'string',
        'earmarked_funds_document_item' => 'string',
        'validity_date' => '\DateTime',
        'chart_of_accounts' => 'string',
        'service_document_type' => 'string',
        'service_document' => 'string',
        'service_document_item' => 'string',
        'creation_date' => '\DateTime',
        'is_acct_line_final' => 'bool',
        'acct_line_final_reason' => 'string',
        'company_code' => 'string',
        'sap__messages' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]',
        '_purchase_order' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType',
        '_purchase_order_item' => '\BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'purchase_order' => null,
        'purchase_order_item' => null,
        'account_assignment_number' => null,
        'cost_center' => null,
        'master_fixed_asset' => null,
        'project_network' => null,
        'network_activity' => null,
        'order_quantity_unit' => null,
        'quantity' => null,
        'multiple_acct_assgmt_distr_percent' => null,
        'document_currency' => null,
        'purg_doc_net_amount' => null,
        'is_deleted' => null,
        'gl_account' => null,
        'business_area' => null,
        'sales_order' => null,
        'sales_order_item' => null,
        'sales_order_schedule_line' => null,
        'fixed_asset' => null,
        'order_id' => null,
        'unloading_point_name' => null,
        'controlling_area' => null,
        'cost_object' => null,
        'profit_center' => null,
        'wbs_element_internal_id' => null,
        'wbs_element_external_id' => null,
        'project_network_internal_id' => null,
        'commitment_item_short_id' => null,
        'funds_center' => null,
        'fund' => null,
        'functional_area' => null,
        'goods_recipient_name' => null,
        'is_finally_invoiced' => null,
        'network_activity_internal_id' => null,
        'partner_account_number' => null,
        'joint_venture_recovery_code' => null,
        'settlement_reference_date' => 'date',
        'order_internal_id' => null,
        'order_int_bill_of_operations_item' => null,
        'tax_code' => null,
        'tax_jurisdiction' => null,
        'non_deductible_input_tax_amount' => null,
        'cost_ctr_activity_type' => null,
        'business_process' => null,
        'grant_id' => null,
        'budget_period' => null,
        'earmarked_funds_document' => null,
        'earmarked_funds_document_item' => null,
        'validity_date' => 'date',
        'chart_of_accounts' => null,
        'service_document_type' => null,
        'service_document' => null,
        'service_document_item' => null,
        'creation_date' => 'date',
        'is_acct_line_final' => null,
        'acct_line_final_reason' => null,
        'company_code' => null,
        'sap__messages' => null,
        '_purchase_order' => null,
        '_purchase_order_item' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'purchase_order' => false,
		'purchase_order_item' => false,
		'account_assignment_number' => false,
		'cost_center' => false,
		'master_fixed_asset' => false,
		'project_network' => false,
		'network_activity' => false,
		'order_quantity_unit' => false,
		'quantity' => false,
		'multiple_acct_assgmt_distr_percent' => false,
		'document_currency' => false,
		'purg_doc_net_amount' => false,
		'is_deleted' => false,
		'gl_account' => false,
		'business_area' => false,
		'sales_order' => false,
		'sales_order_item' => false,
		'sales_order_schedule_line' => false,
		'fixed_asset' => false,
		'order_id' => false,
		'unloading_point_name' => false,
		'controlling_area' => false,
		'cost_object' => false,
		'profit_center' => false,
		'wbs_element_internal_id' => false,
		'wbs_element_external_id' => false,
		'project_network_internal_id' => false,
		'commitment_item_short_id' => false,
		'funds_center' => false,
		'fund' => false,
		'functional_area' => false,
		'goods_recipient_name' => false,
		'is_finally_invoiced' => false,
		'network_activity_internal_id' => false,
		'partner_account_number' => false,
		'joint_venture_recovery_code' => false,
		'settlement_reference_date' => true,
		'order_internal_id' => false,
		'order_int_bill_of_operations_item' => false,
		'tax_code' => false,
		'tax_jurisdiction' => false,
		'non_deductible_input_tax_amount' => false,
		'cost_ctr_activity_type' => false,
		'business_process' => false,
		'grant_id' => false,
		'budget_period' => false,
		'earmarked_funds_document' => false,
		'earmarked_funds_document_item' => false,
		'validity_date' => true,
		'chart_of_accounts' => false,
		'service_document_type' => false,
		'service_document' => false,
		'service_document_item' => false,
		'creation_date' => true,
		'is_acct_line_final' => false,
		'acct_line_final_reason' => false,
		'company_code' => false,
		'sap__messages' => false,
		'_purchase_order' => false,
		'_purchase_order_item' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'purchase_order' => 'PurchaseOrder',
        'purchase_order_item' => 'PurchaseOrderItem',
        'account_assignment_number' => 'AccountAssignmentNumber',
        'cost_center' => 'CostCenter',
        'master_fixed_asset' => 'MasterFixedAsset',
        'project_network' => 'ProjectNetwork',
        'network_activity' => 'NetworkActivity',
        'order_quantity_unit' => 'OrderQuantityUnit',
        'quantity' => 'Quantity',
        'multiple_acct_assgmt_distr_percent' => 'MultipleAcctAssgmtDistrPercent',
        'document_currency' => 'DocumentCurrency',
        'purg_doc_net_amount' => 'PurgDocNetAmount',
        'is_deleted' => 'IsDeleted',
        'gl_account' => 'GLAccount',
        'business_area' => 'BusinessArea',
        'sales_order' => 'SalesOrder',
        'sales_order_item' => 'SalesOrderItem',
        'sales_order_schedule_line' => 'SalesOrderScheduleLine',
        'fixed_asset' => 'FixedAsset',
        'order_id' => 'OrderID',
        'unloading_point_name' => 'UnloadingPointName',
        'controlling_area' => 'ControllingArea',
        'cost_object' => 'CostObject',
        'profit_center' => 'ProfitCenter',
        'wbs_element_internal_id' => 'WBSElementInternalID',
        'wbs_element_external_id' => 'WBSElementExternalID',
        'project_network_internal_id' => 'ProjectNetworkInternalID',
        'commitment_item_short_id' => 'CommitmentItemShortID',
        'funds_center' => 'FundsCenter',
        'fund' => 'Fund',
        'functional_area' => 'FunctionalArea',
        'goods_recipient_name' => 'GoodsRecipientName',
        'is_finally_invoiced' => 'IsFinallyInvoiced',
        'network_activity_internal_id' => 'NetworkActivityInternalID',
        'partner_account_number' => 'PartnerAccountNumber',
        'joint_venture_recovery_code' => 'JointVentureRecoveryCode',
        'settlement_reference_date' => 'SettlementReferenceDate',
        'order_internal_id' => 'OrderInternalID',
        'order_int_bill_of_operations_item' => 'OrderIntBillOfOperationsItem',
        'tax_code' => 'TaxCode',
        'tax_jurisdiction' => 'TaxJurisdiction',
        'non_deductible_input_tax_amount' => 'NonDeductibleInputTaxAmount',
        'cost_ctr_activity_type' => 'CostCtrActivityType',
        'business_process' => 'BusinessProcess',
        'grant_id' => 'GrantID',
        'budget_period' => 'BudgetPeriod',
        'earmarked_funds_document' => 'EarmarkedFundsDocument',
        'earmarked_funds_document_item' => 'EarmarkedFundsDocumentItem',
        'validity_date' => 'ValidityDate',
        'chart_of_accounts' => 'ChartOfAccounts',
        'service_document_type' => 'ServiceDocumentType',
        'service_document' => 'ServiceDocument',
        'service_document_item' => 'ServiceDocumentItem',
        'creation_date' => 'CreationDate',
        'is_acct_line_final' => 'IsAcctLineFinal',
        'acct_line_final_reason' => 'AcctLineFinalReason',
        'company_code' => 'CompanyCode',
        'sap__messages' => 'SAP__Messages',
        '_purchase_order' => '_PurchaseOrder',
        '_purchase_order_item' => '_PurchaseOrderItem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'purchase_order' => 'setPurchaseOrder',
        'purchase_order_item' => 'setPurchaseOrderItem',
        'account_assignment_number' => 'setAccountAssignmentNumber',
        'cost_center' => 'setCostCenter',
        'master_fixed_asset' => 'setMasterFixedAsset',
        'project_network' => 'setProjectNetwork',
        'network_activity' => 'setNetworkActivity',
        'order_quantity_unit' => 'setOrderQuantityUnit',
        'quantity' => 'setQuantity',
        'multiple_acct_assgmt_distr_percent' => 'setMultipleAcctAssgmtDistrPercent',
        'document_currency' => 'setDocumentCurrency',
        'purg_doc_net_amount' => 'setPurgDocNetAmount',
        'is_deleted' => 'setIsDeleted',
        'gl_account' => 'setGlAccount',
        'business_area' => 'setBusinessArea',
        'sales_order' => 'setSalesOrder',
        'sales_order_item' => 'setSalesOrderItem',
        'sales_order_schedule_line' => 'setSalesOrderScheduleLine',
        'fixed_asset' => 'setFixedAsset',
        'order_id' => 'setOrderId',
        'unloading_point_name' => 'setUnloadingPointName',
        'controlling_area' => 'setControllingArea',
        'cost_object' => 'setCostObject',
        'profit_center' => 'setProfitCenter',
        'wbs_element_internal_id' => 'setWbsElementInternalId',
        'wbs_element_external_id' => 'setWbsElementExternalId',
        'project_network_internal_id' => 'setProjectNetworkInternalId',
        'commitment_item_short_id' => 'setCommitmentItemShortId',
        'funds_center' => 'setFundsCenter',
        'fund' => 'setFund',
        'functional_area' => 'setFunctionalArea',
        'goods_recipient_name' => 'setGoodsRecipientName',
        'is_finally_invoiced' => 'setIsFinallyInvoiced',
        'network_activity_internal_id' => 'setNetworkActivityInternalId',
        'partner_account_number' => 'setPartnerAccountNumber',
        'joint_venture_recovery_code' => 'setJointVentureRecoveryCode',
        'settlement_reference_date' => 'setSettlementReferenceDate',
        'order_internal_id' => 'setOrderInternalId',
        'order_int_bill_of_operations_item' => 'setOrderIntBillOfOperationsItem',
        'tax_code' => 'setTaxCode',
        'tax_jurisdiction' => 'setTaxJurisdiction',
        'non_deductible_input_tax_amount' => 'setNonDeductibleInputTaxAmount',
        'cost_ctr_activity_type' => 'setCostCtrActivityType',
        'business_process' => 'setBusinessProcess',
        'grant_id' => 'setGrantId',
        'budget_period' => 'setBudgetPeriod',
        'earmarked_funds_document' => 'setEarmarkedFundsDocument',
        'earmarked_funds_document_item' => 'setEarmarkedFundsDocumentItem',
        'validity_date' => 'setValidityDate',
        'chart_of_accounts' => 'setChartOfAccounts',
        'service_document_type' => 'setServiceDocumentType',
        'service_document' => 'setServiceDocument',
        'service_document_item' => 'setServiceDocumentItem',
        'creation_date' => 'setCreationDate',
        'is_acct_line_final' => 'setIsAcctLineFinal',
        'acct_line_final_reason' => 'setAcctLineFinalReason',
        'company_code' => 'setCompanyCode',
        'sap__messages' => 'setSapMessages',
        '_purchase_order' => 'setPurchaseOrder',
        '_purchase_order_item' => 'setPurchaseOrderItem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'purchase_order' => 'getPurchaseOrder',
        'purchase_order_item' => 'getPurchaseOrderItem',
        'account_assignment_number' => 'getAccountAssignmentNumber',
        'cost_center' => 'getCostCenter',
        'master_fixed_asset' => 'getMasterFixedAsset',
        'project_network' => 'getProjectNetwork',
        'network_activity' => 'getNetworkActivity',
        'order_quantity_unit' => 'getOrderQuantityUnit',
        'quantity' => 'getQuantity',
        'multiple_acct_assgmt_distr_percent' => 'getMultipleAcctAssgmtDistrPercent',
        'document_currency' => 'getDocumentCurrency',
        'purg_doc_net_amount' => 'getPurgDocNetAmount',
        'is_deleted' => 'getIsDeleted',
        'gl_account' => 'getGlAccount',
        'business_area' => 'getBusinessArea',
        'sales_order' => 'getSalesOrder',
        'sales_order_item' => 'getSalesOrderItem',
        'sales_order_schedule_line' => 'getSalesOrderScheduleLine',
        'fixed_asset' => 'getFixedAsset',
        'order_id' => 'getOrderId',
        'unloading_point_name' => 'getUnloadingPointName',
        'controlling_area' => 'getControllingArea',
        'cost_object' => 'getCostObject',
        'profit_center' => 'getProfitCenter',
        'wbs_element_internal_id' => 'getWbsElementInternalId',
        'wbs_element_external_id' => 'getWbsElementExternalId',
        'project_network_internal_id' => 'getProjectNetworkInternalId',
        'commitment_item_short_id' => 'getCommitmentItemShortId',
        'funds_center' => 'getFundsCenter',
        'fund' => 'getFund',
        'functional_area' => 'getFunctionalArea',
        'goods_recipient_name' => 'getGoodsRecipientName',
        'is_finally_invoiced' => 'getIsFinallyInvoiced',
        'network_activity_internal_id' => 'getNetworkActivityInternalId',
        'partner_account_number' => 'getPartnerAccountNumber',
        'joint_venture_recovery_code' => 'getJointVentureRecoveryCode',
        'settlement_reference_date' => 'getSettlementReferenceDate',
        'order_internal_id' => 'getOrderInternalId',
        'order_int_bill_of_operations_item' => 'getOrderIntBillOfOperationsItem',
        'tax_code' => 'getTaxCode',
        'tax_jurisdiction' => 'getTaxJurisdiction',
        'non_deductible_input_tax_amount' => 'getNonDeductibleInputTaxAmount',
        'cost_ctr_activity_type' => 'getCostCtrActivityType',
        'business_process' => 'getBusinessProcess',
        'grant_id' => 'getGrantId',
        'budget_period' => 'getBudgetPeriod',
        'earmarked_funds_document' => 'getEarmarkedFundsDocument',
        'earmarked_funds_document_item' => 'getEarmarkedFundsDocumentItem',
        'validity_date' => 'getValidityDate',
        'chart_of_accounts' => 'getChartOfAccounts',
        'service_document_type' => 'getServiceDocumentType',
        'service_document' => 'getServiceDocument',
        'service_document_item' => 'getServiceDocumentItem',
        'creation_date' => 'getCreationDate',
        'is_acct_line_final' => 'getIsAcctLineFinal',
        'acct_line_final_reason' => 'getAcctLineFinalReason',
        'company_code' => 'getCompanyCode',
        'sap__messages' => 'getSapMessages',
        '_purchase_order' => 'getPurchaseOrder',
        '_purchase_order_item' => 'getPurchaseOrderItem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('purchase_order', $data ?? [], null);
        $this->setIfExists('purchase_order_item', $data ?? [], null);
        $this->setIfExists('account_assignment_number', $data ?? [], null);
        $this->setIfExists('cost_center', $data ?? [], null);
        $this->setIfExists('master_fixed_asset', $data ?? [], null);
        $this->setIfExists('project_network', $data ?? [], null);
        $this->setIfExists('network_activity', $data ?? [], null);
        $this->setIfExists('order_quantity_unit', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('multiple_acct_assgmt_distr_percent', $data ?? [], null);
        $this->setIfExists('document_currency', $data ?? [], null);
        $this->setIfExists('purg_doc_net_amount', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('gl_account', $data ?? [], null);
        $this->setIfExists('business_area', $data ?? [], null);
        $this->setIfExists('sales_order', $data ?? [], null);
        $this->setIfExists('sales_order_item', $data ?? [], null);
        $this->setIfExists('sales_order_schedule_line', $data ?? [], null);
        $this->setIfExists('fixed_asset', $data ?? [], null);
        $this->setIfExists('order_id', $data ?? [], null);
        $this->setIfExists('unloading_point_name', $data ?? [], null);
        $this->setIfExists('controlling_area', $data ?? [], null);
        $this->setIfExists('cost_object', $data ?? [], null);
        $this->setIfExists('profit_center', $data ?? [], null);
        $this->setIfExists('wbs_element_internal_id', $data ?? [], null);
        $this->setIfExists('wbs_element_external_id', $data ?? [], null);
        $this->setIfExists('project_network_internal_id', $data ?? [], null);
        $this->setIfExists('commitment_item_short_id', $data ?? [], null);
        $this->setIfExists('funds_center', $data ?? [], null);
        $this->setIfExists('fund', $data ?? [], null);
        $this->setIfExists('functional_area', $data ?? [], null);
        $this->setIfExists('goods_recipient_name', $data ?? [], null);
        $this->setIfExists('is_finally_invoiced', $data ?? [], null);
        $this->setIfExists('network_activity_internal_id', $data ?? [], null);
        $this->setIfExists('partner_account_number', $data ?? [], null);
        $this->setIfExists('joint_venture_recovery_code', $data ?? [], null);
        $this->setIfExists('settlement_reference_date', $data ?? [], null);
        $this->setIfExists('order_internal_id', $data ?? [], null);
        $this->setIfExists('order_int_bill_of_operations_item', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('tax_jurisdiction', $data ?? [], null);
        $this->setIfExists('non_deductible_input_tax_amount', $data ?? [], null);
        $this->setIfExists('cost_ctr_activity_type', $data ?? [], null);
        $this->setIfExists('business_process', $data ?? [], null);
        $this->setIfExists('grant_id', $data ?? [], null);
        $this->setIfExists('budget_period', $data ?? [], null);
        $this->setIfExists('earmarked_funds_document', $data ?? [], null);
        $this->setIfExists('earmarked_funds_document_item', $data ?? [], null);
        $this->setIfExists('validity_date', $data ?? [], null);
        $this->setIfExists('chart_of_accounts', $data ?? [], null);
        $this->setIfExists('service_document_type', $data ?? [], null);
        $this->setIfExists('service_document', $data ?? [], null);
        $this->setIfExists('service_document_item', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('is_acct_line_final', $data ?? [], null);
        $this->setIfExists('acct_line_final_reason', $data ?? [], null);
        $this->setIfExists('company_code', $data ?? [], null);
        $this->setIfExists('sap__messages', $data ?? [], null);
        $this->setIfExists('_purchase_order', $data ?? [], null);
        $this->setIfExists('_purchase_order_item', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['purchase_order']) && (mb_strlen($this->container['purchase_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'purchase_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['purchase_order_item']) && (mb_strlen($this->container['purchase_order_item']) > 5)) {
            $invalidProperties[] = "invalid value for 'purchase_order_item', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['account_assignment_number']) && (mb_strlen($this->container['account_assignment_number']) > 2)) {
            $invalidProperties[] = "invalid value for 'account_assignment_number', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['cost_center']) && (mb_strlen($this->container['cost_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'cost_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['master_fixed_asset']) && (mb_strlen($this->container['master_fixed_asset']) > 12)) {
            $invalidProperties[] = "invalid value for 'master_fixed_asset', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['project_network']) && (mb_strlen($this->container['project_network']) > 12)) {
            $invalidProperties[] = "invalid value for 'project_network', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['network_activity']) && (mb_strlen($this->container['network_activity']) > 4)) {
            $invalidProperties[] = "invalid value for 'network_activity', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['order_quantity_unit']) && (mb_strlen($this->container['order_quantity_unit']) > 3)) {
            $invalidProperties[] = "invalid value for 'order_quantity_unit', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['document_currency']) && (mb_strlen($this->container['document_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'document_currency', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['gl_account']) && (mb_strlen($this->container['gl_account']) > 10)) {
            $invalidProperties[] = "invalid value for 'gl_account', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['business_area']) && (mb_strlen($this->container['business_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'business_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['sales_order']) && (mb_strlen($this->container['sales_order']) > 10)) {
            $invalidProperties[] = "invalid value for 'sales_order', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['sales_order_item']) && (mb_strlen($this->container['sales_order_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'sales_order_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['sales_order_schedule_line']) && (mb_strlen($this->container['sales_order_schedule_line']) > 4)) {
            $invalidProperties[] = "invalid value for 'sales_order_schedule_line', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['fixed_asset']) && (mb_strlen($this->container['fixed_asset']) > 4)) {
            $invalidProperties[] = "invalid value for 'fixed_asset', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['order_id']) && (mb_strlen($this->container['order_id']) > 12)) {
            $invalidProperties[] = "invalid value for 'order_id', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['unloading_point_name']) && (mb_strlen($this->container['unloading_point_name']) > 25)) {
            $invalidProperties[] = "invalid value for 'unloading_point_name', the character length must be smaller than or equal to 25.";
        }

        if (!is_null($this->container['controlling_area']) && (mb_strlen($this->container['controlling_area']) > 4)) {
            $invalidProperties[] = "invalid value for 'controlling_area', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['cost_object']) && (mb_strlen($this->container['cost_object']) > 12)) {
            $invalidProperties[] = "invalid value for 'cost_object', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['profit_center']) && (mb_strlen($this->container['profit_center']) > 10)) {
            $invalidProperties[] = "invalid value for 'profit_center', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['wbs_element_internal_id']) && (mb_strlen($this->container['wbs_element_internal_id']) > 8)) {
            $invalidProperties[] = "invalid value for 'wbs_element_internal_id', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['wbs_element_external_id']) && (mb_strlen($this->container['wbs_element_external_id']) > 24)) {
            $invalidProperties[] = "invalid value for 'wbs_element_external_id', the character length must be smaller than or equal to 24.";
        }

        if (!is_null($this->container['project_network_internal_id']) && (mb_strlen($this->container['project_network_internal_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'project_network_internal_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['commitment_item_short_id']) && (mb_strlen($this->container['commitment_item_short_id']) > 14)) {
            $invalidProperties[] = "invalid value for 'commitment_item_short_id', the character length must be smaller than or equal to 14.";
        }

        if (!is_null($this->container['funds_center']) && (mb_strlen($this->container['funds_center']) > 16)) {
            $invalidProperties[] = "invalid value for 'funds_center', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['fund']) && (mb_strlen($this->container['fund']) > 10)) {
            $invalidProperties[] = "invalid value for 'fund', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['functional_area']) && (mb_strlen($this->container['functional_area']) > 16)) {
            $invalidProperties[] = "invalid value for 'functional_area', the character length must be smaller than or equal to 16.";
        }

        if (!is_null($this->container['goods_recipient_name']) && (mb_strlen($this->container['goods_recipient_name']) > 12)) {
            $invalidProperties[] = "invalid value for 'goods_recipient_name', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['network_activity_internal_id']) && (mb_strlen($this->container['network_activity_internal_id']) > 8)) {
            $invalidProperties[] = "invalid value for 'network_activity_internal_id', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['partner_account_number']) && (mb_strlen($this->container['partner_account_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'partner_account_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['joint_venture_recovery_code']) && (mb_strlen($this->container['joint_venture_recovery_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'joint_venture_recovery_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['order_internal_id']) && (mb_strlen($this->container['order_internal_id']) > 10)) {
            $invalidProperties[] = "invalid value for 'order_internal_id', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['order_int_bill_of_operations_item']) && (mb_strlen($this->container['order_int_bill_of_operations_item']) > 8)) {
            $invalidProperties[] = "invalid value for 'order_int_bill_of_operations_item', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['tax_code']) && (mb_strlen($this->container['tax_code']) > 2)) {
            $invalidProperties[] = "invalid value for 'tax_code', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['tax_jurisdiction']) && (mb_strlen($this->container['tax_jurisdiction']) > 15)) {
            $invalidProperties[] = "invalid value for 'tax_jurisdiction', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['cost_ctr_activity_type']) && (mb_strlen($this->container['cost_ctr_activity_type']) > 6)) {
            $invalidProperties[] = "invalid value for 'cost_ctr_activity_type', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['business_process']) && (mb_strlen($this->container['business_process']) > 12)) {
            $invalidProperties[] = "invalid value for 'business_process', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['grant_id']) && (mb_strlen($this->container['grant_id']) > 20)) {
            $invalidProperties[] = "invalid value for 'grant_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['budget_period']) && (mb_strlen($this->container['budget_period']) > 10)) {
            $invalidProperties[] = "invalid value for 'budget_period', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['earmarked_funds_document']) && (mb_strlen($this->container['earmarked_funds_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'earmarked_funds_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['earmarked_funds_document_item']) && (mb_strlen($this->container['earmarked_funds_document_item']) > 3)) {
            $invalidProperties[] = "invalid value for 'earmarked_funds_document_item', the character length must be smaller than or equal to 3.";
        }

        if (!is_null($this->container['chart_of_accounts']) && (mb_strlen($this->container['chart_of_accounts']) > 4)) {
            $invalidProperties[] = "invalid value for 'chart_of_accounts', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['service_document_type']) && (mb_strlen($this->container['service_document_type']) > 4)) {
            $invalidProperties[] = "invalid value for 'service_document_type', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['service_document']) && (mb_strlen($this->container['service_document']) > 10)) {
            $invalidProperties[] = "invalid value for 'service_document', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['service_document_item']) && (mb_strlen($this->container['service_document_item']) > 6)) {
            $invalidProperties[] = "invalid value for 'service_document_item', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['acct_line_final_reason']) && (mb_strlen($this->container['acct_line_final_reason']) > 2)) {
            $invalidProperties[] = "invalid value for 'acct_line_final_reason', the character length must be smaller than or equal to 2.";
        }

        if (!is_null($this->container['company_code']) && (mb_strlen($this->container['company_code']) > 4)) {
            $invalidProperties[] = "invalid value for 'company_code', the character length must be smaller than or equal to 4.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets purchase_order
     *
     * @return string|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['purchase_order'];
    }

    /**
     * Sets purchase_order
     *
     * @param string|null $purchase_order Purchasing Document Number
     *
     * @return self
     */
    public function setPurchaseOrder($purchase_order)
    {
        if (is_null($purchase_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_order cannot be null');
        }
        if ((mb_strlen($purchase_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['purchase_order'] = $purchase_order;

        return $this;
    }

    /**
     * Gets purchase_order_item
     *
     * @return string|null
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['purchase_order_item'];
    }

    /**
     * Sets purchase_order_item
     *
     * @param string|null $purchase_order_item Item Number of Purchasing Document
     *
     * @return self
     */
    public function setPurchaseOrderItem($purchase_order_item)
    {
        if (is_null($purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable purchase_order_item cannot be null');
        }
        if ((mb_strlen($purchase_order_item) > 5)) {
            throw new \InvalidArgumentException('invalid length for $purchase_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 5.');
        }

        $this->container['purchase_order_item'] = $purchase_order_item;

        return $this;
    }

    /**
     * Gets account_assignment_number
     *
     * @return string|null
     */
    public function getAccountAssignmentNumber()
    {
        return $this->container['account_assignment_number'];
    }

    /**
     * Sets account_assignment_number
     *
     * @param string|null $account_assignment_number Sequential Number of Account Assignment
     *
     * @return self
     */
    public function setAccountAssignmentNumber($account_assignment_number)
    {
        if (is_null($account_assignment_number)) {
            throw new \InvalidArgumentException('non-nullable account_assignment_number cannot be null');
        }
        if ((mb_strlen($account_assignment_number) > 2)) {
            throw new \InvalidArgumentException('invalid length for $account_assignment_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 2.');
        }

        $this->container['account_assignment_number'] = $account_assignment_number;

        return $this;
    }

    /**
     * Gets cost_center
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['cost_center'];
    }

    /**
     * Sets cost_center
     *
     * @param string|null $cost_center cost_center
     *
     * @return self
     */
    public function setCostCenter($cost_center)
    {
        if (is_null($cost_center)) {
            throw new \InvalidArgumentException('non-nullable cost_center cannot be null');
        }
        if ((mb_strlen($cost_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $cost_center when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['cost_center'] = $cost_center;

        return $this;
    }

    /**
     * Gets master_fixed_asset
     *
     * @return string|null
     */
    public function getMasterFixedAsset()
    {
        return $this->container['master_fixed_asset'];
    }

    /**
     * Sets master_fixed_asset
     *
     * @param string|null $master_fixed_asset Main Asset Number
     *
     * @return self
     */
    public function setMasterFixedAsset($master_fixed_asset)
    {
        if (is_null($master_fixed_asset)) {
            throw new \InvalidArgumentException('non-nullable master_fixed_asset cannot be null');
        }
        if ((mb_strlen($master_fixed_asset) > 12)) {
            throw new \InvalidArgumentException('invalid length for $master_fixed_asset when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['master_fixed_asset'] = $master_fixed_asset;

        return $this;
    }

    /**
     * Gets project_network
     *
     * @return string|null
     */
    public function getProjectNetwork()
    {
        return $this->container['project_network'];
    }

    /**
     * Sets project_network
     *
     * @param string|null $project_network Network Number for Account Assignment
     *
     * @return self
     */
    public function setProjectNetwork($project_network)
    {
        if (is_null($project_network)) {
            throw new \InvalidArgumentException('non-nullable project_network cannot be null');
        }
        if ((mb_strlen($project_network) > 12)) {
            throw new \InvalidArgumentException('invalid length for $project_network when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['project_network'] = $project_network;

        return $this;
    }

    /**
     * Gets network_activity
     *
     * @return string|null
     */
    public function getNetworkActivity()
    {
        return $this->container['network_activity'];
    }

    /**
     * Sets network_activity
     *
     * @param string|null $network_activity Operation/Activity Number
     *
     * @return self
     */
    public function setNetworkActivity($network_activity)
    {
        if (is_null($network_activity)) {
            throw new \InvalidArgumentException('non-nullable network_activity cannot be null');
        }
        if ((mb_strlen($network_activity) > 4)) {
            throw new \InvalidArgumentException('invalid length for $network_activity when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['network_activity'] = $network_activity;

        return $this;
    }

    /**
     * Gets order_quantity_unit
     *
     * @return string|null
     */
    public function getOrderQuantityUnit()
    {
        return $this->container['order_quantity_unit'];
    }

    /**
     * Sets order_quantity_unit
     *
     * @param string|null $order_quantity_unit Purchase Order Unit of Measure
     *
     * @return self
     */
    public function setOrderQuantityUnit($order_quantity_unit)
    {
        if (is_null($order_quantity_unit)) {
            throw new \InvalidArgumentException('non-nullable order_quantity_unit cannot be null');
        }
        if ((mb_strlen($order_quantity_unit) > 3)) {
            throw new \InvalidArgumentException('invalid length for $order_quantity_unit when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 3.');
        }

        $this->container['order_quantity_unit'] = $order_quantity_unit;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Quantity|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Quantity|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets multiple_acct_assgmt_distr_percent
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\Distribution|null
     */
    public function getMultipleAcctAssgmtDistrPercent()
    {
        return $this->container['multiple_acct_assgmt_distr_percent'];
    }

    /**
     * Sets multiple_acct_assgmt_distr_percent
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\Distribution|null $multiple_acct_assgmt_distr_percent multiple_acct_assgmt_distr_percent
     *
     * @return self
     */
    public function setMultipleAcctAssgmtDistrPercent($multiple_acct_assgmt_distr_percent)
    {
        if (is_null($multiple_acct_assgmt_distr_percent)) {
            throw new \InvalidArgumentException('non-nullable multiple_acct_assgmt_distr_percent cannot be null');
        }
        $this->container['multiple_acct_assgmt_distr_percent'] = $multiple_acct_assgmt_distr_percent;

        return $this;
    }

    /**
     * Gets document_currency
     *
     * @return string|null
     */
    public function getDocumentCurrency()
    {
        return $this->container['document_currency'];
    }

    /**
     * Sets document_currency
     *
     * @param string|null $document_currency Currency Key
     *
     * @return self
     */
    public function setDocumentCurrency($document_currency)
    {
        if (is_null($document_currency)) {
            throw new \InvalidArgumentException('non-nullable document_currency cannot be null');
        }
        if ((mb_strlen($document_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $document_currency when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 3.');
        }

        $this->container['document_currency'] = $document_currency;

        return $this;
    }

    /**
     * Gets purg_doc_net_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NetOrderValue|null
     */
    public function getPurgDocNetAmount()
    {
        return $this->container['purg_doc_net_amount'];
    }

    /**
     * Sets purg_doc_net_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NetOrderValue|null $purg_doc_net_amount purg_doc_net_amount
     *
     * @return self
     */
    public function setPurgDocNetAmount($purg_doc_net_amount)
    {
        if (is_null($purg_doc_net_amount)) {
            throw new \InvalidArgumentException('non-nullable purg_doc_net_amount cannot be null');
        }
        $this->container['purg_doc_net_amount'] = $purg_doc_net_amount;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted Deletion Indicator: Purchasing Document Account Assignment
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets gl_account
     *
     * @return string|null
     */
    public function getGlAccount()
    {
        return $this->container['gl_account'];
    }

    /**
     * Sets gl_account
     *
     * @param string|null $gl_account G/L Account Number
     *
     * @return self
     */
    public function setGlAccount($gl_account)
    {
        if (is_null($gl_account)) {
            throw new \InvalidArgumentException('non-nullable gl_account cannot be null');
        }
        if ((mb_strlen($gl_account) > 10)) {
            throw new \InvalidArgumentException('invalid length for $gl_account when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['gl_account'] = $gl_account;

        return $this;
    }

    /**
     * Gets business_area
     *
     * @return string|null
     */
    public function getBusinessArea()
    {
        return $this->container['business_area'];
    }

    /**
     * Sets business_area
     *
     * @param string|null $business_area business_area
     *
     * @return self
     */
    public function setBusinessArea($business_area)
    {
        if (is_null($business_area)) {
            throw new \InvalidArgumentException('non-nullable business_area cannot be null');
        }
        if ((mb_strlen($business_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $business_area when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['business_area'] = $business_area;

        return $this;
    }

    /**
     * Gets sales_order
     *
     * @return string|null
     */
    public function getSalesOrder()
    {
        return $this->container['sales_order'];
    }

    /**
     * Sets sales_order
     *
     * @param string|null $sales_order Sales and Distribution Document Number
     *
     * @return self
     */
    public function setSalesOrder($sales_order)
    {
        if (is_null($sales_order)) {
            throw new \InvalidArgumentException('non-nullable sales_order cannot be null');
        }
        if ((mb_strlen($sales_order) > 10)) {
            throw new \InvalidArgumentException('invalid length for $sales_order when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['sales_order'] = $sales_order;

        return $this;
    }

    /**
     * Gets sales_order_item
     *
     * @return string|null
     */
    public function getSalesOrderItem()
    {
        return $this->container['sales_order_item'];
    }

    /**
     * Sets sales_order_item
     *
     * @param string|null $sales_order_item Sales Document Item
     *
     * @return self
     */
    public function setSalesOrderItem($sales_order_item)
    {
        if (is_null($sales_order_item)) {
            throw new \InvalidArgumentException('non-nullable sales_order_item cannot be null');
        }
        if ((mb_strlen($sales_order_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 6.');
        }

        $this->container['sales_order_item'] = $sales_order_item;

        return $this;
    }

    /**
     * Gets sales_order_schedule_line
     *
     * @return string|null
     */
    public function getSalesOrderScheduleLine()
    {
        return $this->container['sales_order_schedule_line'];
    }

    /**
     * Sets sales_order_schedule_line
     *
     * @param string|null $sales_order_schedule_line sales_order_schedule_line
     *
     * @return self
     */
    public function setSalesOrderScheduleLine($sales_order_schedule_line)
    {
        if (is_null($sales_order_schedule_line)) {
            throw new \InvalidArgumentException('non-nullable sales_order_schedule_line cannot be null');
        }
        if ((mb_strlen($sales_order_schedule_line) > 4)) {
            throw new \InvalidArgumentException('invalid length for $sales_order_schedule_line when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['sales_order_schedule_line'] = $sales_order_schedule_line;

        return $this;
    }

    /**
     * Gets fixed_asset
     *
     * @return string|null
     */
    public function getFixedAsset()
    {
        return $this->container['fixed_asset'];
    }

    /**
     * Sets fixed_asset
     *
     * @param string|null $fixed_asset Asset Subnumber
     *
     * @return self
     */
    public function setFixedAsset($fixed_asset)
    {
        if (is_null($fixed_asset)) {
            throw new \InvalidArgumentException('non-nullable fixed_asset cannot be null');
        }
        if ((mb_strlen($fixed_asset) > 4)) {
            throw new \InvalidArgumentException('invalid length for $fixed_asset when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['fixed_asset'] = $fixed_asset;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string|null
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string|null $order_id Order Number
     *
     * @return self
     */
    public function setOrderId($order_id)
    {
        if (is_null($order_id)) {
            throw new \InvalidArgumentException('non-nullable order_id cannot be null');
        }
        if ((mb_strlen($order_id) > 12)) {
            throw new \InvalidArgumentException('invalid length for $order_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets unloading_point_name
     *
     * @return string|null
     */
    public function getUnloadingPointName()
    {
        return $this->container['unloading_point_name'];
    }

    /**
     * Sets unloading_point_name
     *
     * @param string|null $unloading_point_name unloading_point_name
     *
     * @return self
     */
    public function setUnloadingPointName($unloading_point_name)
    {
        if (is_null($unloading_point_name)) {
            throw new \InvalidArgumentException('non-nullable unloading_point_name cannot be null');
        }
        if ((mb_strlen($unloading_point_name) > 25)) {
            throw new \InvalidArgumentException('invalid length for $unloading_point_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 25.');
        }

        $this->container['unloading_point_name'] = $unloading_point_name;

        return $this;
    }

    /**
     * Gets controlling_area
     *
     * @return string|null
     */
    public function getControllingArea()
    {
        return $this->container['controlling_area'];
    }

    /**
     * Sets controlling_area
     *
     * @param string|null $controlling_area controlling_area
     *
     * @return self
     */
    public function setControllingArea($controlling_area)
    {
        if (is_null($controlling_area)) {
            throw new \InvalidArgumentException('non-nullable controlling_area cannot be null');
        }
        if ((mb_strlen($controlling_area) > 4)) {
            throw new \InvalidArgumentException('invalid length for $controlling_area when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['controlling_area'] = $controlling_area;

        return $this;
    }

    /**
     * Gets cost_object
     *
     * @return string|null
     */
    public function getCostObject()
    {
        return $this->container['cost_object'];
    }

    /**
     * Sets cost_object
     *
     * @param string|null $cost_object cost_object
     *
     * @return self
     */
    public function setCostObject($cost_object)
    {
        if (is_null($cost_object)) {
            throw new \InvalidArgumentException('non-nullable cost_object cannot be null');
        }
        if ((mb_strlen($cost_object) > 12)) {
            throw new \InvalidArgumentException('invalid length for $cost_object when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['cost_object'] = $cost_object;

        return $this;
    }

    /**
     * Gets profit_center
     *
     * @return string|null
     */
    public function getProfitCenter()
    {
        return $this->container['profit_center'];
    }

    /**
     * Sets profit_center
     *
     * @param string|null $profit_center profit_center
     *
     * @return self
     */
    public function setProfitCenter($profit_center)
    {
        if (is_null($profit_center)) {
            throw new \InvalidArgumentException('non-nullable profit_center cannot be null');
        }
        if ((mb_strlen($profit_center) > 10)) {
            throw new \InvalidArgumentException('invalid length for $profit_center when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['profit_center'] = $profit_center;

        return $this;
    }

    /**
     * Gets wbs_element_internal_id
     *
     * @return string|null
     */
    public function getWbsElementInternalId()
    {
        return $this->container['wbs_element_internal_id'];
    }

    /**
     * Sets wbs_element_internal_id
     *
     * @param string|null $wbs_element_internal_id WBS Element
     *
     * @return self
     */
    public function setWbsElementInternalId($wbs_element_internal_id)
    {
        if (is_null($wbs_element_internal_id)) {
            throw new \InvalidArgumentException('non-nullable wbs_element_internal_id cannot be null');
        }
        if ((mb_strlen($wbs_element_internal_id) > 8)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element_internal_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 8.');
        }

        $this->container['wbs_element_internal_id'] = $wbs_element_internal_id;

        return $this;
    }

    /**
     * Gets wbs_element_external_id
     *
     * @return string|null
     */
    public function getWbsElementExternalId()
    {
        return $this->container['wbs_element_external_id'];
    }

    /**
     * Sets wbs_element_external_id
     *
     * @param string|null $wbs_element_external_id Work Breakdown Structure Element (WBS Element) Edited
     *
     * @return self
     */
    public function setWbsElementExternalId($wbs_element_external_id)
    {
        if (is_null($wbs_element_external_id)) {
            throw new \InvalidArgumentException('non-nullable wbs_element_external_id cannot be null');
        }
        if ((mb_strlen($wbs_element_external_id) > 24)) {
            throw new \InvalidArgumentException('invalid length for $wbs_element_external_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 24.');
        }

        $this->container['wbs_element_external_id'] = $wbs_element_external_id;

        return $this;
    }

    /**
     * Gets project_network_internal_id
     *
     * @return string|null
     */
    public function getProjectNetworkInternalId()
    {
        return $this->container['project_network_internal_id'];
    }

    /**
     * Sets project_network_internal_id
     *
     * @param string|null $project_network_internal_id Routing Number of Operations in the Order
     *
     * @return self
     */
    public function setProjectNetworkInternalId($project_network_internal_id)
    {
        if (is_null($project_network_internal_id)) {
            throw new \InvalidArgumentException('non-nullable project_network_internal_id cannot be null');
        }
        if ((mb_strlen($project_network_internal_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $project_network_internal_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['project_network_internal_id'] = $project_network_internal_id;

        return $this;
    }

    /**
     * Gets commitment_item_short_id
     *
     * @return string|null
     */
    public function getCommitmentItemShortId()
    {
        return $this->container['commitment_item_short_id'];
    }

    /**
     * Sets commitment_item_short_id
     *
     * @param string|null $commitment_item_short_id commitment_item_short_id
     *
     * @return self
     */
    public function setCommitmentItemShortId($commitment_item_short_id)
    {
        if (is_null($commitment_item_short_id)) {
            throw new \InvalidArgumentException('non-nullable commitment_item_short_id cannot be null');
        }
        if ((mb_strlen($commitment_item_short_id) > 14)) {
            throw new \InvalidArgumentException('invalid length for $commitment_item_short_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 14.');
        }

        $this->container['commitment_item_short_id'] = $commitment_item_short_id;

        return $this;
    }

    /**
     * Gets funds_center
     *
     * @return string|null
     */
    public function getFundsCenter()
    {
        return $this->container['funds_center'];
    }

    /**
     * Sets funds_center
     *
     * @param string|null $funds_center funds_center
     *
     * @return self
     */
    public function setFundsCenter($funds_center)
    {
        if (is_null($funds_center)) {
            throw new \InvalidArgumentException('non-nullable funds_center cannot be null');
        }
        if ((mb_strlen($funds_center) > 16)) {
            throw new \InvalidArgumentException('invalid length for $funds_center when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 16.');
        }

        $this->container['funds_center'] = $funds_center;

        return $this;
    }

    /**
     * Gets fund
     *
     * @return string|null
     */
    public function getFund()
    {
        return $this->container['fund'];
    }

    /**
     * Sets fund
     *
     * @param string|null $fund fund
     *
     * @return self
     */
    public function setFund($fund)
    {
        if (is_null($fund)) {
            throw new \InvalidArgumentException('non-nullable fund cannot be null');
        }
        if ((mb_strlen($fund) > 10)) {
            throw new \InvalidArgumentException('invalid length for $fund when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['fund'] = $fund;

        return $this;
    }

    /**
     * Gets functional_area
     *
     * @return string|null
     */
    public function getFunctionalArea()
    {
        return $this->container['functional_area'];
    }

    /**
     * Sets functional_area
     *
     * @param string|null $functional_area functional_area
     *
     * @return self
     */
    public function setFunctionalArea($functional_area)
    {
        if (is_null($functional_area)) {
            throw new \InvalidArgumentException('non-nullable functional_area cannot be null');
        }
        if ((mb_strlen($functional_area) > 16)) {
            throw new \InvalidArgumentException('invalid length for $functional_area when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 16.');
        }

        $this->container['functional_area'] = $functional_area;

        return $this;
    }

    /**
     * Gets goods_recipient_name
     *
     * @return string|null
     */
    public function getGoodsRecipientName()
    {
        return $this->container['goods_recipient_name'];
    }

    /**
     * Sets goods_recipient_name
     *
     * @param string|null $goods_recipient_name goods_recipient_name
     *
     * @return self
     */
    public function setGoodsRecipientName($goods_recipient_name)
    {
        if (is_null($goods_recipient_name)) {
            throw new \InvalidArgumentException('non-nullable goods_recipient_name cannot be null');
        }
        if ((mb_strlen($goods_recipient_name) > 12)) {
            throw new \InvalidArgumentException('invalid length for $goods_recipient_name when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['goods_recipient_name'] = $goods_recipient_name;

        return $this;
    }

    /**
     * Gets is_finally_invoiced
     *
     * @return bool|null
     */
    public function getIsFinallyInvoiced()
    {
        return $this->container['is_finally_invoiced'];
    }

    /**
     * Sets is_finally_invoiced
     *
     * @param bool|null $is_finally_invoiced Final Invoice Indicator
     *
     * @return self
     */
    public function setIsFinallyInvoiced($is_finally_invoiced)
    {
        if (is_null($is_finally_invoiced)) {
            throw new \InvalidArgumentException('non-nullable is_finally_invoiced cannot be null');
        }
        $this->container['is_finally_invoiced'] = $is_finally_invoiced;

        return $this;
    }

    /**
     * Gets network_activity_internal_id
     *
     * @return string|null
     */
    public function getNetworkActivityInternalId()
    {
        return $this->container['network_activity_internal_id'];
    }

    /**
     * Sets network_activity_internal_id
     *
     * @param string|null $network_activity_internal_id Internal counter
     *
     * @return self
     */
    public function setNetworkActivityInternalId($network_activity_internal_id)
    {
        if (is_null($network_activity_internal_id)) {
            throw new \InvalidArgumentException('non-nullable network_activity_internal_id cannot be null');
        }
        if ((mb_strlen($network_activity_internal_id) > 8)) {
            throw new \InvalidArgumentException('invalid length for $network_activity_internal_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 8.');
        }

        $this->container['network_activity_internal_id'] = $network_activity_internal_id;

        return $this;
    }

    /**
     * Gets partner_account_number
     *
     * @return string|null
     */
    public function getPartnerAccountNumber()
    {
        return $this->container['partner_account_number'];
    }

    /**
     * Sets partner_account_number
     *
     * @param string|null $partner_account_number Partner account number
     *
     * @return self
     */
    public function setPartnerAccountNumber($partner_account_number)
    {
        if (is_null($partner_account_number)) {
            throw new \InvalidArgumentException('non-nullable partner_account_number cannot be null');
        }
        if ((mb_strlen($partner_account_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $partner_account_number when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['partner_account_number'] = $partner_account_number;

        return $this;
    }

    /**
     * Gets joint_venture_recovery_code
     *
     * @return string|null
     */
    public function getJointVentureRecoveryCode()
    {
        return $this->container['joint_venture_recovery_code'];
    }

    /**
     * Sets joint_venture_recovery_code
     *
     * @param string|null $joint_venture_recovery_code joint_venture_recovery_code
     *
     * @return self
     */
    public function setJointVentureRecoveryCode($joint_venture_recovery_code)
    {
        if (is_null($joint_venture_recovery_code)) {
            throw new \InvalidArgumentException('non-nullable joint_venture_recovery_code cannot be null');
        }
        if ((mb_strlen($joint_venture_recovery_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $joint_venture_recovery_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 2.');
        }

        $this->container['joint_venture_recovery_code'] = $joint_venture_recovery_code;

        return $this;
    }

    /**
     * Gets settlement_reference_date
     *
     * @return \DateTime|null
     */
    public function getSettlementReferenceDate()
    {
        return $this->container['settlement_reference_date'];
    }

    /**
     * Sets settlement_reference_date
     *
     * @param \DateTime|null $settlement_reference_date Reference date for settlement
     *
     * @return self
     */
    public function setSettlementReferenceDate($settlement_reference_date)
    {
        if (is_null($settlement_reference_date)) {
            array_push($this->openAPINullablesSetToNull, 'settlement_reference_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settlement_reference_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settlement_reference_date'] = $settlement_reference_date;

        return $this;
    }

    /**
     * Gets order_internal_id
     *
     * @return string|null
     */
    public function getOrderInternalId()
    {
        return $this->container['order_internal_id'];
    }

    /**
     * Sets order_internal_id
     *
     * @param string|null $order_internal_id Routing Number of Operations in the Order
     *
     * @return self
     */
    public function setOrderInternalId($order_internal_id)
    {
        if (is_null($order_internal_id)) {
            throw new \InvalidArgumentException('non-nullable order_internal_id cannot be null');
        }
        if ((mb_strlen($order_internal_id) > 10)) {
            throw new \InvalidArgumentException('invalid length for $order_internal_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['order_internal_id'] = $order_internal_id;

        return $this;
    }

    /**
     * Gets order_int_bill_of_operations_item
     *
     * @return string|null
     */
    public function getOrderIntBillOfOperationsItem()
    {
        return $this->container['order_int_bill_of_operations_item'];
    }

    /**
     * Sets order_int_bill_of_operations_item
     *
     * @param string|null $order_int_bill_of_operations_item General counter for order
     *
     * @return self
     */
    public function setOrderIntBillOfOperationsItem($order_int_bill_of_operations_item)
    {
        if (is_null($order_int_bill_of_operations_item)) {
            throw new \InvalidArgumentException('non-nullable order_int_bill_of_operations_item cannot be null');
        }
        if ((mb_strlen($order_int_bill_of_operations_item) > 8)) {
            throw new \InvalidArgumentException('invalid length for $order_int_bill_of_operations_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 8.');
        }

        $this->container['order_int_bill_of_operations_item'] = $order_int_bill_of_operations_item;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code Tax on Sales/Purchases Code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        if ((mb_strlen($tax_code) > 2)) {
            throw new \InvalidArgumentException('invalid length for $tax_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 2.');
        }

        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets tax_jurisdiction
     *
     * @return string|null
     */
    public function getTaxJurisdiction()
    {
        return $this->container['tax_jurisdiction'];
    }

    /**
     * Sets tax_jurisdiction
     *
     * @param string|null $tax_jurisdiction tax_jurisdiction
     *
     * @return self
     */
    public function setTaxJurisdiction($tax_jurisdiction)
    {
        if (is_null($tax_jurisdiction)) {
            throw new \InvalidArgumentException('non-nullable tax_jurisdiction cannot be null');
        }
        if ((mb_strlen($tax_jurisdiction) > 15)) {
            throw new \InvalidArgumentException('invalid length for $tax_jurisdiction when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 15.');
        }

        $this->container['tax_jurisdiction'] = $tax_jurisdiction;

        return $this;
    }

    /**
     * Gets non_deductible_input_tax_amount
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\NonDeductible|null
     */
    public function getNonDeductibleInputTaxAmount()
    {
        return $this->container['non_deductible_input_tax_amount'];
    }

    /**
     * Sets non_deductible_input_tax_amount
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\NonDeductible|null $non_deductible_input_tax_amount non_deductible_input_tax_amount
     *
     * @return self
     */
    public function setNonDeductibleInputTaxAmount($non_deductible_input_tax_amount)
    {
        if (is_null($non_deductible_input_tax_amount)) {
            throw new \InvalidArgumentException('non-nullable non_deductible_input_tax_amount cannot be null');
        }
        $this->container['non_deductible_input_tax_amount'] = $non_deductible_input_tax_amount;

        return $this;
    }

    /**
     * Gets cost_ctr_activity_type
     *
     * @return string|null
     */
    public function getCostCtrActivityType()
    {
        return $this->container['cost_ctr_activity_type'];
    }

    /**
     * Sets cost_ctr_activity_type
     *
     * @param string|null $cost_ctr_activity_type cost_ctr_activity_type
     *
     * @return self
     */
    public function setCostCtrActivityType($cost_ctr_activity_type)
    {
        if (is_null($cost_ctr_activity_type)) {
            throw new \InvalidArgumentException('non-nullable cost_ctr_activity_type cannot be null');
        }
        if ((mb_strlen($cost_ctr_activity_type) > 6)) {
            throw new \InvalidArgumentException('invalid length for $cost_ctr_activity_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 6.');
        }

        $this->container['cost_ctr_activity_type'] = $cost_ctr_activity_type;

        return $this;
    }

    /**
     * Gets business_process
     *
     * @return string|null
     */
    public function getBusinessProcess()
    {
        return $this->container['business_process'];
    }

    /**
     * Sets business_process
     *
     * @param string|null $business_process business_process
     *
     * @return self
     */
    public function setBusinessProcess($business_process)
    {
        if (is_null($business_process)) {
            throw new \InvalidArgumentException('non-nullable business_process cannot be null');
        }
        if ((mb_strlen($business_process) > 12)) {
            throw new \InvalidArgumentException('invalid length for $business_process when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 12.');
        }

        $this->container['business_process'] = $business_process;

        return $this;
    }

    /**
     * Gets grant_id
     *
     * @return string|null
     */
    public function getGrantId()
    {
        return $this->container['grant_id'];
    }

    /**
     * Sets grant_id
     *
     * @param string|null $grant_id grant_id
     *
     * @return self
     */
    public function setGrantId($grant_id)
    {
        if (is_null($grant_id)) {
            throw new \InvalidArgumentException('non-nullable grant_id cannot be null');
        }
        if ((mb_strlen($grant_id) > 20)) {
            throw new \InvalidArgumentException('invalid length for $grant_id when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 20.');
        }

        $this->container['grant_id'] = $grant_id;

        return $this;
    }

    /**
     * Gets budget_period
     *
     * @return string|null
     */
    public function getBudgetPeriod()
    {
        return $this->container['budget_period'];
    }

    /**
     * Sets budget_period
     *
     * @param string|null $budget_period budget_period
     *
     * @return self
     */
    public function setBudgetPeriod($budget_period)
    {
        if (is_null($budget_period)) {
            throw new \InvalidArgumentException('non-nullable budget_period cannot be null');
        }
        if ((mb_strlen($budget_period) > 10)) {
            throw new \InvalidArgumentException('invalid length for $budget_period when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['budget_period'] = $budget_period;

        return $this;
    }

    /**
     * Gets earmarked_funds_document
     *
     * @return string|null
     */
    public function getEarmarkedFundsDocument()
    {
        return $this->container['earmarked_funds_document'];
    }

    /**
     * Sets earmarked_funds_document
     *
     * @param string|null $earmarked_funds_document Document Number for Earmarked Funds
     *
     * @return self
     */
    public function setEarmarkedFundsDocument($earmarked_funds_document)
    {
        if (is_null($earmarked_funds_document)) {
            throw new \InvalidArgumentException('non-nullable earmarked_funds_document cannot be null');
        }
        if ((mb_strlen($earmarked_funds_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $earmarked_funds_document when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['earmarked_funds_document'] = $earmarked_funds_document;

        return $this;
    }

    /**
     * Gets earmarked_funds_document_item
     *
     * @return string|null
     */
    public function getEarmarkedFundsDocumentItem()
    {
        return $this->container['earmarked_funds_document_item'];
    }

    /**
     * Sets earmarked_funds_document_item
     *
     * @param string|null $earmarked_funds_document_item Earmarked Funds: Document Item
     *
     * @return self
     */
    public function setEarmarkedFundsDocumentItem($earmarked_funds_document_item)
    {
        if (is_null($earmarked_funds_document_item)) {
            throw new \InvalidArgumentException('non-nullable earmarked_funds_document_item cannot be null');
        }
        if ((mb_strlen($earmarked_funds_document_item) > 3)) {
            throw new \InvalidArgumentException('invalid length for $earmarked_funds_document_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 3.');
        }

        $this->container['earmarked_funds_document_item'] = $earmarked_funds_document_item;

        return $this;
    }

    /**
     * Gets validity_date
     *
     * @return \DateTime|null
     */
    public function getValidityDate()
    {
        return $this->container['validity_date'];
    }

    /**
     * Sets validity_date
     *
     * @param \DateTime|null $validity_date validity_date
     *
     * @return self
     */
    public function setValidityDate($validity_date)
    {
        if (is_null($validity_date)) {
            array_push($this->openAPINullablesSetToNull, 'validity_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validity_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['validity_date'] = $validity_date;

        return $this;
    }

    /**
     * Gets chart_of_accounts
     *
     * @return string|null
     */
    public function getChartOfAccounts()
    {
        return $this->container['chart_of_accounts'];
    }

    /**
     * Sets chart_of_accounts
     *
     * @param string|null $chart_of_accounts chart_of_accounts
     *
     * @return self
     */
    public function setChartOfAccounts($chart_of_accounts)
    {
        if (is_null($chart_of_accounts)) {
            throw new \InvalidArgumentException('non-nullable chart_of_accounts cannot be null');
        }
        if ((mb_strlen($chart_of_accounts) > 4)) {
            throw new \InvalidArgumentException('invalid length for $chart_of_accounts when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['chart_of_accounts'] = $chart_of_accounts;

        return $this;
    }

    /**
     * Gets service_document_type
     *
     * @return string|null
     */
    public function getServiceDocumentType()
    {
        return $this->container['service_document_type'];
    }

    /**
     * Sets service_document_type
     *
     * @param string|null $service_document_type Service Document Type
     *
     * @return self
     */
    public function setServiceDocumentType($service_document_type)
    {
        if (is_null($service_document_type)) {
            throw new \InvalidArgumentException('non-nullable service_document_type cannot be null');
        }
        if ((mb_strlen($service_document_type) > 4)) {
            throw new \InvalidArgumentException('invalid length for $service_document_type when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['service_document_type'] = $service_document_type;

        return $this;
    }

    /**
     * Gets service_document
     *
     * @return string|null
     */
    public function getServiceDocument()
    {
        return $this->container['service_document'];
    }

    /**
     * Sets service_document
     *
     * @param string|null $service_document Service Document ID
     *
     * @return self
     */
    public function setServiceDocument($service_document)
    {
        if (is_null($service_document)) {
            throw new \InvalidArgumentException('non-nullable service_document cannot be null');
        }
        if ((mb_strlen($service_document) > 10)) {
            throw new \InvalidArgumentException('invalid length for $service_document when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 10.');
        }

        $this->container['service_document'] = $service_document;

        return $this;
    }

    /**
     * Gets service_document_item
     *
     * @return string|null
     */
    public function getServiceDocumentItem()
    {
        return $this->container['service_document_item'];
    }

    /**
     * Sets service_document_item
     *
     * @param string|null $service_document_item Service Document Item ID
     *
     * @return self
     */
    public function setServiceDocumentItem($service_document_item)
    {
        if (is_null($service_document_item)) {
            throw new \InvalidArgumentException('non-nullable service_document_item cannot be null');
        }
        if ((mb_strlen($service_document_item) > 6)) {
            throw new \InvalidArgumentException('invalid length for $service_document_item when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 6.');
        }

        $this->container['service_document_item'] = $service_document_item;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date Record Creation Date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            array_push($this->openAPINullablesSetToNull, 'creation_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('creation_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets is_acct_line_final
     *
     * @return bool|null
     */
    public function getIsAcctLineFinal()
    {
        return $this->container['is_acct_line_final'];
    }

    /**
     * Sets is_acct_line_final
     *
     * @param bool|null $is_acct_line_final Final Account Assignment Indicator
     *
     * @return self
     */
    public function setIsAcctLineFinal($is_acct_line_final)
    {
        if (is_null($is_acct_line_final)) {
            throw new \InvalidArgumentException('non-nullable is_acct_line_final cannot be null');
        }
        $this->container['is_acct_line_final'] = $is_acct_line_final;

        return $this;
    }

    /**
     * Gets acct_line_final_reason
     *
     * @return string|null
     */
    public function getAcctLineFinalReason()
    {
        return $this->container['acct_line_final_reason'];
    }

    /**
     * Sets acct_line_final_reason
     *
     * @param string|null $acct_line_final_reason Final Account Assignment Reason Code
     *
     * @return self
     */
    public function setAcctLineFinalReason($acct_line_final_reason)
    {
        if (is_null($acct_line_final_reason)) {
            throw new \InvalidArgumentException('non-nullable acct_line_final_reason cannot be null');
        }
        if ((mb_strlen($acct_line_final_reason) > 2)) {
            throw new \InvalidArgumentException('invalid length for $acct_line_final_reason when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 2.');
        }

        $this->container['acct_line_final_reason'] = $acct_line_final_reason;

        return $this;
    }

    /**
     * Gets company_code
     *
     * @return string|null
     */
    public function getCompanyCode()
    {
        return $this->container['company_code'];
    }

    /**
     * Sets company_code
     *
     * @param string|null $company_code company_code
     *
     * @return self
     */
    public function setCompanyCode($company_code)
    {
        if (is_null($company_code)) {
            throw new \InvalidArgumentException('non-nullable company_code cannot be null');
        }
        if ((mb_strlen($company_code) > 4)) {
            throw new \InvalidArgumentException('invalid length for $company_code when calling ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderAccountAssignmentType., must be smaller than or equal to 4.');
        }

        $this->container['company_code'] = $company_code;

        return $this;
    }

    /**
     * Gets sap__messages
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]|null
     */
    public function getSapMessages()
    {
        return $this->container['sap__messages'];
    }

    /**
     * Sets sap__messages
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001SAPMessage[]|null $sap__messages sap__messages
     *
     * @return self
     */
    public function setSapMessages($sap__messages)
    {
        if (is_null($sap__messages)) {
            throw new \InvalidArgumentException('non-nullable sap__messages cannot be null');
        }
        $this->container['sap__messages'] = $sap__messages;

        return $this;
    }

    /**
     * Gets _purchase_order
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|null
     */
    public function getPurchaseOrder()
    {
        return $this->container['_purchase_order'];
    }

    /**
     * Sets _purchase_order
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderType|null $_purchase_order _purchase_order
     *
     * @return self
     */
    public function setPurchaseOrder($_purchase_order)
    {
        if (is_null($_purchase_order)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order cannot be null');
        }
        $this->container['_purchase_order'] = $_purchase_order;

        return $this;
    }

    /**
     * Gets _purchase_order_item
     *
     * @return \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|null
     */
    public function getPurchaseOrderItem()
    {
        return $this->container['_purchase_order_item'];
    }

    /**
     * Sets _purchase_order_item
     *
     * @param \BeLenka\SAP\PurchaseOrder\Model\ComSapGatewaySrvdA2xApiPurchaseorder2V0001PurchaseOrderItemType|null $_purchase_order_item _purchase_order_item
     *
     * @return self
     */
    public function setPurchaseOrderItem($_purchase_order_item)
    {
        if (is_null($_purchase_order_item)) {
            throw new \InvalidArgumentException('non-nullable _purchase_order_item cannot be null');
        }
        $this->container['_purchase_order_item'] = $_purchase_order_item;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


